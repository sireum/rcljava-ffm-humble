// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_jump_threshold_s {
 *     bool on_clock_change;
 *     rcl_duration_t min_forward;
 *     rcl_duration_t min_backward;
 * }
 * }
 */
public class rcl_jump_threshold_s {

    rcl_jump_threshold_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_BOOL.withName("on_clock_change"),
        MemoryLayout.paddingLayout(7),
        rcl_duration_s.layout().withName("min_forward"),
        rcl_duration_s.layout().withName("min_backward")
    ).withName("rcl_jump_threshold_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean on_clock_change$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("on_clock_change"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool on_clock_change
     * }
     */
    public static final OfBoolean on_clock_change$layout() {
        return on_clock_change$LAYOUT;
    }

    private static final long on_clock_change$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool on_clock_change
     * }
     */
    public static final long on_clock_change$offset() {
        return on_clock_change$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool on_clock_change
     * }
     */
    public static boolean on_clock_change(MemorySegment struct) {
        return struct.get(on_clock_change$LAYOUT, on_clock_change$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool on_clock_change
     * }
     */
    public static void on_clock_change(MemorySegment struct, boolean fieldValue) {
        struct.set(on_clock_change$LAYOUT, on_clock_change$OFFSET, fieldValue);
    }

    private static final GroupLayout min_forward$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("min_forward"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_duration_t min_forward
     * }
     */
    public static final GroupLayout min_forward$layout() {
        return min_forward$LAYOUT;
    }

    private static final long min_forward$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_duration_t min_forward
     * }
     */
    public static final long min_forward$offset() {
        return min_forward$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_duration_t min_forward
     * }
     */
    public static MemorySegment min_forward(MemorySegment struct) {
        return struct.asSlice(min_forward$OFFSET, min_forward$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_duration_t min_forward
     * }
     */
    public static void min_forward(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, min_forward$OFFSET, min_forward$LAYOUT.byteSize());
    }

    private static final GroupLayout min_backward$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("min_backward"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_duration_t min_backward
     * }
     */
    public static final GroupLayout min_backward$layout() {
        return min_backward$LAYOUT;
    }

    private static final long min_backward$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_duration_t min_backward
     * }
     */
    public static final long min_backward$offset() {
        return min_backward$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_duration_t min_backward
     * }
     */
    public static MemorySegment min_backward(MemorySegment struct) {
        return struct.asSlice(min_backward$OFFSET, min_backward$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_duration_t min_backward
     * }
     */
    public static void min_backward(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, min_backward$OFFSET, min_backward$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

