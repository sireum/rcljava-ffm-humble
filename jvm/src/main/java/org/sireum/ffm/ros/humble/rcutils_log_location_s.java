// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcutils_log_location_s {
 *     const char *function_name;
 *     const char *file_name;
 *     size_t line_number;
 * }
 * }
 */
public class rcutils_log_location_s {

    rcutils_log_location_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("function_name"),
        gen_h.C_POINTER.withName("file_name"),
        gen_h.C_LONG.withName("line_number")
    ).withName("rcutils_log_location_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout function_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("function_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *function_name
     * }
     */
    public static final AddressLayout function_name$layout() {
        return function_name$LAYOUT;
    }

    private static final long function_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *function_name
     * }
     */
    public static final long function_name$offset() {
        return function_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *function_name
     * }
     */
    public static MemorySegment function_name(MemorySegment struct) {
        return struct.get(function_name$LAYOUT, function_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *function_name
     * }
     */
    public static void function_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(function_name$LAYOUT, function_name$OFFSET, fieldValue);
    }

    private static final AddressLayout file_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("file_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static final AddressLayout file_name$layout() {
        return file_name$LAYOUT;
    }

    private static final long file_name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static final long file_name$offset() {
        return file_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static MemorySegment file_name(MemorySegment struct) {
        return struct.get(file_name$LAYOUT, file_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static void file_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(file_name$LAYOUT, file_name$OFFSET, fieldValue);
    }

    private static final OfLong line_number$LAYOUT = (OfLong)$LAYOUT.select(groupElement("line_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t line_number
     * }
     */
    public static final OfLong line_number$layout() {
        return line_number$LAYOUT;
    }

    private static final long line_number$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t line_number
     * }
     */
    public static final long line_number$offset() {
        return line_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t line_number
     * }
     */
    public static long line_number(MemorySegment struct) {
        return struct.get(line_number$LAYOUT, line_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t line_number
     * }
     */
    public static void line_number(MemorySegment struct, long fieldValue) {
        struct.set(line_number$LAYOUT, line_number$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

