// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rclc_lifecycle_node_t {
 *     rcl_node_t *node;
 *     rcl_lifecycle_state_machine_t *state_machine;
 *     rclc_lifecycle_callback_map_t callbacks;
 *     bool publish_transitions;
 *     lifecycle_msgs__srv__ChangeState_Request cs_req;
 *     lifecycle_msgs__srv__ChangeState_Response cs_res;
 *     lifecycle_msgs__srv__GetState_Request gs_req;
 *     lifecycle_msgs__srv__GetState_Response gs_res;
 *     lifecycle_msgs__srv__GetAvailableStates_Request gas_req;
 *     lifecycle_msgs__srv__GetAvailableStates_Response gas_res;
 * }
 * }
 */
public class rclc_lifecycle_node_t {

    rclc_lifecycle_node_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("node"),
        gen_h.C_POINTER.withName("state_machine"),
        rclc_lifecycle_callback_map_t.layout().withName("callbacks"),
        gen_h.C_BOOL.withName("publish_transitions"),
        MemoryLayout.paddingLayout(7),
        lifecycle_msgs__srv__ChangeState_Request.layout().withName("cs_req"),
        lifecycle_msgs__srv__ChangeState_Response.layout().withName("cs_res"),
        lifecycle_msgs__srv__GetState_Request.layout().withName("gs_req"),
        MemoryLayout.paddingLayout(6),
        lifecycle_msgs__srv__GetState_Response.layout().withName("gs_res"),
        lifecycle_msgs__srv__GetAvailableStates_Request.layout().withName("gas_req"),
        MemoryLayout.paddingLayout(7),
        lifecycle_msgs__srv__GetAvailableStates_Response.layout().withName("gas_res")
    ).withName("rclc_lifecycle_node_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout node$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("node"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_node_t *node
     * }
     */
    public static final AddressLayout node$layout() {
        return node$LAYOUT;
    }

    private static final long node$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_node_t *node
     * }
     */
    public static final long node$offset() {
        return node$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_node_t *node
     * }
     */
    public static MemorySegment node(MemorySegment struct) {
        return struct.get(node$LAYOUT, node$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_node_t *node
     * }
     */
    public static void node(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(node$LAYOUT, node$OFFSET, fieldValue);
    }

    private static final AddressLayout state_machine$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("state_machine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_t *state_machine
     * }
     */
    public static final AddressLayout state_machine$layout() {
        return state_machine$LAYOUT;
    }

    private static final long state_machine$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_t *state_machine
     * }
     */
    public static final long state_machine$offset() {
        return state_machine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_t *state_machine
     * }
     */
    public static MemorySegment state_machine(MemorySegment struct) {
        return struct.get(state_machine$LAYOUT, state_machine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_t *state_machine
     * }
     */
    public static void state_machine(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(state_machine$LAYOUT, state_machine$OFFSET, fieldValue);
    }

    private static final GroupLayout callbacks$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("callbacks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_lifecycle_callback_map_t callbacks
     * }
     */
    public static final GroupLayout callbacks$layout() {
        return callbacks$LAYOUT;
    }

    private static final long callbacks$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_lifecycle_callback_map_t callbacks
     * }
     */
    public static final long callbacks$offset() {
        return callbacks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_lifecycle_callback_map_t callbacks
     * }
     */
    public static MemorySegment callbacks(MemorySegment struct) {
        return struct.asSlice(callbacks$OFFSET, callbacks$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_lifecycle_callback_map_t callbacks
     * }
     */
    public static void callbacks(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, callbacks$OFFSET, callbacks$LAYOUT.byteSize());
    }

    private static final OfBoolean publish_transitions$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("publish_transitions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool publish_transitions
     * }
     */
    public static final OfBoolean publish_transitions$layout() {
        return publish_transitions$LAYOUT;
    }

    private static final long publish_transitions$OFFSET = 920;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool publish_transitions
     * }
     */
    public static final long publish_transitions$offset() {
        return publish_transitions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool publish_transitions
     * }
     */
    public static boolean publish_transitions(MemorySegment struct) {
        return struct.get(publish_transitions$LAYOUT, publish_transitions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool publish_transitions
     * }
     */
    public static void publish_transitions(MemorySegment struct, boolean fieldValue) {
        struct.set(publish_transitions$LAYOUT, publish_transitions$OFFSET, fieldValue);
    }

    private static final GroupLayout cs_req$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cs_req"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request cs_req
     * }
     */
    public static final GroupLayout cs_req$layout() {
        return cs_req$LAYOUT;
    }

    private static final long cs_req$OFFSET = 928;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request cs_req
     * }
     */
    public static final long cs_req$offset() {
        return cs_req$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request cs_req
     * }
     */
    public static MemorySegment cs_req(MemorySegment struct) {
        return struct.asSlice(cs_req$OFFSET, cs_req$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request cs_req
     * }
     */
    public static void cs_req(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cs_req$OFFSET, cs_req$LAYOUT.byteSize());
    }

    private static final GroupLayout cs_res$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cs_res"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response cs_res
     * }
     */
    public static final GroupLayout cs_res$layout() {
        return cs_res$LAYOUT;
    }

    private static final long cs_res$OFFSET = 960;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response cs_res
     * }
     */
    public static final long cs_res$offset() {
        return cs_res$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response cs_res
     * }
     */
    public static MemorySegment cs_res(MemorySegment struct) {
        return struct.asSlice(cs_res$OFFSET, cs_res$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response cs_res
     * }
     */
    public static void cs_res(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cs_res$OFFSET, cs_res$LAYOUT.byteSize());
    }

    private static final GroupLayout gs_req$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gs_req"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request gs_req
     * }
     */
    public static final GroupLayout gs_req$layout() {
        return gs_req$LAYOUT;
    }

    private static final long gs_req$OFFSET = 961;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request gs_req
     * }
     */
    public static final long gs_req$offset() {
        return gs_req$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request gs_req
     * }
     */
    public static MemorySegment gs_req(MemorySegment struct) {
        return struct.asSlice(gs_req$OFFSET, gs_req$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request gs_req
     * }
     */
    public static void gs_req(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gs_req$OFFSET, gs_req$LAYOUT.byteSize());
    }

    private static final GroupLayout gs_res$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gs_res"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response gs_res
     * }
     */
    public static final GroupLayout gs_res$layout() {
        return gs_res$LAYOUT;
    }

    private static final long gs_res$OFFSET = 968;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response gs_res
     * }
     */
    public static final long gs_res$offset() {
        return gs_res$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response gs_res
     * }
     */
    public static MemorySegment gs_res(MemorySegment struct) {
        return struct.asSlice(gs_res$OFFSET, gs_res$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response gs_res
     * }
     */
    public static void gs_res(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gs_res$OFFSET, gs_res$LAYOUT.byteSize());
    }

    private static final GroupLayout gas_req$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gas_req"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request gas_req
     * }
     */
    public static final GroupLayout gas_req$layout() {
        return gas_req$LAYOUT;
    }

    private static final long gas_req$OFFSET = 1000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request gas_req
     * }
     */
    public static final long gas_req$offset() {
        return gas_req$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request gas_req
     * }
     */
    public static MemorySegment gas_req(MemorySegment struct) {
        return struct.asSlice(gas_req$OFFSET, gas_req$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request gas_req
     * }
     */
    public static void gas_req(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gas_req$OFFSET, gas_req$LAYOUT.byteSize());
    }

    private static final GroupLayout gas_res$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gas_res"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response gas_res
     * }
     */
    public static final GroupLayout gas_res$layout() {
        return gas_res$LAYOUT;
    }

    private static final long gas_res$OFFSET = 1008;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response gas_res
     * }
     */
    public static final long gas_res$offset() {
        return gas_res$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response gas_res
     * }
     */
    public static MemorySegment gas_res(MemorySegment struct) {
        return struct.asSlice(gas_res$OFFSET, gas_res$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response gas_res
     * }
     */
    public static void gas_res(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gas_res$OFFSET, gas_res$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

