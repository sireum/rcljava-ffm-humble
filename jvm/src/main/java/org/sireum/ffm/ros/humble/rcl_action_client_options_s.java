// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_action_client_options_s {
 *     rmw_qos_profile_t goal_service_qos;
 *     rmw_qos_profile_t result_service_qos;
 *     rmw_qos_profile_t cancel_service_qos;
 *     rmw_qos_profile_t feedback_topic_qos;
 *     rmw_qos_profile_t status_topic_qos;
 *     rcl_allocator_t allocator;
 * }
 * }
 */
public class rcl_action_client_options_s {

    rcl_action_client_options_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rmw_qos_profile_s.layout().withName("goal_service_qos"),
        rmw_qos_profile_s.layout().withName("result_service_qos"),
        rmw_qos_profile_s.layout().withName("cancel_service_qos"),
        rmw_qos_profile_s.layout().withName("feedback_topic_qos"),
        rmw_qos_profile_s.layout().withName("status_topic_qos"),
        rcutils_allocator_s.layout().withName("allocator")
    ).withName("rcl_action_client_options_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout goal_service_qos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("goal_service_qos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t goal_service_qos
     * }
     */
    public static final GroupLayout goal_service_qos$layout() {
        return goal_service_qos$LAYOUT;
    }

    private static final long goal_service_qos$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t goal_service_qos
     * }
     */
    public static final long goal_service_qos$offset() {
        return goal_service_qos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t goal_service_qos
     * }
     */
    public static MemorySegment goal_service_qos(MemorySegment struct) {
        return struct.asSlice(goal_service_qos$OFFSET, goal_service_qos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t goal_service_qos
     * }
     */
    public static void goal_service_qos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, goal_service_qos$OFFSET, goal_service_qos$LAYOUT.byteSize());
    }

    private static final GroupLayout result_service_qos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("result_service_qos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t result_service_qos
     * }
     */
    public static final GroupLayout result_service_qos$layout() {
        return result_service_qos$LAYOUT;
    }

    private static final long result_service_qos$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t result_service_qos
     * }
     */
    public static final long result_service_qos$offset() {
        return result_service_qos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t result_service_qos
     * }
     */
    public static MemorySegment result_service_qos(MemorySegment struct) {
        return struct.asSlice(result_service_qos$OFFSET, result_service_qos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t result_service_qos
     * }
     */
    public static void result_service_qos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, result_service_qos$OFFSET, result_service_qos$LAYOUT.byteSize());
    }

    private static final GroupLayout cancel_service_qos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cancel_service_qos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t cancel_service_qos
     * }
     */
    public static final GroupLayout cancel_service_qos$layout() {
        return cancel_service_qos$LAYOUT;
    }

    private static final long cancel_service_qos$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t cancel_service_qos
     * }
     */
    public static final long cancel_service_qos$offset() {
        return cancel_service_qos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t cancel_service_qos
     * }
     */
    public static MemorySegment cancel_service_qos(MemorySegment struct) {
        return struct.asSlice(cancel_service_qos$OFFSET, cancel_service_qos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t cancel_service_qos
     * }
     */
    public static void cancel_service_qos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cancel_service_qos$OFFSET, cancel_service_qos$LAYOUT.byteSize());
    }

    private static final GroupLayout feedback_topic_qos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("feedback_topic_qos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t feedback_topic_qos
     * }
     */
    public static final GroupLayout feedback_topic_qos$layout() {
        return feedback_topic_qos$LAYOUT;
    }

    private static final long feedback_topic_qos$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t feedback_topic_qos
     * }
     */
    public static final long feedback_topic_qos$offset() {
        return feedback_topic_qos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t feedback_topic_qos
     * }
     */
    public static MemorySegment feedback_topic_qos(MemorySegment struct) {
        return struct.asSlice(feedback_topic_qos$OFFSET, feedback_topic_qos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t feedback_topic_qos
     * }
     */
    public static void feedback_topic_qos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, feedback_topic_qos$OFFSET, feedback_topic_qos$LAYOUT.byteSize());
    }

    private static final GroupLayout status_topic_qos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("status_topic_qos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t status_topic_qos
     * }
     */
    public static final GroupLayout status_topic_qos$layout() {
        return status_topic_qos$LAYOUT;
    }

    private static final long status_topic_qos$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t status_topic_qos
     * }
     */
    public static final long status_topic_qos$offset() {
        return status_topic_qos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t status_topic_qos
     * }
     */
    public static MemorySegment status_topic_qos(MemorySegment struct) {
        return struct.asSlice(status_topic_qos$OFFSET, status_topic_qos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t status_topic_qos
     * }
     */
    public static void status_topic_qos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, status_topic_qos$OFFSET, status_topic_qos$LAYOUT.byteSize());
    }

    private static final GroupLayout allocator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final GroupLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.asSlice(allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

