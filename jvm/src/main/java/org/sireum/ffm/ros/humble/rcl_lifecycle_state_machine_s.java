// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_lifecycle_state_machine_s {
 *     const rcl_lifecycle_state_t *current_state;
 *     rcl_lifecycle_transition_map_t transition_map;
 *     rcl_lifecycle_com_interface_t com_interface;
 *     rcl_lifecycle_state_machine_options_t options;
 * }
 * }
 */
public class rcl_lifecycle_state_machine_s {

    rcl_lifecycle_state_machine_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("current_state"),
        rcl_lifecycle_transition_map_s.layout().withName("transition_map"),
        rcl_lifecycle_com_interface_s.layout().withName("com_interface"),
        rcl_lifecycle_state_machine_options_s.layout().withName("options")
    ).withName("rcl_lifecycle_state_machine_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout current_state$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("current_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rcl_lifecycle_state_t *current_state
     * }
     */
    public static final AddressLayout current_state$layout() {
        return current_state$LAYOUT;
    }

    private static final long current_state$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rcl_lifecycle_state_t *current_state
     * }
     */
    public static final long current_state$offset() {
        return current_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rcl_lifecycle_state_t *current_state
     * }
     */
    public static MemorySegment current_state(MemorySegment struct) {
        return struct.get(current_state$LAYOUT, current_state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rcl_lifecycle_state_t *current_state
     * }
     */
    public static void current_state(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(current_state$LAYOUT, current_state$OFFSET, fieldValue);
    }

    private static final GroupLayout transition_map$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("transition_map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_map_t transition_map
     * }
     */
    public static final GroupLayout transition_map$layout() {
        return transition_map$LAYOUT;
    }

    private static final long transition_map$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_map_t transition_map
     * }
     */
    public static final long transition_map$offset() {
        return transition_map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_map_t transition_map
     * }
     */
    public static MemorySegment transition_map(MemorySegment struct) {
        return struct.asSlice(transition_map$OFFSET, transition_map$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_map_t transition_map
     * }
     */
    public static void transition_map(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, transition_map$OFFSET, transition_map$LAYOUT.byteSize());
    }

    private static final GroupLayout com_interface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("com_interface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_com_interface_t com_interface
     * }
     */
    public static final GroupLayout com_interface$layout() {
        return com_interface$LAYOUT;
    }

    private static final long com_interface$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_com_interface_t com_interface
     * }
     */
    public static final long com_interface$offset() {
        return com_interface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_com_interface_t com_interface
     * }
     */
    public static MemorySegment com_interface(MemorySegment struct) {
        return struct.asSlice(com_interface$OFFSET, com_interface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_com_interface_t com_interface
     * }
     */
    public static void com_interface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, com_interface$OFFSET, com_interface$LAYOUT.byteSize());
    }

    private static final GroupLayout options$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_options_t options
     * }
     */
    public static final GroupLayout options$layout() {
        return options$LAYOUT;
    }

    private static final long options$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_options_t options
     * }
     */
    public static final long options$offset() {
        return options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_options_t options
     * }
     */
    public static MemorySegment options(MemorySegment struct) {
        return struct.asSlice(options$OFFSET, options$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_options_t options
     * }
     */
    public static void options(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, options$OFFSET, options$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

