// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     rclc_executor_handle_type_t type;
 *     rclc_executor_handle_invocation_t invocation;
 *     union {
 *         rcl_subscription_t *subscription;
 *         rcl_timer_t *timer;
 *         rcl_client_t *client;
 *         rcl_service_t *service;
 *         rcl_guard_condition_t *gc;
 *         rclc_action_client_t *action_client;
 *         rclc_action_server_t *action_server;
 *     };
 *     void *data;
 *     rmw_request_id_t req_id;
 *     void *data_response_msg;
 *     void *callback_context;
 *     union {
 *         rclc_subscription_callback_t subscription_callback;
 *         rclc_subscription_callback_with_context_t subscription_callback_with_context;
 *         rclc_service_callback_t service_callback;
 *         rclc_service_callback_with_request_id_t service_callback_with_reqid;
 *         rclc_service_callback_with_context_t service_callback_with_context;
 *         rclc_client_callback_t client_callback;
 *         rclc_client_callback_with_request_id_t client_callback_with_reqid;
 *         rclc_gc_callback_t gc_callback;
 *     };
 *     size_t index;
 *     bool initialized;
 *     bool data_available;
 * }
 * }
 */
public class rclc_executor_handle_t {

    rclc_executor_handle_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_INT.withName("type"),
        gen_h.C_INT.withName("invocation"),
        MemoryLayout.unionLayout(
            gen_h.C_POINTER.withName("subscription"),
            gen_h.C_POINTER.withName("timer"),
            gen_h.C_POINTER.withName("client"),
            gen_h.C_POINTER.withName("service"),
            gen_h.C_POINTER.withName("gc"),
            gen_h.C_POINTER.withName("action_client"),
            gen_h.C_POINTER.withName("action_server")
        ).withName("$anon$112:3"),
        gen_h.C_POINTER.withName("data"),
        rmw_request_id_s.layout().withName("req_id"),
        gen_h.C_POINTER.withName("data_response_msg"),
        gen_h.C_POINTER.withName("callback_context"),
        MemoryLayout.unionLayout(
            gen_h.C_POINTER.withName("subscription_callback"),
            gen_h.C_POINTER.withName("subscription_callback_with_context"),
            gen_h.C_POINTER.withName("service_callback"),
            gen_h.C_POINTER.withName("service_callback_with_reqid"),
            gen_h.C_POINTER.withName("service_callback_with_context"),
            gen_h.C_POINTER.withName("client_callback"),
            gen_h.C_POINTER.withName("client_callback_with_reqid"),
            gen_h.C_POINTER.withName("gc_callback")
        ).withName("$anon$145:3"),
        gen_h.C_LONG.withName("index"),
        gen_h.C_BOOL.withName("initialized"),
        gen_h.C_BOOL.withName("data_available"),
        MemoryLayout.paddingLayout(6)
    ).withName("$anon$105:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_executor_handle_type_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_executor_handle_type_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_executor_handle_type_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_executor_handle_type_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt invocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("invocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_executor_handle_invocation_t invocation
     * }
     */
    public static final OfInt invocation$layout() {
        return invocation$LAYOUT;
    }

    private static final long invocation$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_executor_handle_invocation_t invocation
     * }
     */
    public static final long invocation$offset() {
        return invocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_executor_handle_invocation_t invocation
     * }
     */
    public static int invocation(MemorySegment struct) {
        return struct.get(invocation$LAYOUT, invocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_executor_handle_invocation_t invocation
     * }
     */
    public static void invocation(MemorySegment struct, int fieldValue) {
        struct.set(invocation$LAYOUT, invocation$OFFSET, fieldValue);
    }

    private static final AddressLayout subscription$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$112:3"), groupElement("subscription"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_subscription_t *subscription
     * }
     */
    public static final AddressLayout subscription$layout() {
        return subscription$LAYOUT;
    }

    private static final long subscription$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_subscription_t *subscription
     * }
     */
    public static final long subscription$offset() {
        return subscription$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_subscription_t *subscription
     * }
     */
    public static MemorySegment subscription(MemorySegment struct) {
        return struct.get(subscription$LAYOUT, subscription$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_subscription_t *subscription
     * }
     */
    public static void subscription(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(subscription$LAYOUT, subscription$OFFSET, fieldValue);
    }

    private static final AddressLayout timer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$112:3"), groupElement("timer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_timer_t *timer
     * }
     */
    public static final AddressLayout timer$layout() {
        return timer$LAYOUT;
    }

    private static final long timer$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_timer_t *timer
     * }
     */
    public static final long timer$offset() {
        return timer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_timer_t *timer
     * }
     */
    public static MemorySegment timer(MemorySegment struct) {
        return struct.get(timer$LAYOUT, timer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_timer_t *timer
     * }
     */
    public static void timer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(timer$LAYOUT, timer$OFFSET, fieldValue);
    }

    private static final AddressLayout client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$112:3"), groupElement("client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_client_t *client
     * }
     */
    public static final AddressLayout client$layout() {
        return client$LAYOUT;
    }

    private static final long client$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_client_t *client
     * }
     */
    public static final long client$offset() {
        return client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_client_t *client
     * }
     */
    public static MemorySegment client(MemorySegment struct) {
        return struct.get(client$LAYOUT, client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_client_t *client
     * }
     */
    public static void client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client$LAYOUT, client$OFFSET, fieldValue);
    }

    private static final AddressLayout service$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$112:3"), groupElement("service"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t *service
     * }
     */
    public static final AddressLayout service$layout() {
        return service$LAYOUT;
    }

    private static final long service$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t *service
     * }
     */
    public static final long service$offset() {
        return service$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t *service
     * }
     */
    public static MemorySegment service(MemorySegment struct) {
        return struct.get(service$LAYOUT, service$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t *service
     * }
     */
    public static void service(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(service$LAYOUT, service$OFFSET, fieldValue);
    }

    private static final AddressLayout gc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$112:3"), groupElement("gc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_guard_condition_t *gc
     * }
     */
    public static final AddressLayout gc$layout() {
        return gc$LAYOUT;
    }

    private static final long gc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_guard_condition_t *gc
     * }
     */
    public static final long gc$offset() {
        return gc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_guard_condition_t *gc
     * }
     */
    public static MemorySegment gc(MemorySegment struct) {
        return struct.get(gc$LAYOUT, gc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_guard_condition_t *gc
     * }
     */
    public static void gc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gc$LAYOUT, gc$OFFSET, fieldValue);
    }

    private static final AddressLayout action_client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$112:3"), groupElement("action_client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_action_client_t *action_client
     * }
     */
    public static final AddressLayout action_client$layout() {
        return action_client$LAYOUT;
    }

    private static final long action_client$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_action_client_t *action_client
     * }
     */
    public static final long action_client$offset() {
        return action_client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_action_client_t *action_client
     * }
     */
    public static MemorySegment action_client(MemorySegment struct) {
        return struct.get(action_client$LAYOUT, action_client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_action_client_t *action_client
     * }
     */
    public static void action_client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(action_client$LAYOUT, action_client$OFFSET, fieldValue);
    }

    private static final AddressLayout action_server$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$112:3"), groupElement("action_server"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_action_server_t *action_server
     * }
     */
    public static final AddressLayout action_server$layout() {
        return action_server$LAYOUT;
    }

    private static final long action_server$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_action_server_t *action_server
     * }
     */
    public static final long action_server$offset() {
        return action_server$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_action_server_t *action_server
     * }
     */
    public static MemorySegment action_server(MemorySegment struct) {
        return struct.get(action_server$LAYOUT, action_server$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_action_server_t *action_server
     * }
     */
    public static void action_server(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(action_server$LAYOUT, action_server$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final GroupLayout req_id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("req_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_request_id_t req_id
     * }
     */
    public static final GroupLayout req_id$layout() {
        return req_id$LAYOUT;
    }

    private static final long req_id$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_request_id_t req_id
     * }
     */
    public static final long req_id$offset() {
        return req_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_request_id_t req_id
     * }
     */
    public static MemorySegment req_id(MemorySegment struct) {
        return struct.asSlice(req_id$OFFSET, req_id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_request_id_t req_id
     * }
     */
    public static void req_id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, req_id$OFFSET, req_id$LAYOUT.byteSize());
    }

    private static final AddressLayout data_response_msg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data_response_msg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data_response_msg
     * }
     */
    public static final AddressLayout data_response_msg$layout() {
        return data_response_msg$LAYOUT;
    }

    private static final long data_response_msg$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data_response_msg
     * }
     */
    public static final long data_response_msg$offset() {
        return data_response_msg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data_response_msg
     * }
     */
    public static MemorySegment data_response_msg(MemorySegment struct) {
        return struct.get(data_response_msg$LAYOUT, data_response_msg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data_response_msg
     * }
     */
    public static void data_response_msg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data_response_msg$LAYOUT, data_response_msg$OFFSET, fieldValue);
    }

    private static final AddressLayout callback_context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback_context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *callback_context
     * }
     */
    public static final AddressLayout callback_context$layout() {
        return callback_context$LAYOUT;
    }

    private static final long callback_context$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *callback_context
     * }
     */
    public static final long callback_context$offset() {
        return callback_context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *callback_context
     * }
     */
    public static MemorySegment callback_context(MemorySegment struct) {
        return struct.get(callback_context$LAYOUT, callback_context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *callback_context
     * }
     */
    public static void callback_context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback_context$LAYOUT, callback_context$OFFSET, fieldValue);
    }

    private static final AddressLayout subscription_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("subscription_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_t subscription_callback
     * }
     */
    public static final AddressLayout subscription_callback$layout() {
        return subscription_callback$LAYOUT;
    }

    private static final long subscription_callback$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_t subscription_callback
     * }
     */
    public static final long subscription_callback$offset() {
        return subscription_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_t subscription_callback
     * }
     */
    public static MemorySegment subscription_callback(MemorySegment struct) {
        return struct.get(subscription_callback$LAYOUT, subscription_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_t subscription_callback
     * }
     */
    public static void subscription_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(subscription_callback$LAYOUT, subscription_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout subscription_callback_with_context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("subscription_callback_with_context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_with_context_t subscription_callback_with_context
     * }
     */
    public static final AddressLayout subscription_callback_with_context$layout() {
        return subscription_callback_with_context$LAYOUT;
    }

    private static final long subscription_callback_with_context$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_with_context_t subscription_callback_with_context
     * }
     */
    public static final long subscription_callback_with_context$offset() {
        return subscription_callback_with_context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_with_context_t subscription_callback_with_context
     * }
     */
    public static MemorySegment subscription_callback_with_context(MemorySegment struct) {
        return struct.get(subscription_callback_with_context$LAYOUT, subscription_callback_with_context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_subscription_callback_with_context_t subscription_callback_with_context
     * }
     */
    public static void subscription_callback_with_context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(subscription_callback_with_context$LAYOUT, subscription_callback_with_context$OFFSET, fieldValue);
    }

    private static final AddressLayout service_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("service_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_service_callback_t service_callback
     * }
     */
    public static final AddressLayout service_callback$layout() {
        return service_callback$LAYOUT;
    }

    private static final long service_callback$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_service_callback_t service_callback
     * }
     */
    public static final long service_callback$offset() {
        return service_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_service_callback_t service_callback
     * }
     */
    public static MemorySegment service_callback(MemorySegment struct) {
        return struct.get(service_callback$LAYOUT, service_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_service_callback_t service_callback
     * }
     */
    public static void service_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(service_callback$LAYOUT, service_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout service_callback_with_reqid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("service_callback_with_reqid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_request_id_t service_callback_with_reqid
     * }
     */
    public static final AddressLayout service_callback_with_reqid$layout() {
        return service_callback_with_reqid$LAYOUT;
    }

    private static final long service_callback_with_reqid$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_request_id_t service_callback_with_reqid
     * }
     */
    public static final long service_callback_with_reqid$offset() {
        return service_callback_with_reqid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_request_id_t service_callback_with_reqid
     * }
     */
    public static MemorySegment service_callback_with_reqid(MemorySegment struct) {
        return struct.get(service_callback_with_reqid$LAYOUT, service_callback_with_reqid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_request_id_t service_callback_with_reqid
     * }
     */
    public static void service_callback_with_reqid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(service_callback_with_reqid$LAYOUT, service_callback_with_reqid$OFFSET, fieldValue);
    }

    private static final AddressLayout service_callback_with_context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("service_callback_with_context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_context_t service_callback_with_context
     * }
     */
    public static final AddressLayout service_callback_with_context$layout() {
        return service_callback_with_context$LAYOUT;
    }

    private static final long service_callback_with_context$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_context_t service_callback_with_context
     * }
     */
    public static final long service_callback_with_context$offset() {
        return service_callback_with_context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_context_t service_callback_with_context
     * }
     */
    public static MemorySegment service_callback_with_context(MemorySegment struct) {
        return struct.get(service_callback_with_context$LAYOUT, service_callback_with_context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_service_callback_with_context_t service_callback_with_context
     * }
     */
    public static void service_callback_with_context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(service_callback_with_context$LAYOUT, service_callback_with_context$OFFSET, fieldValue);
    }

    private static final AddressLayout client_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("client_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_client_callback_t client_callback
     * }
     */
    public static final AddressLayout client_callback$layout() {
        return client_callback$LAYOUT;
    }

    private static final long client_callback$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_client_callback_t client_callback
     * }
     */
    public static final long client_callback$offset() {
        return client_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_client_callback_t client_callback
     * }
     */
    public static MemorySegment client_callback(MemorySegment struct) {
        return struct.get(client_callback$LAYOUT, client_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_client_callback_t client_callback
     * }
     */
    public static void client_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client_callback$LAYOUT, client_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout client_callback_with_reqid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("client_callback_with_reqid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_client_callback_with_request_id_t client_callback_with_reqid
     * }
     */
    public static final AddressLayout client_callback_with_reqid$layout() {
        return client_callback_with_reqid$LAYOUT;
    }

    private static final long client_callback_with_reqid$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_client_callback_with_request_id_t client_callback_with_reqid
     * }
     */
    public static final long client_callback_with_reqid$offset() {
        return client_callback_with_reqid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_client_callback_with_request_id_t client_callback_with_reqid
     * }
     */
    public static MemorySegment client_callback_with_reqid(MemorySegment struct) {
        return struct.get(client_callback_with_reqid$LAYOUT, client_callback_with_reqid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_client_callback_with_request_id_t client_callback_with_reqid
     * }
     */
    public static void client_callback_with_reqid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client_callback_with_reqid$LAYOUT, client_callback_with_reqid$OFFSET, fieldValue);
    }

    private static final AddressLayout gc_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$145:3"), groupElement("gc_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_gc_callback_t gc_callback
     * }
     */
    public static final AddressLayout gc_callback$layout() {
        return gc_callback$LAYOUT;
    }

    private static final long gc_callback$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_gc_callback_t gc_callback
     * }
     */
    public static final long gc_callback$offset() {
        return gc_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_gc_callback_t gc_callback
     * }
     */
    public static MemorySegment gc_callback(MemorySegment struct) {
        return struct.get(gc_callback$LAYOUT, gc_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_gc_callback_t gc_callback
     * }
     */
    public static void gc_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gc_callback$LAYOUT, gc_callback$OFFSET, fieldValue);
    }

    private static final OfLong index$LAYOUT = (OfLong)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static final OfLong index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static long index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static void index(MemorySegment struct, long fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfBoolean initialized$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("initialized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool initialized
     * }
     */
    public static final OfBoolean initialized$layout() {
        return initialized$LAYOUT;
    }

    private static final long initialized$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool initialized
     * }
     */
    public static final long initialized$offset() {
        return initialized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool initialized
     * }
     */
    public static boolean initialized(MemorySegment struct) {
        return struct.get(initialized$LAYOUT, initialized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool initialized
     * }
     */
    public static void initialized(MemorySegment struct, boolean fieldValue) {
        struct.set(initialized$LAYOUT, initialized$OFFSET, fieldValue);
    }

    private static final OfBoolean data_available$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("data_available"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool data_available
     * }
     */
    public static final OfBoolean data_available$layout() {
        return data_available$LAYOUT;
    }

    private static final long data_available$OFFSET = 81;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool data_available
     * }
     */
    public static final long data_available$offset() {
        return data_available$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool data_available
     * }
     */
    public static boolean data_available(MemorySegment struct) {
        return struct.get(data_available$LAYOUT, data_available$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool data_available
     * }
     */
    public static void data_available(MemorySegment struct, boolean fieldValue) {
        struct.set(data_available$LAYOUT, data_available$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

