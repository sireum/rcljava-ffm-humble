// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcutils_allocator_s {
 *     void *(*allocate)(size_t, void *);
 *     void (*deallocate)(void *, void *);
 *     void *(*reallocate)(void *, size_t, void *);
 *     void *(*zero_allocate)(size_t, size_t, void *);
 *     void *state;
 * }
 * }
 */
public class rcutils_allocator_s {

    rcutils_allocator_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("allocate"),
        gen_h.C_POINTER.withName("deallocate"),
        gen_h.C_POINTER.withName("reallocate"),
        gen_h.C_POINTER.withName("zero_allocate"),
        gen_h.C_POINTER.withName("state")
    ).withName("rcutils_allocator_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void *(*allocate)(size_t, void *)
     * }
     */
    public class allocate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(long _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = gen_h.upcallHandle(allocate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(allocate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,long _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout allocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("allocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*allocate)(size_t, void *)
     * }
     */
    public static final AddressLayout allocate$layout() {
        return allocate$LAYOUT;
    }

    private static final long allocate$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*allocate)(size_t, void *)
     * }
     */
    public static final long allocate$offset() {
        return allocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*allocate)(size_t, void *)
     * }
     */
    public static MemorySegment allocate(MemorySegment struct) {
        return struct.get(allocate$LAYOUT, allocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*allocate)(size_t, void *)
     * }
     */
    public static void allocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(allocate$LAYOUT, allocate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*deallocate)(void *, void *)
     * }
     */
    public class deallocate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = gen_h.upcallHandle(deallocate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(deallocate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout deallocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("deallocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*deallocate)(void *, void *)
     * }
     */
    public static final AddressLayout deallocate$layout() {
        return deallocate$LAYOUT;
    }

    private static final long deallocate$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*deallocate)(void *, void *)
     * }
     */
    public static final long deallocate$offset() {
        return deallocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*deallocate)(void *, void *)
     * }
     */
    public static MemorySegment deallocate(MemorySegment struct) {
        return struct.get(deallocate$LAYOUT, deallocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*deallocate)(void *, void *)
     * }
     */
    public static void deallocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(deallocate$LAYOUT, deallocate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*reallocate)(void *, size_t, void *)
     * }
     */
    public class reallocate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = gen_h.upcallHandle(reallocate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(reallocate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout reallocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reallocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*reallocate)(void *, size_t, void *)
     * }
     */
    public static final AddressLayout reallocate$layout() {
        return reallocate$LAYOUT;
    }

    private static final long reallocate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*reallocate)(void *, size_t, void *)
     * }
     */
    public static final long reallocate$offset() {
        return reallocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*reallocate)(void *, size_t, void *)
     * }
     */
    public static MemorySegment reallocate(MemorySegment struct) {
        return struct.get(reallocate$LAYOUT, reallocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*reallocate)(void *, size_t, void *)
     * }
     */
    public static void reallocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reallocate$LAYOUT, reallocate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*zero_allocate)(size_t, size_t, void *)
     * }
     */
    public class zero_allocate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(long _x0, long _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = gen_h.upcallHandle(zero_allocate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(zero_allocate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,long _x0, long _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout zero_allocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("zero_allocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*zero_allocate)(size_t, size_t, void *)
     * }
     */
    public static final AddressLayout zero_allocate$layout() {
        return zero_allocate$LAYOUT;
    }

    private static final long zero_allocate$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*zero_allocate)(size_t, size_t, void *)
     * }
     */
    public static final long zero_allocate$offset() {
        return zero_allocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*zero_allocate)(size_t, size_t, void *)
     * }
     */
    public static MemorySegment zero_allocate(MemorySegment struct) {
        return struct.get(zero_allocate$LAYOUT, zero_allocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*zero_allocate)(size_t, size_t, void *)
     * }
     */
    public static void zero_allocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(zero_allocate$LAYOUT, zero_allocate$OFFSET, fieldValue);
    }

    private static final AddressLayout state$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *state
     * }
     */
    public static final AddressLayout state$layout() {
        return state$LAYOUT;
    }

    private static final long state$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *state
     * }
     */
    public static final long state$offset() {
        return state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *state
     * }
     */
    public static MemorySegment state(MemorySegment struct) {
        return struct.get(state$LAYOUT, state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *state
     * }
     */
    public static void state(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(state$LAYOUT, state$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

