// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_interfaces__msg__ParameterDescriptor {
 *     rosidl_runtime_c__String name;
 *     uint8_t type;
 *     rosidl_runtime_c__String description;
 *     rosidl_runtime_c__String additional_constraints;
 *     bool read_only;
 *     bool dynamic_typing;
 *     rcl_interfaces__msg__FloatingPointRange__Sequence floating_point_range;
 *     rcl_interfaces__msg__IntegerRange__Sequence integer_range;
 * }
 * }
 */
public class rcl_interfaces__msg__ParameterDescriptor {

    rcl_interfaces__msg__ParameterDescriptor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rosidl_runtime_c__String.layout().withName("name"),
        gen_h.C_CHAR.withName("type"),
        MemoryLayout.paddingLayout(7),
        rosidl_runtime_c__String.layout().withName("description"),
        rosidl_runtime_c__String.layout().withName("additional_constraints"),
        gen_h.C_BOOL.withName("read_only"),
        gen_h.C_BOOL.withName("dynamic_typing"),
        MemoryLayout.paddingLayout(6),
        rcl_interfaces__msg__FloatingPointRange__Sequence.layout().withName("floating_point_range"),
        rcl_interfaces__msg__IntegerRange__Sequence.layout().withName("integer_range")
    ).withName("rcl_interfaces__msg__ParameterDescriptor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout name$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String name
     * }
     */
    public static final GroupLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static final OfByte type$LAYOUT = (OfByte)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static final OfByte type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static byte type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static void type(MemorySegment struct, byte fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final GroupLayout description$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String description
     * }
     */
    public static final GroupLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.asSlice(description$OFFSET, description$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, description$OFFSET, description$LAYOUT.byteSize());
    }

    private static final GroupLayout additional_constraints$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("additional_constraints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String additional_constraints
     * }
     */
    public static final GroupLayout additional_constraints$layout() {
        return additional_constraints$LAYOUT;
    }

    private static final long additional_constraints$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String additional_constraints
     * }
     */
    public static final long additional_constraints$offset() {
        return additional_constraints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String additional_constraints
     * }
     */
    public static MemorySegment additional_constraints(MemorySegment struct) {
        return struct.asSlice(additional_constraints$OFFSET, additional_constraints$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String additional_constraints
     * }
     */
    public static void additional_constraints(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, additional_constraints$OFFSET, additional_constraints$LAYOUT.byteSize());
    }

    private static final OfBoolean read_only$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("read_only"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool read_only
     * }
     */
    public static final OfBoolean read_only$layout() {
        return read_only$LAYOUT;
    }

    private static final long read_only$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool read_only
     * }
     */
    public static final long read_only$offset() {
        return read_only$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool read_only
     * }
     */
    public static boolean read_only(MemorySegment struct) {
        return struct.get(read_only$LAYOUT, read_only$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool read_only
     * }
     */
    public static void read_only(MemorySegment struct, boolean fieldValue) {
        struct.set(read_only$LAYOUT, read_only$OFFSET, fieldValue);
    }

    private static final OfBoolean dynamic_typing$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("dynamic_typing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool dynamic_typing
     * }
     */
    public static final OfBoolean dynamic_typing$layout() {
        return dynamic_typing$LAYOUT;
    }

    private static final long dynamic_typing$OFFSET = 81;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool dynamic_typing
     * }
     */
    public static final long dynamic_typing$offset() {
        return dynamic_typing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool dynamic_typing
     * }
     */
    public static boolean dynamic_typing(MemorySegment struct) {
        return struct.get(dynamic_typing$LAYOUT, dynamic_typing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool dynamic_typing
     * }
     */
    public static void dynamic_typing(MemorySegment struct, boolean fieldValue) {
        struct.set(dynamic_typing$LAYOUT, dynamic_typing$OFFSET, fieldValue);
    }

    private static final GroupLayout floating_point_range$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("floating_point_range"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__FloatingPointRange__Sequence floating_point_range
     * }
     */
    public static final GroupLayout floating_point_range$layout() {
        return floating_point_range$LAYOUT;
    }

    private static final long floating_point_range$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__FloatingPointRange__Sequence floating_point_range
     * }
     */
    public static final long floating_point_range$offset() {
        return floating_point_range$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__FloatingPointRange__Sequence floating_point_range
     * }
     */
    public static MemorySegment floating_point_range(MemorySegment struct) {
        return struct.asSlice(floating_point_range$OFFSET, floating_point_range$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__FloatingPointRange__Sequence floating_point_range
     * }
     */
    public static void floating_point_range(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, floating_point_range$OFFSET, floating_point_range$LAYOUT.byteSize());
    }

    private static final GroupLayout integer_range$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("integer_range"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__IntegerRange__Sequence integer_range
     * }
     */
    public static final GroupLayout integer_range$layout() {
        return integer_range$LAYOUT;
    }

    private static final long integer_range$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__IntegerRange__Sequence integer_range
     * }
     */
    public static final long integer_range$offset() {
        return integer_range$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__IntegerRange__Sequence integer_range
     * }
     */
    public static MemorySegment integer_range(MemorySegment struct) {
        return struct.asSlice(integer_range$OFFSET, integer_range$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__IntegerRange__Sequence integer_range
     * }
     */
    public static void integer_range(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, integer_range$OFFSET, integer_range$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

