// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rosidl_action_type_support_t {
 *     const rosidl_service_type_support_t *goal_service_type_support;
 *     const rosidl_service_type_support_t *result_service_type_support;
 *     const rosidl_service_type_support_t *cancel_service_type_support;
 *     const rosidl_message_type_support_t *feedback_message_type_support;
 *     const rosidl_message_type_support_t *status_message_type_support;
 * }
 * }
 */
public class rosidl_action_type_support_t {

    rosidl_action_type_support_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("goal_service_type_support"),
        gen_h.C_POINTER.withName("result_service_type_support"),
        gen_h.C_POINTER.withName("cancel_service_type_support"),
        gen_h.C_POINTER.withName("feedback_message_type_support"),
        gen_h.C_POINTER.withName("status_message_type_support")
    ).withName("rosidl_action_type_support_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout goal_service_type_support$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("goal_service_type_support"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *goal_service_type_support
     * }
     */
    public static final AddressLayout goal_service_type_support$layout() {
        return goal_service_type_support$LAYOUT;
    }

    private static final long goal_service_type_support$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *goal_service_type_support
     * }
     */
    public static final long goal_service_type_support$offset() {
        return goal_service_type_support$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *goal_service_type_support
     * }
     */
    public static MemorySegment goal_service_type_support(MemorySegment struct) {
        return struct.get(goal_service_type_support$LAYOUT, goal_service_type_support$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *goal_service_type_support
     * }
     */
    public static void goal_service_type_support(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(goal_service_type_support$LAYOUT, goal_service_type_support$OFFSET, fieldValue);
    }

    private static final AddressLayout result_service_type_support$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("result_service_type_support"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *result_service_type_support
     * }
     */
    public static final AddressLayout result_service_type_support$layout() {
        return result_service_type_support$LAYOUT;
    }

    private static final long result_service_type_support$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *result_service_type_support
     * }
     */
    public static final long result_service_type_support$offset() {
        return result_service_type_support$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *result_service_type_support
     * }
     */
    public static MemorySegment result_service_type_support(MemorySegment struct) {
        return struct.get(result_service_type_support$LAYOUT, result_service_type_support$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *result_service_type_support
     * }
     */
    public static void result_service_type_support(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(result_service_type_support$LAYOUT, result_service_type_support$OFFSET, fieldValue);
    }

    private static final AddressLayout cancel_service_type_support$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cancel_service_type_support"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *cancel_service_type_support
     * }
     */
    public static final AddressLayout cancel_service_type_support$layout() {
        return cancel_service_type_support$LAYOUT;
    }

    private static final long cancel_service_type_support$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *cancel_service_type_support
     * }
     */
    public static final long cancel_service_type_support$offset() {
        return cancel_service_type_support$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *cancel_service_type_support
     * }
     */
    public static MemorySegment cancel_service_type_support(MemorySegment struct) {
        return struct.get(cancel_service_type_support$LAYOUT, cancel_service_type_support$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *cancel_service_type_support
     * }
     */
    public static void cancel_service_type_support(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cancel_service_type_support$LAYOUT, cancel_service_type_support$OFFSET, fieldValue);
    }

    private static final AddressLayout feedback_message_type_support$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("feedback_message_type_support"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *feedback_message_type_support
     * }
     */
    public static final AddressLayout feedback_message_type_support$layout() {
        return feedback_message_type_support$LAYOUT;
    }

    private static final long feedback_message_type_support$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *feedback_message_type_support
     * }
     */
    public static final long feedback_message_type_support$offset() {
        return feedback_message_type_support$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *feedback_message_type_support
     * }
     */
    public static MemorySegment feedback_message_type_support(MemorySegment struct) {
        return struct.get(feedback_message_type_support$LAYOUT, feedback_message_type_support$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *feedback_message_type_support
     * }
     */
    public static void feedback_message_type_support(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(feedback_message_type_support$LAYOUT, feedback_message_type_support$OFFSET, fieldValue);
    }

    private static final AddressLayout status_message_type_support$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("status_message_type_support"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *status_message_type_support
     * }
     */
    public static final AddressLayout status_message_type_support$layout() {
        return status_message_type_support$LAYOUT;
    }

    private static final long status_message_type_support$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *status_message_type_support
     * }
     */
    public static final long status_message_type_support$offset() {
        return status_message_type_support$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *status_message_type_support
     * }
     */
    public static MemorySegment status_message_type_support(MemorySegment struct) {
        return struct.get(status_message_type_support$LAYOUT, status_message_type_support$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *status_message_type_support
     * }
     */
    public static void status_message_type_support(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(status_message_type_support$LAYOUT, status_message_type_support$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

