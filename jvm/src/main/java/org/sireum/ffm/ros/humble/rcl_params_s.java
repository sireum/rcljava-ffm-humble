// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_params_s {
 *     char **node_names;
 *     rcl_node_params_t *params;
 *     size_t num_nodes;
 *     size_t capacity_nodes;
 *     rcutils_allocator_t allocator;
 * }
 * }
 */
public class rcl_params_s {

    rcl_params_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("node_names"),
        gen_h.C_POINTER.withName("params"),
        gen_h.C_LONG.withName("num_nodes"),
        gen_h.C_LONG.withName("capacity_nodes"),
        rcutils_allocator_s.layout().withName("allocator")
    ).withName("rcl_params_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout node_names$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("node_names"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char **node_names
     * }
     */
    public static final AddressLayout node_names$layout() {
        return node_names$LAYOUT;
    }

    private static final long node_names$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char **node_names
     * }
     */
    public static final long node_names$offset() {
        return node_names$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char **node_names
     * }
     */
    public static MemorySegment node_names(MemorySegment struct) {
        return struct.get(node_names$LAYOUT, node_names$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char **node_names
     * }
     */
    public static void node_names(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(node_names$LAYOUT, node_names$OFFSET, fieldValue);
    }

    private static final AddressLayout params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_node_params_t *params
     * }
     */
    public static final AddressLayout params$layout() {
        return params$LAYOUT;
    }

    private static final long params$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_node_params_t *params
     * }
     */
    public static final long params$offset() {
        return params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_node_params_t *params
     * }
     */
    public static MemorySegment params(MemorySegment struct) {
        return struct.get(params$LAYOUT, params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_node_params_t *params
     * }
     */
    public static void params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(params$LAYOUT, params$OFFSET, fieldValue);
    }

    private static final OfLong num_nodes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_nodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t num_nodes
     * }
     */
    public static final OfLong num_nodes$layout() {
        return num_nodes$LAYOUT;
    }

    private static final long num_nodes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t num_nodes
     * }
     */
    public static final long num_nodes$offset() {
        return num_nodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t num_nodes
     * }
     */
    public static long num_nodes(MemorySegment struct) {
        return struct.get(num_nodes$LAYOUT, num_nodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t num_nodes
     * }
     */
    public static void num_nodes(MemorySegment struct, long fieldValue) {
        struct.set(num_nodes$LAYOUT, num_nodes$OFFSET, fieldValue);
    }

    private static final OfLong capacity_nodes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("capacity_nodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t capacity_nodes
     * }
     */
    public static final OfLong capacity_nodes$layout() {
        return capacity_nodes$LAYOUT;
    }

    private static final long capacity_nodes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t capacity_nodes
     * }
     */
    public static final long capacity_nodes$offset() {
        return capacity_nodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t capacity_nodes
     * }
     */
    public static long capacity_nodes(MemorySegment struct) {
        return struct.get(capacity_nodes$LAYOUT, capacity_nodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t capacity_nodes
     * }
     */
    public static void capacity_nodes(MemorySegment struct, long fieldValue) {
        struct.set(capacity_nodes$LAYOUT, capacity_nodes$OFFSET, fieldValue);
    }

    private static final GroupLayout allocator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static final GroupLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.asSlice(allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

