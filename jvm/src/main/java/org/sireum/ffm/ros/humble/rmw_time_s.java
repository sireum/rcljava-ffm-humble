// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rmw_time_s {
 *     uint64_t sec;
 *     uint64_t nsec;
 * }
 * }
 */
public class rmw_time_s {

    rmw_time_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_LONG.withName("sec"),
        gen_h.C_LONG.withName("nsec")
    ).withName("rmw_time_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong sec$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t sec
     * }
     */
    public static final OfLong sec$layout() {
        return sec$LAYOUT;
    }

    private static final long sec$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t sec
     * }
     */
    public static final long sec$offset() {
        return sec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t sec
     * }
     */
    public static long sec(MemorySegment struct) {
        return struct.get(sec$LAYOUT, sec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t sec
     * }
     */
    public static void sec(MemorySegment struct, long fieldValue) {
        struct.set(sec$LAYOUT, sec$OFFSET, fieldValue);
    }

    private static final OfLong nsec$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nsec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t nsec
     * }
     */
    public static final OfLong nsec$layout() {
        return nsec$LAYOUT;
    }

    private static final long nsec$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t nsec
     * }
     */
    public static final long nsec$offset() {
        return nsec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t nsec
     * }
     */
    public static long nsec(MemorySegment struct) {
        return struct.get(nsec$LAYOUT, nsec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t nsec
     * }
     */
    public static void nsec(MemorySegment struct, long fieldValue) {
        struct.set(nsec$LAYOUT, nsec$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

