// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_node_options_s {
 *     rcl_allocator_t allocator;
 *     bool use_global_arguments;
 *     rcl_arguments_t arguments;
 *     bool enable_rosout;
 *     rmw_qos_profile_t rosout_qos;
 * }
 * }
 */
public class rcl_node_options_s {

    rcl_node_options_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rcutils_allocator_s.layout().withName("allocator"),
        gen_h.C_BOOL.withName("use_global_arguments"),
        MemoryLayout.paddingLayout(7),
        rcl_arguments_s.layout().withName("arguments"),
        gen_h.C_BOOL.withName("enable_rosout"),
        MemoryLayout.paddingLayout(7),
        rmw_qos_profile_s.layout().withName("rosout_qos")
    ).withName("rcl_node_options_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout allocator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final GroupLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.asSlice(allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    private static final OfBoolean use_global_arguments$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("use_global_arguments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool use_global_arguments
     * }
     */
    public static final OfBoolean use_global_arguments$layout() {
        return use_global_arguments$LAYOUT;
    }

    private static final long use_global_arguments$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool use_global_arguments
     * }
     */
    public static final long use_global_arguments$offset() {
        return use_global_arguments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool use_global_arguments
     * }
     */
    public static boolean use_global_arguments(MemorySegment struct) {
        return struct.get(use_global_arguments$LAYOUT, use_global_arguments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool use_global_arguments
     * }
     */
    public static void use_global_arguments(MemorySegment struct, boolean fieldValue) {
        struct.set(use_global_arguments$LAYOUT, use_global_arguments$OFFSET, fieldValue);
    }

    private static final GroupLayout arguments$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("arguments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_arguments_t arguments
     * }
     */
    public static final GroupLayout arguments$layout() {
        return arguments$LAYOUT;
    }

    private static final long arguments$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_arguments_t arguments
     * }
     */
    public static final long arguments$offset() {
        return arguments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_arguments_t arguments
     * }
     */
    public static MemorySegment arguments(MemorySegment struct) {
        return struct.asSlice(arguments$OFFSET, arguments$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_arguments_t arguments
     * }
     */
    public static void arguments(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, arguments$OFFSET, arguments$LAYOUT.byteSize());
    }

    private static final OfBoolean enable_rosout$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enable_rosout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enable_rosout
     * }
     */
    public static final OfBoolean enable_rosout$layout() {
        return enable_rosout$LAYOUT;
    }

    private static final long enable_rosout$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enable_rosout
     * }
     */
    public static final long enable_rosout$offset() {
        return enable_rosout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enable_rosout
     * }
     */
    public static boolean enable_rosout(MemorySegment struct) {
        return struct.get(enable_rosout$LAYOUT, enable_rosout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enable_rosout
     * }
     */
    public static void enable_rosout(MemorySegment struct, boolean fieldValue) {
        struct.set(enable_rosout$LAYOUT, enable_rosout$OFFSET, fieldValue);
    }

    private static final GroupLayout rosout_qos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rosout_qos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t rosout_qos
     * }
     */
    public static final GroupLayout rosout_qos$layout() {
        return rosout_qos$LAYOUT;
    }

    private static final long rosout_qos$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t rosout_qos
     * }
     */
    public static final long rosout_qos$offset() {
        return rosout_qos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t rosout_qos
     * }
     */
    public static MemorySegment rosout_qos(MemorySegment struct) {
        return struct.asSlice(rosout_qos$OFFSET, rosout_qos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t rosout_qos
     * }
     */
    public static void rosout_qos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rosout_qos$OFFSET, rosout_qos$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

