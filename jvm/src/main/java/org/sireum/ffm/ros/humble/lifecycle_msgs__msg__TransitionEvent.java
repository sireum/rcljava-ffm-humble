// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct lifecycle_msgs__msg__TransitionEvent {
 *     uint64_t timestamp;
 *     lifecycle_msgs__msg__Transition transition;
 *     lifecycle_msgs__msg__State start_state;
 *     lifecycle_msgs__msg__State goal_state;
 * }
 * }
 */
public class lifecycle_msgs__msg__TransitionEvent {

    lifecycle_msgs__msg__TransitionEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_LONG.withName("timestamp"),
        lifecycle_msgs__msg__Transition.layout().withName("transition"),
        lifecycle_msgs__msg__State.layout().withName("start_state"),
        lifecycle_msgs__msg__State.layout().withName("goal_state")
    ).withName("lifecycle_msgs__msg__TransitionEvent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong timestamp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static final OfLong timestamp$layout() {
        return timestamp$LAYOUT;
    }

    private static final long timestamp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static final long timestamp$offset() {
        return timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static long timestamp(MemorySegment struct) {
        return struct.get(timestamp$LAYOUT, timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static void timestamp(MemorySegment struct, long fieldValue) {
        struct.set(timestamp$LAYOUT, timestamp$OFFSET, fieldValue);
    }

    private static final GroupLayout transition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("transition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__Transition transition
     * }
     */
    public static final GroupLayout transition$layout() {
        return transition$LAYOUT;
    }

    private static final long transition$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__Transition transition
     * }
     */
    public static final long transition$offset() {
        return transition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__Transition transition
     * }
     */
    public static MemorySegment transition(MemorySegment struct) {
        return struct.asSlice(transition$OFFSET, transition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__Transition transition
     * }
     */
    public static void transition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, transition$OFFSET, transition$LAYOUT.byteSize());
    }

    private static final GroupLayout start_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("start_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State start_state
     * }
     */
    public static final GroupLayout start_state$layout() {
        return start_state$LAYOUT;
    }

    private static final long start_state$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State start_state
     * }
     */
    public static final long start_state$offset() {
        return start_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State start_state
     * }
     */
    public static MemorySegment start_state(MemorySegment struct) {
        return struct.asSlice(start_state$OFFSET, start_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State start_state
     * }
     */
    public static void start_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, start_state$OFFSET, start_state$LAYOUT.byteSize());
    }

    private static final GroupLayout goal_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("goal_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State goal_state
     * }
     */
    public static final GroupLayout goal_state$layout() {
        return goal_state$LAYOUT;
    }

    private static final long goal_state$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State goal_state
     * }
     */
    public static final long goal_state$offset() {
        return goal_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State goal_state
     * }
     */
    public static MemorySegment goal_state(MemorySegment struct) {
        return struct.asSlice(goal_state$OFFSET, goal_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__State goal_state
     * }
     */
    public static void goal_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, goal_state$OFFSET, goal_state$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

