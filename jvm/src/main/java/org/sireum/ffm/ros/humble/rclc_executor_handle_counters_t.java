// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     size_t number_of_subscriptions;
 *     size_t number_of_timers;
 *     size_t number_of_clients;
 *     size_t number_of_services;
 *     size_t number_of_action_clients;
 *     size_t number_of_action_servers;
 *     size_t number_of_guard_conditions;
 *     size_t number_of_events;
 * }
 * }
 */
public class rclc_executor_handle_counters_t {

    rclc_executor_handle_counters_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_LONG.withName("number_of_subscriptions"),
        gen_h.C_LONG.withName("number_of_timers"),
        gen_h.C_LONG.withName("number_of_clients"),
        gen_h.C_LONG.withName("number_of_services"),
        gen_h.C_LONG.withName("number_of_action_clients"),
        gen_h.C_LONG.withName("number_of_action_servers"),
        gen_h.C_LONG.withName("number_of_guard_conditions"),
        gen_h.C_LONG.withName("number_of_events")
    ).withName("$anon$171:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong number_of_subscriptions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_subscriptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_subscriptions
     * }
     */
    public static final OfLong number_of_subscriptions$layout() {
        return number_of_subscriptions$LAYOUT;
    }

    private static final long number_of_subscriptions$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_subscriptions
     * }
     */
    public static final long number_of_subscriptions$offset() {
        return number_of_subscriptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_subscriptions
     * }
     */
    public static long number_of_subscriptions(MemorySegment struct) {
        return struct.get(number_of_subscriptions$LAYOUT, number_of_subscriptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_subscriptions
     * }
     */
    public static void number_of_subscriptions(MemorySegment struct, long fieldValue) {
        struct.set(number_of_subscriptions$LAYOUT, number_of_subscriptions$OFFSET, fieldValue);
    }

    private static final OfLong number_of_timers$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_timers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_timers
     * }
     */
    public static final OfLong number_of_timers$layout() {
        return number_of_timers$LAYOUT;
    }

    private static final long number_of_timers$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_timers
     * }
     */
    public static final long number_of_timers$offset() {
        return number_of_timers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_timers
     * }
     */
    public static long number_of_timers(MemorySegment struct) {
        return struct.get(number_of_timers$LAYOUT, number_of_timers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_timers
     * }
     */
    public static void number_of_timers(MemorySegment struct, long fieldValue) {
        struct.set(number_of_timers$LAYOUT, number_of_timers$OFFSET, fieldValue);
    }

    private static final OfLong number_of_clients$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_clients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_clients
     * }
     */
    public static final OfLong number_of_clients$layout() {
        return number_of_clients$LAYOUT;
    }

    private static final long number_of_clients$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_clients
     * }
     */
    public static final long number_of_clients$offset() {
        return number_of_clients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_clients
     * }
     */
    public static long number_of_clients(MemorySegment struct) {
        return struct.get(number_of_clients$LAYOUT, number_of_clients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_clients
     * }
     */
    public static void number_of_clients(MemorySegment struct, long fieldValue) {
        struct.set(number_of_clients$LAYOUT, number_of_clients$OFFSET, fieldValue);
    }

    private static final OfLong number_of_services$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_services"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_services
     * }
     */
    public static final OfLong number_of_services$layout() {
        return number_of_services$LAYOUT;
    }

    private static final long number_of_services$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_services
     * }
     */
    public static final long number_of_services$offset() {
        return number_of_services$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_services
     * }
     */
    public static long number_of_services(MemorySegment struct) {
        return struct.get(number_of_services$LAYOUT, number_of_services$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_services
     * }
     */
    public static void number_of_services(MemorySegment struct, long fieldValue) {
        struct.set(number_of_services$LAYOUT, number_of_services$OFFSET, fieldValue);
    }

    private static final OfLong number_of_action_clients$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_action_clients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_action_clients
     * }
     */
    public static final OfLong number_of_action_clients$layout() {
        return number_of_action_clients$LAYOUT;
    }

    private static final long number_of_action_clients$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_action_clients
     * }
     */
    public static final long number_of_action_clients$offset() {
        return number_of_action_clients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_action_clients
     * }
     */
    public static long number_of_action_clients(MemorySegment struct) {
        return struct.get(number_of_action_clients$LAYOUT, number_of_action_clients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_action_clients
     * }
     */
    public static void number_of_action_clients(MemorySegment struct, long fieldValue) {
        struct.set(number_of_action_clients$LAYOUT, number_of_action_clients$OFFSET, fieldValue);
    }

    private static final OfLong number_of_action_servers$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_action_servers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_action_servers
     * }
     */
    public static final OfLong number_of_action_servers$layout() {
        return number_of_action_servers$LAYOUT;
    }

    private static final long number_of_action_servers$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_action_servers
     * }
     */
    public static final long number_of_action_servers$offset() {
        return number_of_action_servers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_action_servers
     * }
     */
    public static long number_of_action_servers(MemorySegment struct) {
        return struct.get(number_of_action_servers$LAYOUT, number_of_action_servers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_action_servers
     * }
     */
    public static void number_of_action_servers(MemorySegment struct, long fieldValue) {
        struct.set(number_of_action_servers$LAYOUT, number_of_action_servers$OFFSET, fieldValue);
    }

    private static final OfLong number_of_guard_conditions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_guard_conditions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_guard_conditions
     * }
     */
    public static final OfLong number_of_guard_conditions$layout() {
        return number_of_guard_conditions$LAYOUT;
    }

    private static final long number_of_guard_conditions$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_guard_conditions
     * }
     */
    public static final long number_of_guard_conditions$offset() {
        return number_of_guard_conditions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_guard_conditions
     * }
     */
    public static long number_of_guard_conditions(MemorySegment struct) {
        return struct.get(number_of_guard_conditions$LAYOUT, number_of_guard_conditions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_guard_conditions
     * }
     */
    public static void number_of_guard_conditions(MemorySegment struct, long fieldValue) {
        struct.set(number_of_guard_conditions$LAYOUT, number_of_guard_conditions$OFFSET, fieldValue);
    }

    private static final OfLong number_of_events$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_of_events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_of_events
     * }
     */
    public static final OfLong number_of_events$layout() {
        return number_of_events$LAYOUT;
    }

    private static final long number_of_events$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_of_events
     * }
     */
    public static final long number_of_events$offset() {
        return number_of_events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_of_events
     * }
     */
    public static long number_of_events(MemorySegment struct) {
        return struct.get(number_of_events$LAYOUT, number_of_events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_of_events
     * }
     */
    public static void number_of_events(MemorySegment struct, long fieldValue) {
        struct.set(number_of_events$LAYOUT, number_of_events$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

