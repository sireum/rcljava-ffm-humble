// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_subscription_content_filter_options_s {
 *     rmw_subscription_content_filter_options_t rmw_subscription_content_filter_options;
 * }
 * }
 */
public class rcl_subscription_content_filter_options_s {

    rcl_subscription_content_filter_options_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rmw_subscription_content_filter_options_s.layout().withName("rmw_subscription_content_filter_options")
    ).withName("rcl_subscription_content_filter_options_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout rmw_subscription_content_filter_options$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rmw_subscription_content_filter_options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_subscription_content_filter_options_t rmw_subscription_content_filter_options
     * }
     */
    public static final GroupLayout rmw_subscription_content_filter_options$layout() {
        return rmw_subscription_content_filter_options$LAYOUT;
    }

    private static final long rmw_subscription_content_filter_options$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_subscription_content_filter_options_t rmw_subscription_content_filter_options
     * }
     */
    public static final long rmw_subscription_content_filter_options$offset() {
        return rmw_subscription_content_filter_options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_subscription_content_filter_options_t rmw_subscription_content_filter_options
     * }
     */
    public static MemorySegment rmw_subscription_content_filter_options(MemorySegment struct) {
        return struct.asSlice(rmw_subscription_content_filter_options$OFFSET, rmw_subscription_content_filter_options$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_subscription_content_filter_options_t rmw_subscription_content_filter_options
     * }
     */
    public static void rmw_subscription_content_filter_options(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rmw_subscription_content_filter_options$OFFSET, rmw_subscription_content_filter_options$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

