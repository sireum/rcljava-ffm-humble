// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_lifecycle_transition_s {
 *     const char *label;
 *     unsigned int id;
 *     rcl_lifecycle_state_t *start;
 *     rcl_lifecycle_state_t *goal;
 * }
 * }
 */
public class rcl_lifecycle_transition_s {

    rcl_lifecycle_transition_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("label"),
        gen_h.C_INT.withName("id"),
        MemoryLayout.paddingLayout(4),
        gen_h.C_POINTER.withName("start"),
        gen_h.C_POINTER.withName("goal")
    ).withName("rcl_lifecycle_transition_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final AddressLayout label$layout() {
        return label$LAYOUT;
    }

    private static final long label$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final long label$offset() {
        return label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static MemorySegment label(MemorySegment struct) {
        return struct.get(label$LAYOUT, label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static void label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(label$LAYOUT, label$OFFSET, fieldValue);
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout start$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *start
     * }
     */
    public static final AddressLayout start$layout() {
        return start$LAYOUT;
    }

    private static final long start$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *start
     * }
     */
    public static final long start$offset() {
        return start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *start
     * }
     */
    public static MemorySegment start(MemorySegment struct) {
        return struct.get(start$LAYOUT, start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *start
     * }
     */
    public static void start(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(start$LAYOUT, start$OFFSET, fieldValue);
    }

    private static final AddressLayout goal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("goal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *goal
     * }
     */
    public static final AddressLayout goal$layout() {
        return goal$LAYOUT;
    }

    private static final long goal$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *goal
     * }
     */
    public static final long goal$offset() {
        return goal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *goal
     * }
     */
    public static MemorySegment goal(MemorySegment struct) {
        return struct.get(goal$LAYOUT, goal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *goal
     * }
     */
    public static void goal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(goal$LAYOUT, goal$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

