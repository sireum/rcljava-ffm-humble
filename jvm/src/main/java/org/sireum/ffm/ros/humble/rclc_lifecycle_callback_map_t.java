// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rclc_lifecycle_callback_map_t {
 *     bool goal_states[100];
 *     int (*fun_ptrs[100])(void);
 * }
 * }
 */
public class rclc_lifecycle_callback_map_t {

    rclc_lifecycle_callback_map_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(100, gen_h.C_BOOL).withName("goal_states"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(100, gen_h.C_POINTER).withName("fun_ptrs")
    ).withName("rclc_lifecycle_callback_map_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout goal_states$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("goal_states"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool goal_states[100]
     * }
     */
    public static final SequenceLayout goal_states$layout() {
        return goal_states$LAYOUT;
    }

    private static final long goal_states$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool goal_states[100]
     * }
     */
    public static final long goal_states$offset() {
        return goal_states$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool goal_states[100]
     * }
     */
    public static MemorySegment goal_states(MemorySegment struct) {
        return struct.asSlice(goal_states$OFFSET, goal_states$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool goal_states[100]
     * }
     */
    public static void goal_states(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, goal_states$OFFSET, goal_states$LAYOUT.byteSize());
    }

    private static long[] goal_states$DIMS = { 100 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool goal_states[100]
     * }
     */
    public static long[] goal_states$dimensions() {
        return goal_states$DIMS;
    }
    private static final VarHandle goal_states$ELEM_HANDLE = goal_states$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool goal_states[100]
     * }
     */
    public static boolean goal_states(MemorySegment struct, long index0) {
        return (boolean)goal_states$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool goal_states[100]
     * }
     */
    public static void goal_states(MemorySegment struct, long index0, boolean fieldValue) {
        goal_states$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout fun_ptrs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("fun_ptrs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*fun_ptrs[100])(void)
     * }
     */
    public static final SequenceLayout fun_ptrs$layout() {
        return fun_ptrs$LAYOUT;
    }

    private static final long fun_ptrs$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*fun_ptrs[100])(void)
     * }
     */
    public static final long fun_ptrs$offset() {
        return fun_ptrs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*fun_ptrs[100])(void)
     * }
     */
    public static MemorySegment fun_ptrs(MemorySegment struct) {
        return struct.asSlice(fun_ptrs$OFFSET, fun_ptrs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*fun_ptrs[100])(void)
     * }
     */
    public static void fun_ptrs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fun_ptrs$OFFSET, fun_ptrs$LAYOUT.byteSize());
    }

    private static long[] fun_ptrs$DIMS = { 100 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int (*fun_ptrs[100])(void)
     * }
     */
    public static long[] fun_ptrs$dimensions() {
        return fun_ptrs$DIMS;
    }
    private static final VarHandle fun_ptrs$ELEM_HANDLE = fun_ptrs$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int (*fun_ptrs[100])(void)
     * }
     */
    public static MemorySegment fun_ptrs(MemorySegment struct, long index0) {
        return (MemorySegment)fun_ptrs$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int (*fun_ptrs[100])(void)
     * }
     */
    public static void fun_ptrs(MemorySegment struct, long index0, MemorySegment fieldValue) {
        fun_ptrs$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

