// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_clock_s {
 *     rcl_clock_type_t type;
 *     rcl_jump_callback_info_t *jump_callbacks;
 *     size_t num_jump_callbacks;
 *     rcl_ret_t (*get_now)(void *, rcl_time_point_value_t *);
 *     void *data;
 *     rcl_allocator_t allocator;
 * }
 * }
 */
public class rcl_clock_s {

    rcl_clock_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        gen_h.C_POINTER.withName("jump_callbacks"),
        gen_h.C_LONG.withName("num_jump_callbacks"),
        gen_h.C_POINTER.withName("get_now"),
        gen_h.C_POINTER.withName("data"),
        rcutils_allocator_s.layout().withName("allocator")
    ).withName("rcl_clock_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_clock_type_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_clock_type_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_clock_type_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_clock_type_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout jump_callbacks$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("jump_callbacks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_jump_callback_info_t *jump_callbacks
     * }
     */
    public static final AddressLayout jump_callbacks$layout() {
        return jump_callbacks$LAYOUT;
    }

    private static final long jump_callbacks$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_jump_callback_info_t *jump_callbacks
     * }
     */
    public static final long jump_callbacks$offset() {
        return jump_callbacks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_jump_callback_info_t *jump_callbacks
     * }
     */
    public static MemorySegment jump_callbacks(MemorySegment struct) {
        return struct.get(jump_callbacks$LAYOUT, jump_callbacks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_jump_callback_info_t *jump_callbacks
     * }
     */
    public static void jump_callbacks(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(jump_callbacks$LAYOUT, jump_callbacks$OFFSET, fieldValue);
    }

    private static final OfLong num_jump_callbacks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_jump_callbacks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t num_jump_callbacks
     * }
     */
    public static final OfLong num_jump_callbacks$layout() {
        return num_jump_callbacks$LAYOUT;
    }

    private static final long num_jump_callbacks$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t num_jump_callbacks
     * }
     */
    public static final long num_jump_callbacks$offset() {
        return num_jump_callbacks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t num_jump_callbacks
     * }
     */
    public static long num_jump_callbacks(MemorySegment struct) {
        return struct.get(num_jump_callbacks$LAYOUT, num_jump_callbacks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t num_jump_callbacks
     * }
     */
    public static void num_jump_callbacks(MemorySegment struct, long fieldValue) {
        struct.set(num_jump_callbacks$LAYOUT, num_jump_callbacks$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * rcl_ret_t (*get_now)(void *, rcl_time_point_value_t *)
     * }
     */
    public class get_now {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = gen_h.upcallHandle(get_now.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_now.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_now$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_now"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_ret_t (*get_now)(void *, rcl_time_point_value_t *)
     * }
     */
    public static final AddressLayout get_now$layout() {
        return get_now$LAYOUT;
    }

    private static final long get_now$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_ret_t (*get_now)(void *, rcl_time_point_value_t *)
     * }
     */
    public static final long get_now$offset() {
        return get_now$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_ret_t (*get_now)(void *, rcl_time_point_value_t *)
     * }
     */
    public static MemorySegment get_now(MemorySegment struct) {
        return struct.get(get_now$LAYOUT, get_now$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_ret_t (*get_now)(void *, rcl_time_point_value_t *)
     * }
     */
    public static void get_now(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_now$LAYOUT, get_now$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final GroupLayout allocator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final GroupLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.asSlice(allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

