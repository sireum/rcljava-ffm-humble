// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_lifecycle_transition_map_s {
 *     rcl_lifecycle_state_t *states;
 *     unsigned int states_size;
 *     rcl_lifecycle_transition_t *transitions;
 *     unsigned int transitions_size;
 * }
 * }
 */
public class rcl_lifecycle_transition_map_s {

    rcl_lifecycle_transition_map_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("states"),
        gen_h.C_INT.withName("states_size"),
        MemoryLayout.paddingLayout(4),
        gen_h.C_POINTER.withName("transitions"),
        gen_h.C_INT.withName("transitions_size"),
        MemoryLayout.paddingLayout(4)
    ).withName("rcl_lifecycle_transition_map_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout states$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("states"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *states
     * }
     */
    public static final AddressLayout states$layout() {
        return states$LAYOUT;
    }

    private static final long states$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *states
     * }
     */
    public static final long states$offset() {
        return states$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *states
     * }
     */
    public static MemorySegment states(MemorySegment struct) {
        return struct.get(states$LAYOUT, states$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t *states
     * }
     */
    public static void states(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(states$LAYOUT, states$OFFSET, fieldValue);
    }

    private static final OfInt states_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("states_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int states_size
     * }
     */
    public static final OfInt states_size$layout() {
        return states_size$LAYOUT;
    }

    private static final long states_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int states_size
     * }
     */
    public static final long states_size$offset() {
        return states_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int states_size
     * }
     */
    public static int states_size(MemorySegment struct) {
        return struct.get(states_size$LAYOUT, states_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int states_size
     * }
     */
    public static void states_size(MemorySegment struct, int fieldValue) {
        struct.set(states_size$LAYOUT, states_size$OFFSET, fieldValue);
    }

    private static final AddressLayout transitions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("transitions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_t *transitions
     * }
     */
    public static final AddressLayout transitions$layout() {
        return transitions$LAYOUT;
    }

    private static final long transitions$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_t *transitions
     * }
     */
    public static final long transitions$offset() {
        return transitions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_t *transitions
     * }
     */
    public static MemorySegment transitions(MemorySegment struct) {
        return struct.get(transitions$LAYOUT, transitions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_t *transitions
     * }
     */
    public static void transitions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(transitions$LAYOUT, transitions$OFFSET, fieldValue);
    }

    private static final OfInt transitions_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transitions_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int transitions_size
     * }
     */
    public static final OfInt transitions_size$layout() {
        return transitions_size$LAYOUT;
    }

    private static final long transitions_size$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int transitions_size
     * }
     */
    public static final long transitions_size$offset() {
        return transitions_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int transitions_size
     * }
     */
    public static int transitions_size(MemorySegment struct) {
        return struct.get(transitions_size$LAYOUT, transitions_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int transitions_size
     * }
     */
    public static void transitions_size(MemorySegment struct, int fieldValue) {
        struct.set(transitions_size$LAYOUT, transitions_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

