// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcutils_uint8_array_s {
 *     uint8_t *buffer;
 *     size_t buffer_length;
 *     size_t buffer_capacity;
 *     rcutils_allocator_t allocator;
 * }
 * }
 */
public class rcutils_uint8_array_s {

    rcutils_uint8_array_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("buffer"),
        gen_h.C_LONG.withName("buffer_length"),
        gen_h.C_LONG.withName("buffer_capacity"),
        rcutils_allocator_s.layout().withName("allocator")
    ).withName("rcutils_uint8_array_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfLong buffer_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("buffer_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t buffer_length
     * }
     */
    public static final OfLong buffer_length$layout() {
        return buffer_length$LAYOUT;
    }

    private static final long buffer_length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t buffer_length
     * }
     */
    public static final long buffer_length$offset() {
        return buffer_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t buffer_length
     * }
     */
    public static long buffer_length(MemorySegment struct) {
        return struct.get(buffer_length$LAYOUT, buffer_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t buffer_length
     * }
     */
    public static void buffer_length(MemorySegment struct, long fieldValue) {
        struct.set(buffer_length$LAYOUT, buffer_length$OFFSET, fieldValue);
    }

    private static final OfLong buffer_capacity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("buffer_capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t buffer_capacity
     * }
     */
    public static final OfLong buffer_capacity$layout() {
        return buffer_capacity$LAYOUT;
    }

    private static final long buffer_capacity$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t buffer_capacity
     * }
     */
    public static final long buffer_capacity$offset() {
        return buffer_capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t buffer_capacity
     * }
     */
    public static long buffer_capacity(MemorySegment struct) {
        return struct.get(buffer_capacity$LAYOUT, buffer_capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t buffer_capacity
     * }
     */
    public static void buffer_capacity(MemorySegment struct, long fieldValue) {
        struct.set(buffer_capacity$LAYOUT, buffer_capacity$OFFSET, fieldValue);
    }

    private static final GroupLayout allocator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static final GroupLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.asSlice(allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcutils_allocator_t allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

