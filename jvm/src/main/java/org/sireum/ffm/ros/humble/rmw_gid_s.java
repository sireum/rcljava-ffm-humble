// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rmw_gid_s {
 *     const char *implementation_identifier;
 *     uint8_t data[24];
 * }
 * }
 */
public class rmw_gid_s {

    rmw_gid_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("implementation_identifier"),
        MemoryLayout.sequenceLayout(24, gen_h.C_CHAR).withName("data")
    ).withName("rmw_gid_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout implementation_identifier$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("implementation_identifier"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *implementation_identifier
     * }
     */
    public static final AddressLayout implementation_identifier$layout() {
        return implementation_identifier$LAYOUT;
    }

    private static final long implementation_identifier$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *implementation_identifier
     * }
     */
    public static final long implementation_identifier$offset() {
        return implementation_identifier$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *implementation_identifier
     * }
     */
    public static MemorySegment implementation_identifier(MemorySegment struct) {
        return struct.get(implementation_identifier$LAYOUT, implementation_identifier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *implementation_identifier
     * }
     */
    public static void implementation_identifier(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(implementation_identifier$LAYOUT, implementation_identifier$OFFSET, fieldValue);
    }

    private static final SequenceLayout data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t data[24]
     * }
     */
    public static final SequenceLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t data[24]
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t data[24]
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.asSlice(data$OFFSET, data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t data[24]
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$LAYOUT.byteSize());
    }

    private static long[] data$DIMS = { 24 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t data[24]
     * }
     */
    public static long[] data$dimensions() {
        return data$DIMS;
    }
    private static final VarHandle data$ELEM_HANDLE = data$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t data[24]
     * }
     */
    public static byte data(MemorySegment struct, long index0) {
        return (byte)data$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t data[24]
     * }
     */
    public static void data(MemorySegment struct, long index0, byte fieldValue) {
        data$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

