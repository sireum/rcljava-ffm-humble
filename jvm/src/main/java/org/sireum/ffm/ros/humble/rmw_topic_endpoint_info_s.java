// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rmw_topic_endpoint_info_s {
 *     const char *node_name;
 *     const char *node_namespace;
 *     const char *topic_type;
 *     rmw_endpoint_type_t endpoint_type;
 *     uint8_t endpoint_gid[24];
 *     rmw_qos_profile_t qos_profile;
 * }
 * }
 */
public class rmw_topic_endpoint_info_s {

    rmw_topic_endpoint_info_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("node_name"),
        gen_h.C_POINTER.withName("node_namespace"),
        gen_h.C_POINTER.withName("topic_type"),
        gen_h.C_INT.withName("endpoint_type"),
        MemoryLayout.sequenceLayout(24, gen_h.C_CHAR).withName("endpoint_gid"),
        MemoryLayout.paddingLayout(4),
        rmw_qos_profile_s.layout().withName("qos_profile")
    ).withName("rmw_topic_endpoint_info_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout node_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("node_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *node_name
     * }
     */
    public static final AddressLayout node_name$layout() {
        return node_name$LAYOUT;
    }

    private static final long node_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *node_name
     * }
     */
    public static final long node_name$offset() {
        return node_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *node_name
     * }
     */
    public static MemorySegment node_name(MemorySegment struct) {
        return struct.get(node_name$LAYOUT, node_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *node_name
     * }
     */
    public static void node_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(node_name$LAYOUT, node_name$OFFSET, fieldValue);
    }

    private static final AddressLayout node_namespace$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("node_namespace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *node_namespace
     * }
     */
    public static final AddressLayout node_namespace$layout() {
        return node_namespace$LAYOUT;
    }

    private static final long node_namespace$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *node_namespace
     * }
     */
    public static final long node_namespace$offset() {
        return node_namespace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *node_namespace
     * }
     */
    public static MemorySegment node_namespace(MemorySegment struct) {
        return struct.get(node_namespace$LAYOUT, node_namespace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *node_namespace
     * }
     */
    public static void node_namespace(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(node_namespace$LAYOUT, node_namespace$OFFSET, fieldValue);
    }

    private static final AddressLayout topic_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("topic_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *topic_type
     * }
     */
    public static final AddressLayout topic_type$layout() {
        return topic_type$LAYOUT;
    }

    private static final long topic_type$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *topic_type
     * }
     */
    public static final long topic_type$offset() {
        return topic_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *topic_type
     * }
     */
    public static MemorySegment topic_type(MemorySegment struct) {
        return struct.get(topic_type$LAYOUT, topic_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *topic_type
     * }
     */
    public static void topic_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(topic_type$LAYOUT, topic_type$OFFSET, fieldValue);
    }

    private static final OfInt endpoint_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("endpoint_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_endpoint_type_t endpoint_type
     * }
     */
    public static final OfInt endpoint_type$layout() {
        return endpoint_type$LAYOUT;
    }

    private static final long endpoint_type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_endpoint_type_t endpoint_type
     * }
     */
    public static final long endpoint_type$offset() {
        return endpoint_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_endpoint_type_t endpoint_type
     * }
     */
    public static int endpoint_type(MemorySegment struct) {
        return struct.get(endpoint_type$LAYOUT, endpoint_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_endpoint_type_t endpoint_type
     * }
     */
    public static void endpoint_type(MemorySegment struct, int fieldValue) {
        struct.set(endpoint_type$LAYOUT, endpoint_type$OFFSET, fieldValue);
    }

    private static final SequenceLayout endpoint_gid$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("endpoint_gid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t endpoint_gid[24]
     * }
     */
    public static final SequenceLayout endpoint_gid$layout() {
        return endpoint_gid$LAYOUT;
    }

    private static final long endpoint_gid$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t endpoint_gid[24]
     * }
     */
    public static final long endpoint_gid$offset() {
        return endpoint_gid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t endpoint_gid[24]
     * }
     */
    public static MemorySegment endpoint_gid(MemorySegment struct) {
        return struct.asSlice(endpoint_gid$OFFSET, endpoint_gid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t endpoint_gid[24]
     * }
     */
    public static void endpoint_gid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, endpoint_gid$OFFSET, endpoint_gid$LAYOUT.byteSize());
    }

    private static long[] endpoint_gid$DIMS = { 24 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t endpoint_gid[24]
     * }
     */
    public static long[] endpoint_gid$dimensions() {
        return endpoint_gid$DIMS;
    }
    private static final VarHandle endpoint_gid$ELEM_HANDLE = endpoint_gid$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t endpoint_gid[24]
     * }
     */
    public static byte endpoint_gid(MemorySegment struct, long index0) {
        return (byte)endpoint_gid$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t endpoint_gid[24]
     * }
     */
    public static void endpoint_gid(MemorySegment struct, long index0, byte fieldValue) {
        endpoint_gid$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout qos_profile$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("qos_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t qos_profile
     * }
     */
    public static final GroupLayout qos_profile$layout() {
        return qos_profile$LAYOUT;
    }

    private static final long qos_profile$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t qos_profile
     * }
     */
    public static final long qos_profile$offset() {
        return qos_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t qos_profile
     * }
     */
    public static MemorySegment qos_profile(MemorySegment struct) {
        return struct.asSlice(qos_profile$OFFSET, qos_profile$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_qos_profile_t qos_profile
     * }
     */
    public static void qos_profile(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, qos_profile$OFFSET, qos_profile$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

