// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_context_s {
 *     rcl_arguments_t global_arguments;
 *     rcl_context_impl_t *impl;
 *     uint8_t instance_id_storage[8];
 * }
 * }
 */
public class rcl_context_s {

    rcl_context_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rcl_arguments_s.layout().withName("global_arguments"),
        gen_h.C_POINTER.withName("impl"),
        MemoryLayout.sequenceLayout(8, gen_h.C_CHAR).withName("instance_id_storage")
    ).withName("rcl_context_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout global_arguments$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("global_arguments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_arguments_t global_arguments
     * }
     */
    public static final GroupLayout global_arguments$layout() {
        return global_arguments$LAYOUT;
    }

    private static final long global_arguments$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_arguments_t global_arguments
     * }
     */
    public static final long global_arguments$offset() {
        return global_arguments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_arguments_t global_arguments
     * }
     */
    public static MemorySegment global_arguments(MemorySegment struct) {
        return struct.asSlice(global_arguments$OFFSET, global_arguments$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_arguments_t global_arguments
     * }
     */
    public static void global_arguments(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, global_arguments$OFFSET, global_arguments$LAYOUT.byteSize());
    }

    private static final AddressLayout impl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("impl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_context_impl_t *impl
     * }
     */
    public static final AddressLayout impl$layout() {
        return impl$LAYOUT;
    }

    private static final long impl$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_context_impl_t *impl
     * }
     */
    public static final long impl$offset() {
        return impl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_context_impl_t *impl
     * }
     */
    public static MemorySegment impl(MemorySegment struct) {
        return struct.get(impl$LAYOUT, impl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_context_impl_t *impl
     * }
     */
    public static void impl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(impl$LAYOUT, impl$OFFSET, fieldValue);
    }

    private static final SequenceLayout instance_id_storage$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("instance_id_storage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t instance_id_storage[8]
     * }
     */
    public static final SequenceLayout instance_id_storage$layout() {
        return instance_id_storage$LAYOUT;
    }

    private static final long instance_id_storage$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t instance_id_storage[8]
     * }
     */
    public static final long instance_id_storage$offset() {
        return instance_id_storage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t instance_id_storage[8]
     * }
     */
    public static MemorySegment instance_id_storage(MemorySegment struct) {
        return struct.asSlice(instance_id_storage$OFFSET, instance_id_storage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t instance_id_storage[8]
     * }
     */
    public static void instance_id_storage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, instance_id_storage$OFFSET, instance_id_storage$LAYOUT.byteSize());
    }

    private static long[] instance_id_storage$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t instance_id_storage[8]
     * }
     */
    public static long[] instance_id_storage$dimensions() {
        return instance_id_storage$DIMS;
    }
    private static final VarHandle instance_id_storage$ELEM_HANDLE = instance_id_storage$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t instance_id_storage[8]
     * }
     */
    public static byte instance_id_storage(MemorySegment struct, long index0) {
        return (byte)instance_id_storage$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t instance_id_storage[8]
     * }
     */
    public static void instance_id_storage(MemorySegment struct, long index0, byte fieldValue) {
        instance_id_storage$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

