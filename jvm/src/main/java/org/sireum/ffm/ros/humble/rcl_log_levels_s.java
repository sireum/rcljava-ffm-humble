// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_log_levels_s {
 *     rcl_log_severity_t default_logger_level;
 *     rcl_logger_setting_t *logger_settings;
 *     size_t num_logger_settings;
 *     size_t capacity_logger_settings;
 *     rcl_allocator_t allocator;
 * }
 * }
 */
public class rcl_log_levels_s {

    rcl_log_levels_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_INT.withName("default_logger_level"),
        MemoryLayout.paddingLayout(4),
        gen_h.C_POINTER.withName("logger_settings"),
        gen_h.C_LONG.withName("num_logger_settings"),
        gen_h.C_LONG.withName("capacity_logger_settings"),
        rcutils_allocator_s.layout().withName("allocator")
    ).withName("rcl_log_levels_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt default_logger_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("default_logger_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_log_severity_t default_logger_level
     * }
     */
    public static final OfInt default_logger_level$layout() {
        return default_logger_level$LAYOUT;
    }

    private static final long default_logger_level$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_log_severity_t default_logger_level
     * }
     */
    public static final long default_logger_level$offset() {
        return default_logger_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_log_severity_t default_logger_level
     * }
     */
    public static int default_logger_level(MemorySegment struct) {
        return struct.get(default_logger_level$LAYOUT, default_logger_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_log_severity_t default_logger_level
     * }
     */
    public static void default_logger_level(MemorySegment struct, int fieldValue) {
        struct.set(default_logger_level$LAYOUT, default_logger_level$OFFSET, fieldValue);
    }

    private static final AddressLayout logger_settings$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("logger_settings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_logger_setting_t *logger_settings
     * }
     */
    public static final AddressLayout logger_settings$layout() {
        return logger_settings$LAYOUT;
    }

    private static final long logger_settings$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_logger_setting_t *logger_settings
     * }
     */
    public static final long logger_settings$offset() {
        return logger_settings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_logger_setting_t *logger_settings
     * }
     */
    public static MemorySegment logger_settings(MemorySegment struct) {
        return struct.get(logger_settings$LAYOUT, logger_settings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_logger_setting_t *logger_settings
     * }
     */
    public static void logger_settings(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(logger_settings$LAYOUT, logger_settings$OFFSET, fieldValue);
    }

    private static final OfLong num_logger_settings$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_logger_settings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t num_logger_settings
     * }
     */
    public static final OfLong num_logger_settings$layout() {
        return num_logger_settings$LAYOUT;
    }

    private static final long num_logger_settings$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t num_logger_settings
     * }
     */
    public static final long num_logger_settings$offset() {
        return num_logger_settings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t num_logger_settings
     * }
     */
    public static long num_logger_settings(MemorySegment struct) {
        return struct.get(num_logger_settings$LAYOUT, num_logger_settings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t num_logger_settings
     * }
     */
    public static void num_logger_settings(MemorySegment struct, long fieldValue) {
        struct.set(num_logger_settings$LAYOUT, num_logger_settings$OFFSET, fieldValue);
    }

    private static final OfLong capacity_logger_settings$LAYOUT = (OfLong)$LAYOUT.select(groupElement("capacity_logger_settings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t capacity_logger_settings
     * }
     */
    public static final OfLong capacity_logger_settings$layout() {
        return capacity_logger_settings$LAYOUT;
    }

    private static final long capacity_logger_settings$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t capacity_logger_settings
     * }
     */
    public static final long capacity_logger_settings$offset() {
        return capacity_logger_settings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t capacity_logger_settings
     * }
     */
    public static long capacity_logger_settings(MemorySegment struct) {
        return struct.get(capacity_logger_settings$LAYOUT, capacity_logger_settings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t capacity_logger_settings
     * }
     */
    public static void capacity_logger_settings(MemorySegment struct, long fieldValue) {
        struct.set(capacity_logger_settings$LAYOUT, capacity_logger_settings$OFFSET, fieldValue);
    }

    private static final GroupLayout allocator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final GroupLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.asSlice(allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

