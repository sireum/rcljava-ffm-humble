// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_interfaces__msg__ParameterEvent {
 *     builtin_interfaces__msg__Time stamp;
 *     rosidl_runtime_c__String node;
 *     rcl_interfaces__msg__Parameter__Sequence new_parameters;
 *     rcl_interfaces__msg__Parameter__Sequence changed_parameters;
 *     rcl_interfaces__msg__Parameter__Sequence deleted_parameters;
 * }
 * }
 */
public class rcl_interfaces__msg__ParameterEvent {

    rcl_interfaces__msg__ParameterEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        builtin_interfaces__msg__Time.layout().withName("stamp"),
        rosidl_runtime_c__String.layout().withName("node"),
        rcl_interfaces__msg__Parameter__Sequence.layout().withName("new_parameters"),
        rcl_interfaces__msg__Parameter__Sequence.layout().withName("changed_parameters"),
        rcl_interfaces__msg__Parameter__Sequence.layout().withName("deleted_parameters")
    ).withName("rcl_interfaces__msg__ParameterEvent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout stamp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * builtin_interfaces__msg__Time stamp
     * }
     */
    public static final GroupLayout stamp$layout() {
        return stamp$LAYOUT;
    }

    private static final long stamp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * builtin_interfaces__msg__Time stamp
     * }
     */
    public static final long stamp$offset() {
        return stamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * builtin_interfaces__msg__Time stamp
     * }
     */
    public static MemorySegment stamp(MemorySegment struct) {
        return struct.asSlice(stamp$OFFSET, stamp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * builtin_interfaces__msg__Time stamp
     * }
     */
    public static void stamp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stamp$OFFSET, stamp$LAYOUT.byteSize());
    }

    private static final GroupLayout node$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("node"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String node
     * }
     */
    public static final GroupLayout node$layout() {
        return node$LAYOUT;
    }

    private static final long node$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String node
     * }
     */
    public static final long node$offset() {
        return node$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String node
     * }
     */
    public static MemorySegment node(MemorySegment struct) {
        return struct.asSlice(node$OFFSET, node$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rosidl_runtime_c__String node
     * }
     */
    public static void node(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, node$OFFSET, node$LAYOUT.byteSize());
    }

    private static final GroupLayout new_parameters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("new_parameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence new_parameters
     * }
     */
    public static final GroupLayout new_parameters$layout() {
        return new_parameters$LAYOUT;
    }

    private static final long new_parameters$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence new_parameters
     * }
     */
    public static final long new_parameters$offset() {
        return new_parameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence new_parameters
     * }
     */
    public static MemorySegment new_parameters(MemorySegment struct) {
        return struct.asSlice(new_parameters$OFFSET, new_parameters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence new_parameters
     * }
     */
    public static void new_parameters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, new_parameters$OFFSET, new_parameters$LAYOUT.byteSize());
    }

    private static final GroupLayout changed_parameters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("changed_parameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence changed_parameters
     * }
     */
    public static final GroupLayout changed_parameters$layout() {
        return changed_parameters$LAYOUT;
    }

    private static final long changed_parameters$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence changed_parameters
     * }
     */
    public static final long changed_parameters$offset() {
        return changed_parameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence changed_parameters
     * }
     */
    public static MemorySegment changed_parameters(MemorySegment struct) {
        return struct.asSlice(changed_parameters$OFFSET, changed_parameters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence changed_parameters
     * }
     */
    public static void changed_parameters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, changed_parameters$OFFSET, changed_parameters$LAYOUT.byteSize());
    }

    private static final GroupLayout deleted_parameters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("deleted_parameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence deleted_parameters
     * }
     */
    public static final GroupLayout deleted_parameters$layout() {
        return deleted_parameters$LAYOUT;
    }

    private static final long deleted_parameters$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence deleted_parameters
     * }
     */
    public static final long deleted_parameters$offset() {
        return deleted_parameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence deleted_parameters
     * }
     */
    public static MemorySegment deleted_parameters(MemorySegment struct) {
        return struct.asSlice(deleted_parameters$OFFSET, deleted_parameters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence deleted_parameters
     * }
     */
    public static void deleted_parameters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, deleted_parameters$OFFSET, deleted_parameters$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

