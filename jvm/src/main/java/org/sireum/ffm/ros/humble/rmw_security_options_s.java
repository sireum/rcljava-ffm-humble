// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rmw_security_options_s {
 *     rmw_security_enforcement_policy_t enforce_security;
 *     char *security_root_path;
 * }
 * }
 */
public class rmw_security_options_s {

    rmw_security_options_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_INT.withName("enforce_security"),
        MemoryLayout.paddingLayout(4),
        gen_h.C_POINTER.withName("security_root_path")
    ).withName("rmw_security_options_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt enforce_security$LAYOUT = (OfInt)$LAYOUT.select(groupElement("enforce_security"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rmw_security_enforcement_policy_t enforce_security
     * }
     */
    public static final OfInt enforce_security$layout() {
        return enforce_security$LAYOUT;
    }

    private static final long enforce_security$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rmw_security_enforcement_policy_t enforce_security
     * }
     */
    public static final long enforce_security$offset() {
        return enforce_security$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rmw_security_enforcement_policy_t enforce_security
     * }
     */
    public static int enforce_security(MemorySegment struct) {
        return struct.get(enforce_security$LAYOUT, enforce_security$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rmw_security_enforcement_policy_t enforce_security
     * }
     */
    public static void enforce_security(MemorySegment struct, int fieldValue) {
        struct.set(enforce_security$LAYOUT, enforce_security$OFFSET, fieldValue);
    }

    private static final AddressLayout security_root_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("security_root_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *security_root_path
     * }
     */
    public static final AddressLayout security_root_path$layout() {
        return security_root_path$LAYOUT;
    }

    private static final long security_root_path$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *security_root_path
     * }
     */
    public static final long security_root_path$offset() {
        return security_root_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *security_root_path
     * }
     */
    public static MemorySegment security_root_path(MemorySegment struct) {
        return struct.get(security_root_path$LAYOUT, security_root_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *security_root_path
     * }
     */
    public static void security_root_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(security_root_path$LAYOUT, security_root_path$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

