// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_lifecycle_state_machine_options_s {
 *     bool initialize_default_states;
 *     bool enable_com_interface;
 *     rcl_allocator_t allocator;
 * }
 * }
 */
public class rcl_lifecycle_state_machine_options_s {

    rcl_lifecycle_state_machine_options_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_BOOL.withName("initialize_default_states"),
        gen_h.C_BOOL.withName("enable_com_interface"),
        MemoryLayout.paddingLayout(6),
        rcutils_allocator_s.layout().withName("allocator")
    ).withName("rcl_lifecycle_state_machine_options_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean initialize_default_states$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("initialize_default_states"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool initialize_default_states
     * }
     */
    public static final OfBoolean initialize_default_states$layout() {
        return initialize_default_states$LAYOUT;
    }

    private static final long initialize_default_states$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool initialize_default_states
     * }
     */
    public static final long initialize_default_states$offset() {
        return initialize_default_states$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool initialize_default_states
     * }
     */
    public static boolean initialize_default_states(MemorySegment struct) {
        return struct.get(initialize_default_states$LAYOUT, initialize_default_states$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool initialize_default_states
     * }
     */
    public static void initialize_default_states(MemorySegment struct, boolean fieldValue) {
        struct.set(initialize_default_states$LAYOUT, initialize_default_states$OFFSET, fieldValue);
    }

    private static final OfBoolean enable_com_interface$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enable_com_interface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enable_com_interface
     * }
     */
    public static final OfBoolean enable_com_interface$layout() {
        return enable_com_interface$LAYOUT;
    }

    private static final long enable_com_interface$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enable_com_interface
     * }
     */
    public static final long enable_com_interface$offset() {
        return enable_com_interface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enable_com_interface
     * }
     */
    public static boolean enable_com_interface(MemorySegment struct) {
        return struct.get(enable_com_interface$LAYOUT, enable_com_interface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enable_com_interface
     * }
     */
    public static void enable_com_interface(MemorySegment struct, boolean fieldValue) {
        struct.set(enable_com_interface$LAYOUT, enable_com_interface$OFFSET, fieldValue);
    }

    private static final GroupLayout allocator$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final GroupLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.asSlice(allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_allocator_t allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, allocator$OFFSET, allocator$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

