// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_wait_set_s {
 *     const rcl_subscription_t **subscriptions;
 *     size_t size_of_subscriptions;
 *     const rcl_guard_condition_t **guard_conditions;
 *     size_t size_of_guard_conditions;
 *     const rcl_timer_t **timers;
 *     size_t size_of_timers;
 *     const rcl_client_t **clients;
 *     size_t size_of_clients;
 *     const rcl_service_t **services;
 *     size_t size_of_services;
 *     const rcl_event_t **events;
 *     size_t size_of_events;
 *     rcl_wait_set_impl_t *impl;
 * }
 * }
 */
public class rcl_wait_set_s {

    rcl_wait_set_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("subscriptions"),
        gen_h.C_LONG.withName("size_of_subscriptions"),
        gen_h.C_POINTER.withName("guard_conditions"),
        gen_h.C_LONG.withName("size_of_guard_conditions"),
        gen_h.C_POINTER.withName("timers"),
        gen_h.C_LONG.withName("size_of_timers"),
        gen_h.C_POINTER.withName("clients"),
        gen_h.C_LONG.withName("size_of_clients"),
        gen_h.C_POINTER.withName("services"),
        gen_h.C_LONG.withName("size_of_services"),
        gen_h.C_POINTER.withName("events"),
        gen_h.C_LONG.withName("size_of_events"),
        gen_h.C_POINTER.withName("impl")
    ).withName("rcl_wait_set_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout subscriptions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("subscriptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rcl_subscription_t **subscriptions
     * }
     */
    public static final AddressLayout subscriptions$layout() {
        return subscriptions$LAYOUT;
    }

    private static final long subscriptions$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rcl_subscription_t **subscriptions
     * }
     */
    public static final long subscriptions$offset() {
        return subscriptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rcl_subscription_t **subscriptions
     * }
     */
    public static MemorySegment subscriptions(MemorySegment struct) {
        return struct.get(subscriptions$LAYOUT, subscriptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rcl_subscription_t **subscriptions
     * }
     */
    public static void subscriptions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(subscriptions$LAYOUT, subscriptions$OFFSET, fieldValue);
    }

    private static final OfLong size_of_subscriptions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_of_subscriptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_of_subscriptions
     * }
     */
    public static final OfLong size_of_subscriptions$layout() {
        return size_of_subscriptions$LAYOUT;
    }

    private static final long size_of_subscriptions$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_of_subscriptions
     * }
     */
    public static final long size_of_subscriptions$offset() {
        return size_of_subscriptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_of_subscriptions
     * }
     */
    public static long size_of_subscriptions(MemorySegment struct) {
        return struct.get(size_of_subscriptions$LAYOUT, size_of_subscriptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_of_subscriptions
     * }
     */
    public static void size_of_subscriptions(MemorySegment struct, long fieldValue) {
        struct.set(size_of_subscriptions$LAYOUT, size_of_subscriptions$OFFSET, fieldValue);
    }

    private static final AddressLayout guard_conditions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("guard_conditions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rcl_guard_condition_t **guard_conditions
     * }
     */
    public static final AddressLayout guard_conditions$layout() {
        return guard_conditions$LAYOUT;
    }

    private static final long guard_conditions$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rcl_guard_condition_t **guard_conditions
     * }
     */
    public static final long guard_conditions$offset() {
        return guard_conditions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rcl_guard_condition_t **guard_conditions
     * }
     */
    public static MemorySegment guard_conditions(MemorySegment struct) {
        return struct.get(guard_conditions$LAYOUT, guard_conditions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rcl_guard_condition_t **guard_conditions
     * }
     */
    public static void guard_conditions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(guard_conditions$LAYOUT, guard_conditions$OFFSET, fieldValue);
    }

    private static final OfLong size_of_guard_conditions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_of_guard_conditions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_of_guard_conditions
     * }
     */
    public static final OfLong size_of_guard_conditions$layout() {
        return size_of_guard_conditions$LAYOUT;
    }

    private static final long size_of_guard_conditions$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_of_guard_conditions
     * }
     */
    public static final long size_of_guard_conditions$offset() {
        return size_of_guard_conditions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_of_guard_conditions
     * }
     */
    public static long size_of_guard_conditions(MemorySegment struct) {
        return struct.get(size_of_guard_conditions$LAYOUT, size_of_guard_conditions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_of_guard_conditions
     * }
     */
    public static void size_of_guard_conditions(MemorySegment struct, long fieldValue) {
        struct.set(size_of_guard_conditions$LAYOUT, size_of_guard_conditions$OFFSET, fieldValue);
    }

    private static final AddressLayout timers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("timers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rcl_timer_t **timers
     * }
     */
    public static final AddressLayout timers$layout() {
        return timers$LAYOUT;
    }

    private static final long timers$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rcl_timer_t **timers
     * }
     */
    public static final long timers$offset() {
        return timers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rcl_timer_t **timers
     * }
     */
    public static MemorySegment timers(MemorySegment struct) {
        return struct.get(timers$LAYOUT, timers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rcl_timer_t **timers
     * }
     */
    public static void timers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(timers$LAYOUT, timers$OFFSET, fieldValue);
    }

    private static final OfLong size_of_timers$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_of_timers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_of_timers
     * }
     */
    public static final OfLong size_of_timers$layout() {
        return size_of_timers$LAYOUT;
    }

    private static final long size_of_timers$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_of_timers
     * }
     */
    public static final long size_of_timers$offset() {
        return size_of_timers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_of_timers
     * }
     */
    public static long size_of_timers(MemorySegment struct) {
        return struct.get(size_of_timers$LAYOUT, size_of_timers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_of_timers
     * }
     */
    public static void size_of_timers(MemorySegment struct, long fieldValue) {
        struct.set(size_of_timers$LAYOUT, size_of_timers$OFFSET, fieldValue);
    }

    private static final AddressLayout clients$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("clients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rcl_client_t **clients
     * }
     */
    public static final AddressLayout clients$layout() {
        return clients$LAYOUT;
    }

    private static final long clients$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rcl_client_t **clients
     * }
     */
    public static final long clients$offset() {
        return clients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rcl_client_t **clients
     * }
     */
    public static MemorySegment clients(MemorySegment struct) {
        return struct.get(clients$LAYOUT, clients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rcl_client_t **clients
     * }
     */
    public static void clients(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(clients$LAYOUT, clients$OFFSET, fieldValue);
    }

    private static final OfLong size_of_clients$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_of_clients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_of_clients
     * }
     */
    public static final OfLong size_of_clients$layout() {
        return size_of_clients$LAYOUT;
    }

    private static final long size_of_clients$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_of_clients
     * }
     */
    public static final long size_of_clients$offset() {
        return size_of_clients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_of_clients
     * }
     */
    public static long size_of_clients(MemorySegment struct) {
        return struct.get(size_of_clients$LAYOUT, size_of_clients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_of_clients
     * }
     */
    public static void size_of_clients(MemorySegment struct, long fieldValue) {
        struct.set(size_of_clients$LAYOUT, size_of_clients$OFFSET, fieldValue);
    }

    private static final AddressLayout services$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("services"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rcl_service_t **services
     * }
     */
    public static final AddressLayout services$layout() {
        return services$LAYOUT;
    }

    private static final long services$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rcl_service_t **services
     * }
     */
    public static final long services$offset() {
        return services$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rcl_service_t **services
     * }
     */
    public static MemorySegment services(MemorySegment struct) {
        return struct.get(services$LAYOUT, services$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rcl_service_t **services
     * }
     */
    public static void services(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(services$LAYOUT, services$OFFSET, fieldValue);
    }

    private static final OfLong size_of_services$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_of_services"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_of_services
     * }
     */
    public static final OfLong size_of_services$layout() {
        return size_of_services$LAYOUT;
    }

    private static final long size_of_services$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_of_services
     * }
     */
    public static final long size_of_services$offset() {
        return size_of_services$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_of_services
     * }
     */
    public static long size_of_services(MemorySegment struct) {
        return struct.get(size_of_services$LAYOUT, size_of_services$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_of_services
     * }
     */
    public static void size_of_services(MemorySegment struct, long fieldValue) {
        struct.set(size_of_services$LAYOUT, size_of_services$OFFSET, fieldValue);
    }

    private static final AddressLayout events$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const rcl_event_t **events
     * }
     */
    public static final AddressLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const rcl_event_t **events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const rcl_event_t **events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.get(events$LAYOUT, events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const rcl_event_t **events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(events$LAYOUT, events$OFFSET, fieldValue);
    }

    private static final OfLong size_of_events$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_of_events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_of_events
     * }
     */
    public static final OfLong size_of_events$layout() {
        return size_of_events$LAYOUT;
    }

    private static final long size_of_events$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_of_events
     * }
     */
    public static final long size_of_events$offset() {
        return size_of_events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_of_events
     * }
     */
    public static long size_of_events(MemorySegment struct) {
        return struct.get(size_of_events$LAYOUT, size_of_events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_of_events
     * }
     */
    public static void size_of_events(MemorySegment struct, long fieldValue) {
        struct.set(size_of_events$LAYOUT, size_of_events$OFFSET, fieldValue);
    }

    private static final AddressLayout impl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("impl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_wait_set_impl_t *impl
     * }
     */
    public static final AddressLayout impl$layout() {
        return impl$LAYOUT;
    }

    private static final long impl$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_wait_set_impl_t *impl
     * }
     */
    public static final long impl$offset() {
        return impl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_wait_set_impl_t *impl
     * }
     */
    public static MemorySegment impl(MemorySegment struct) {
        return struct.get(impl$LAYOUT, impl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_wait_set_impl_t *impl
     * }
     */
    public static void impl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(impl$LAYOUT, impl$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

