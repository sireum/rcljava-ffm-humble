// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rmw_qos_profile_s {
 *     enum rmw_qos_history_policy_e history;
 *     size_t depth;
 *     enum rmw_qos_reliability_policy_e reliability;
 *     enum rmw_qos_durability_policy_e durability;
 *     struct rmw_time_s deadline;
 *     struct rmw_time_s lifespan;
 *     enum rmw_qos_liveliness_policy_e liveliness;
 *     struct rmw_time_s liveliness_lease_duration;
 *     bool avoid_ros_namespace_conventions;
 * }
 * }
 */
public class rmw_qos_profile_s {

    rmw_qos_profile_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_INT.withName("history"),
        MemoryLayout.paddingLayout(4),
        gen_h.C_LONG.withName("depth"),
        gen_h.C_INT.withName("reliability"),
        gen_h.C_INT.withName("durability"),
        rmw_time_s.layout().withName("deadline"),
        rmw_time_s.layout().withName("lifespan"),
        gen_h.C_INT.withName("liveliness"),
        MemoryLayout.paddingLayout(4),
        rmw_time_s.layout().withName("liveliness_lease_duration"),
        gen_h.C_BOOL.withName("avoid_ros_namespace_conventions"),
        MemoryLayout.paddingLayout(7)
    ).withName("rmw_qos_profile_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt history$LAYOUT = (OfInt)$LAYOUT.select(groupElement("history"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum rmw_qos_history_policy_e history
     * }
     */
    public static final OfInt history$layout() {
        return history$LAYOUT;
    }

    private static final long history$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum rmw_qos_history_policy_e history
     * }
     */
    public static final long history$offset() {
        return history$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum rmw_qos_history_policy_e history
     * }
     */
    public static int history(MemorySegment struct) {
        return struct.get(history$LAYOUT, history$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum rmw_qos_history_policy_e history
     * }
     */
    public static void history(MemorySegment struct, int fieldValue) {
        struct.set(history$LAYOUT, history$OFFSET, fieldValue);
    }

    private static final OfLong depth$LAYOUT = (OfLong)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final OfLong depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static long depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static void depth(MemorySegment struct, long fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final OfInt reliability$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reliability"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum rmw_qos_reliability_policy_e reliability
     * }
     */
    public static final OfInt reliability$layout() {
        return reliability$LAYOUT;
    }

    private static final long reliability$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum rmw_qos_reliability_policy_e reliability
     * }
     */
    public static final long reliability$offset() {
        return reliability$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum rmw_qos_reliability_policy_e reliability
     * }
     */
    public static int reliability(MemorySegment struct) {
        return struct.get(reliability$LAYOUT, reliability$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum rmw_qos_reliability_policy_e reliability
     * }
     */
    public static void reliability(MemorySegment struct, int fieldValue) {
        struct.set(reliability$LAYOUT, reliability$OFFSET, fieldValue);
    }

    private static final OfInt durability$LAYOUT = (OfInt)$LAYOUT.select(groupElement("durability"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum rmw_qos_durability_policy_e durability
     * }
     */
    public static final OfInt durability$layout() {
        return durability$LAYOUT;
    }

    private static final long durability$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum rmw_qos_durability_policy_e durability
     * }
     */
    public static final long durability$offset() {
        return durability$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum rmw_qos_durability_policy_e durability
     * }
     */
    public static int durability(MemorySegment struct) {
        return struct.get(durability$LAYOUT, durability$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum rmw_qos_durability_policy_e durability
     * }
     */
    public static void durability(MemorySegment struct, int fieldValue) {
        struct.set(durability$LAYOUT, durability$OFFSET, fieldValue);
    }

    private static final GroupLayout deadline$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("deadline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct rmw_time_s deadline
     * }
     */
    public static final GroupLayout deadline$layout() {
        return deadline$LAYOUT;
    }

    private static final long deadline$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct rmw_time_s deadline
     * }
     */
    public static final long deadline$offset() {
        return deadline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct rmw_time_s deadline
     * }
     */
    public static MemorySegment deadline(MemorySegment struct) {
        return struct.asSlice(deadline$OFFSET, deadline$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct rmw_time_s deadline
     * }
     */
    public static void deadline(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, deadline$OFFSET, deadline$LAYOUT.byteSize());
    }

    private static final GroupLayout lifespan$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lifespan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct rmw_time_s lifespan
     * }
     */
    public static final GroupLayout lifespan$layout() {
        return lifespan$LAYOUT;
    }

    private static final long lifespan$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct rmw_time_s lifespan
     * }
     */
    public static final long lifespan$offset() {
        return lifespan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct rmw_time_s lifespan
     * }
     */
    public static MemorySegment lifespan(MemorySegment struct) {
        return struct.asSlice(lifespan$OFFSET, lifespan$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct rmw_time_s lifespan
     * }
     */
    public static void lifespan(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lifespan$OFFSET, lifespan$LAYOUT.byteSize());
    }

    private static final OfInt liveliness$LAYOUT = (OfInt)$LAYOUT.select(groupElement("liveliness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum rmw_qos_liveliness_policy_e liveliness
     * }
     */
    public static final OfInt liveliness$layout() {
        return liveliness$LAYOUT;
    }

    private static final long liveliness$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum rmw_qos_liveliness_policy_e liveliness
     * }
     */
    public static final long liveliness$offset() {
        return liveliness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum rmw_qos_liveliness_policy_e liveliness
     * }
     */
    public static int liveliness(MemorySegment struct) {
        return struct.get(liveliness$LAYOUT, liveliness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum rmw_qos_liveliness_policy_e liveliness
     * }
     */
    public static void liveliness(MemorySegment struct, int fieldValue) {
        struct.set(liveliness$LAYOUT, liveliness$OFFSET, fieldValue);
    }

    private static final GroupLayout liveliness_lease_duration$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("liveliness_lease_duration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct rmw_time_s liveliness_lease_duration
     * }
     */
    public static final GroupLayout liveliness_lease_duration$layout() {
        return liveliness_lease_duration$LAYOUT;
    }

    private static final long liveliness_lease_duration$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct rmw_time_s liveliness_lease_duration
     * }
     */
    public static final long liveliness_lease_duration$offset() {
        return liveliness_lease_duration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct rmw_time_s liveliness_lease_duration
     * }
     */
    public static MemorySegment liveliness_lease_duration(MemorySegment struct) {
        return struct.asSlice(liveliness_lease_duration$OFFSET, liveliness_lease_duration$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct rmw_time_s liveliness_lease_duration
     * }
     */
    public static void liveliness_lease_duration(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, liveliness_lease_duration$OFFSET, liveliness_lease_duration$LAYOUT.byteSize());
    }

    private static final OfBoolean avoid_ros_namespace_conventions$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("avoid_ros_namespace_conventions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool avoid_ros_namespace_conventions
     * }
     */
    public static final OfBoolean avoid_ros_namespace_conventions$layout() {
        return avoid_ros_namespace_conventions$LAYOUT;
    }

    private static final long avoid_ros_namespace_conventions$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool avoid_ros_namespace_conventions
     * }
     */
    public static final long avoid_ros_namespace_conventions$offset() {
        return avoid_ros_namespace_conventions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool avoid_ros_namespace_conventions
     * }
     */
    public static boolean avoid_ros_namespace_conventions(MemorySegment struct) {
        return struct.get(avoid_ros_namespace_conventions$LAYOUT, avoid_ros_namespace_conventions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool avoid_ros_namespace_conventions
     * }
     */
    public static void avoid_ros_namespace_conventions(MemorySegment struct, boolean fieldValue) {
        struct.set(avoid_ros_namespace_conventions$LAYOUT, avoid_ros_namespace_conventions$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

