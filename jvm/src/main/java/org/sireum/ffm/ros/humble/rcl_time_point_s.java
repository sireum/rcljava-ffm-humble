// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_time_point_s {
 *     rcl_time_point_value_t nanoseconds;
 *     rcl_clock_type_t clock_type;
 * }
 * }
 */
public class rcl_time_point_s {

    rcl_time_point_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_LONG.withName("nanoseconds"),
        gen_h.C_INT.withName("clock_type"),
        MemoryLayout.paddingLayout(4)
    ).withName("rcl_time_point_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong nanoseconds$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nanoseconds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_time_point_value_t nanoseconds
     * }
     */
    public static final OfLong nanoseconds$layout() {
        return nanoseconds$LAYOUT;
    }

    private static final long nanoseconds$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_time_point_value_t nanoseconds
     * }
     */
    public static final long nanoseconds$offset() {
        return nanoseconds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_time_point_value_t nanoseconds
     * }
     */
    public static long nanoseconds(MemorySegment struct) {
        return struct.get(nanoseconds$LAYOUT, nanoseconds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_time_point_value_t nanoseconds
     * }
     */
    public static void nanoseconds(MemorySegment struct, long fieldValue) {
        struct.set(nanoseconds$LAYOUT, nanoseconds$OFFSET, fieldValue);
    }

    private static final OfInt clock_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clock_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_clock_type_t clock_type
     * }
     */
    public static final OfInt clock_type$layout() {
        return clock_type$LAYOUT;
    }

    private static final long clock_type$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_clock_type_t clock_type
     * }
     */
    public static final long clock_type$offset() {
        return clock_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_clock_type_t clock_type
     * }
     */
    public static int clock_type(MemorySegment struct) {
        return struct.get(clock_type$LAYOUT, clock_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_clock_type_t clock_type
     * }
     */
    public static void clock_type(MemorySegment struct, int fieldValue) {
        struct.set(clock_type$LAYOUT, clock_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

