// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rmw_subscription_content_filter_options_s {
 *     char *filter_expression;
 *     rcutils_string_array_t expression_parameters;
 * }
 * }
 */
public class rmw_subscription_content_filter_options_s {

    rmw_subscription_content_filter_options_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("filter_expression"),
        rcutils_string_array_s.layout().withName("expression_parameters")
    ).withName("rmw_subscription_content_filter_options_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout filter_expression$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filter_expression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *filter_expression
     * }
     */
    public static final AddressLayout filter_expression$layout() {
        return filter_expression$LAYOUT;
    }

    private static final long filter_expression$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *filter_expression
     * }
     */
    public static final long filter_expression$offset() {
        return filter_expression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *filter_expression
     * }
     */
    public static MemorySegment filter_expression(MemorySegment struct) {
        return struct.get(filter_expression$LAYOUT, filter_expression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *filter_expression
     * }
     */
    public static void filter_expression(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filter_expression$LAYOUT, filter_expression$OFFSET, fieldValue);
    }

    private static final GroupLayout expression_parameters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("expression_parameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcutils_string_array_t expression_parameters
     * }
     */
    public static final GroupLayout expression_parameters$layout() {
        return expression_parameters$LAYOUT;
    }

    private static final long expression_parameters$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcutils_string_array_t expression_parameters
     * }
     */
    public static final long expression_parameters$offset() {
        return expression_parameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcutils_string_array_t expression_parameters
     * }
     */
    public static MemorySegment expression_parameters(MemorySegment struct) {
        return struct.asSlice(expression_parameters$OFFSET, expression_parameters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcutils_string_array_t expression_parameters
     * }
     */
    public static void expression_parameters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, expression_parameters$OFFSET, expression_parameters$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

