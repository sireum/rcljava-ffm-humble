// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class gen_h extends gen_h_1 {

    gen_h() {
        // Should not be called directly
    }

    private static class rmw_deserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_deserialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_deserialize(const rmw_serialized_message_t *serialized_message, const rosidl_message_type_support_t *type_support, void *ros_message)
     * }
     */
    public static FunctionDescriptor rmw_deserialize$descriptor() {
        return rmw_deserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_deserialize(const rmw_serialized_message_t *serialized_message, const rosidl_message_type_support_t *type_support, void *ros_message)
     * }
     */
    public static MethodHandle rmw_deserialize$handle() {
        return rmw_deserialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_deserialize(const rmw_serialized_message_t *serialized_message, const rosidl_message_type_support_t *type_support, void *ros_message)
     * }
     */
    public static int rmw_deserialize(MemorySegment serialized_message, MemorySegment type_support, MemorySegment ros_message) {
        var mh$ = rmw_deserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_deserialize", serialized_message, type_support, ros_message);
            }
            return (int)mh$.invokeExact(serialized_message, type_support, ros_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_init_subscription_allocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_init_subscription_allocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_init_subscription_allocation(const rosidl_message_type_support_t *type_support, const rosidl_runtime_c__Sequence__bound *message_bounds, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_init_subscription_allocation$descriptor() {
        return rmw_init_subscription_allocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_init_subscription_allocation(const rosidl_message_type_support_t *type_support, const rosidl_runtime_c__Sequence__bound *message_bounds, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_init_subscription_allocation$handle() {
        return rmw_init_subscription_allocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_init_subscription_allocation(const rosidl_message_type_support_t *type_support, const rosidl_runtime_c__Sequence__bound *message_bounds, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_init_subscription_allocation(MemorySegment type_support, MemorySegment message_bounds, MemorySegment allocation) {
        var mh$ = rmw_init_subscription_allocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_init_subscription_allocation", type_support, message_bounds, allocation);
            }
            return (int)mh$.invokeExact(type_support, message_bounds, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_fini_subscription_allocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_fini_subscription_allocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_fini_subscription_allocation(rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_fini_subscription_allocation$descriptor() {
        return rmw_fini_subscription_allocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_fini_subscription_allocation(rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_fini_subscription_allocation$handle() {
        return rmw_fini_subscription_allocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_fini_subscription_allocation(rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_fini_subscription_allocation(MemorySegment allocation) {
        var mh$ = rmw_fini_subscription_allocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_fini_subscription_allocation", allocation);
            }
            return (int)mh$.invokeExact(allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_create_subscription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_create_subscription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_subscription_t *rmw_create_subscription(const rmw_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_policies, const rmw_subscription_options_t *subscription_options)
     * }
     */
    public static FunctionDescriptor rmw_create_subscription$descriptor() {
        return rmw_create_subscription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_subscription_t *rmw_create_subscription(const rmw_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_policies, const rmw_subscription_options_t *subscription_options)
     * }
     */
    public static MethodHandle rmw_create_subscription$handle() {
        return rmw_create_subscription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_subscription_t *rmw_create_subscription(const rmw_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_policies, const rmw_subscription_options_t *subscription_options)
     * }
     */
    public static MemorySegment rmw_create_subscription(MemorySegment node, MemorySegment type_support, MemorySegment topic_name, MemorySegment qos_policies, MemorySegment subscription_options) {
        var mh$ = rmw_create_subscription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_create_subscription", node, type_support, topic_name, qos_policies, subscription_options);
            }
            return (MemorySegment)mh$.invokeExact(node, type_support, topic_name, qos_policies, subscription_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_destroy_subscription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_destroy_subscription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_subscription(rmw_node_t *node, rmw_subscription_t *subscription)
     * }
     */
    public static FunctionDescriptor rmw_destroy_subscription$descriptor() {
        return rmw_destroy_subscription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_subscription(rmw_node_t *node, rmw_subscription_t *subscription)
     * }
     */
    public static MethodHandle rmw_destroy_subscription$handle() {
        return rmw_destroy_subscription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_subscription(rmw_node_t *node, rmw_subscription_t *subscription)
     * }
     */
    public static int rmw_destroy_subscription(MemorySegment node, MemorySegment subscription) {
        var mh$ = rmw_destroy_subscription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_destroy_subscription", node, subscription);
            }
            return (int)mh$.invokeExact(node, subscription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_subscription_count_matched_publishers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_subscription_count_matched_publishers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_count_matched_publishers(const rmw_subscription_t *subscription, size_t *publisher_count)
     * }
     */
    public static FunctionDescriptor rmw_subscription_count_matched_publishers$descriptor() {
        return rmw_subscription_count_matched_publishers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_count_matched_publishers(const rmw_subscription_t *subscription, size_t *publisher_count)
     * }
     */
    public static MethodHandle rmw_subscription_count_matched_publishers$handle() {
        return rmw_subscription_count_matched_publishers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_count_matched_publishers(const rmw_subscription_t *subscription, size_t *publisher_count)
     * }
     */
    public static int rmw_subscription_count_matched_publishers(MemorySegment subscription, MemorySegment publisher_count) {
        var mh$ = rmw_subscription_count_matched_publishers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_subscription_count_matched_publishers", subscription, publisher_count);
            }
            return (int)mh$.invokeExact(subscription, publisher_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_subscription_get_actual_qos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_subscription_get_actual_qos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_get_actual_qos(const rmw_subscription_t *subscription, rmw_qos_profile_t *qos)
     * }
     */
    public static FunctionDescriptor rmw_subscription_get_actual_qos$descriptor() {
        return rmw_subscription_get_actual_qos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_get_actual_qos(const rmw_subscription_t *subscription, rmw_qos_profile_t *qos)
     * }
     */
    public static MethodHandle rmw_subscription_get_actual_qos$handle() {
        return rmw_subscription_get_actual_qos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_get_actual_qos(const rmw_subscription_t *subscription, rmw_qos_profile_t *qos)
     * }
     */
    public static int rmw_subscription_get_actual_qos(MemorySegment subscription, MemorySegment qos) {
        var mh$ = rmw_subscription_get_actual_qos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_subscription_get_actual_qos", subscription, qos);
            }
            return (int)mh$.invokeExact(subscription, qos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_subscription_set_content_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_subscription_set_content_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_set_content_filter(rmw_subscription_t *subscription, const rmw_subscription_content_filter_options_t *options)
     * }
     */
    public static FunctionDescriptor rmw_subscription_set_content_filter$descriptor() {
        return rmw_subscription_set_content_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_set_content_filter(rmw_subscription_t *subscription, const rmw_subscription_content_filter_options_t *options)
     * }
     */
    public static MethodHandle rmw_subscription_set_content_filter$handle() {
        return rmw_subscription_set_content_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_set_content_filter(rmw_subscription_t *subscription, const rmw_subscription_content_filter_options_t *options)
     * }
     */
    public static int rmw_subscription_set_content_filter(MemorySegment subscription, MemorySegment options) {
        var mh$ = rmw_subscription_set_content_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_subscription_set_content_filter", subscription, options);
            }
            return (int)mh$.invokeExact(subscription, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_subscription_get_content_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_subscription_get_content_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_get_content_filter(const rmw_subscription_t *subscription, rcutils_allocator_t *allocator, rmw_subscription_content_filter_options_t *options)
     * }
     */
    public static FunctionDescriptor rmw_subscription_get_content_filter$descriptor() {
        return rmw_subscription_get_content_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_get_content_filter(const rmw_subscription_t *subscription, rcutils_allocator_t *allocator, rmw_subscription_content_filter_options_t *options)
     * }
     */
    public static MethodHandle rmw_subscription_get_content_filter$handle() {
        return rmw_subscription_get_content_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_get_content_filter(const rmw_subscription_t *subscription, rcutils_allocator_t *allocator, rmw_subscription_content_filter_options_t *options)
     * }
     */
    public static int rmw_subscription_get_content_filter(MemorySegment subscription, MemorySegment allocator, MemorySegment options) {
        var mh$ = rmw_subscription_get_content_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_subscription_get_content_filter", subscription, allocator, options);
            }
            return (int)mh$.invokeExact(subscription, allocator, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take(const rmw_subscription_t *subscription, void *ros_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_take$descriptor() {
        return rmw_take.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take(const rmw_subscription_t *subscription, void *ros_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_take$handle() {
        return rmw_take.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take(const rmw_subscription_t *subscription, void *ros_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_take(MemorySegment subscription, MemorySegment ros_message, MemorySegment taken, MemorySegment allocation) {
        var mh$ = rmw_take.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take", subscription, ros_message, taken, allocation);
            }
            return (int)mh$.invokeExact(subscription, ros_message, taken, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_with_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_with_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_with_info(const rmw_subscription_t *subscription, void *ros_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_take_with_info$descriptor() {
        return rmw_take_with_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_with_info(const rmw_subscription_t *subscription, void *ros_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_take_with_info$handle() {
        return rmw_take_with_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_with_info(const rmw_subscription_t *subscription, void *ros_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_take_with_info(MemorySegment subscription, MemorySegment ros_message, MemorySegment taken, MemorySegment message_info, MemorySegment allocation) {
        var mh$ = rmw_take_with_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_with_info", subscription, ros_message, taken, message_info, allocation);
            }
            return (int)mh$.invokeExact(subscription, ros_message, taken, message_info, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_sequence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_sequence(const rmw_subscription_t *subscription, size_t count, rmw_message_sequence_t *message_sequence, rmw_message_info_sequence_t *message_info_sequence, size_t *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_take_sequence$descriptor() {
        return rmw_take_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_sequence(const rmw_subscription_t *subscription, size_t count, rmw_message_sequence_t *message_sequence, rmw_message_info_sequence_t *message_info_sequence, size_t *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_take_sequence$handle() {
        return rmw_take_sequence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_sequence(const rmw_subscription_t *subscription, size_t count, rmw_message_sequence_t *message_sequence, rmw_message_info_sequence_t *message_info_sequence, size_t *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_take_sequence(MemorySegment subscription, long count, MemorySegment message_sequence, MemorySegment message_info_sequence, MemorySegment taken, MemorySegment allocation) {
        var mh$ = rmw_take_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_sequence", subscription, count, message_sequence, message_info_sequence, taken, allocation);
            }
            return (int)mh$.invokeExact(subscription, count, message_sequence, message_info_sequence, taken, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_serialized_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_serialized_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_serialized_message(const rmw_subscription_t *subscription, rmw_serialized_message_t *serialized_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_take_serialized_message$descriptor() {
        return rmw_take_serialized_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_serialized_message(const rmw_subscription_t *subscription, rmw_serialized_message_t *serialized_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_take_serialized_message$handle() {
        return rmw_take_serialized_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_serialized_message(const rmw_subscription_t *subscription, rmw_serialized_message_t *serialized_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_take_serialized_message(MemorySegment subscription, MemorySegment serialized_message, MemorySegment taken, MemorySegment allocation) {
        var mh$ = rmw_take_serialized_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_serialized_message", subscription, serialized_message, taken, allocation);
            }
            return (int)mh$.invokeExact(subscription, serialized_message, taken, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_serialized_message_with_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_serialized_message_with_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_serialized_message_with_info(const rmw_subscription_t *subscription, rmw_serialized_message_t *serialized_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_take_serialized_message_with_info$descriptor() {
        return rmw_take_serialized_message_with_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_serialized_message_with_info(const rmw_subscription_t *subscription, rmw_serialized_message_t *serialized_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_take_serialized_message_with_info$handle() {
        return rmw_take_serialized_message_with_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_serialized_message_with_info(const rmw_subscription_t *subscription, rmw_serialized_message_t *serialized_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_take_serialized_message_with_info(MemorySegment subscription, MemorySegment serialized_message, MemorySegment taken, MemorySegment message_info, MemorySegment allocation) {
        var mh$ = rmw_take_serialized_message_with_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_serialized_message_with_info", subscription, serialized_message, taken, message_info, allocation);
            }
            return (int)mh$.invokeExact(subscription, serialized_message, taken, message_info, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_loaned_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_loaned_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_loaned_message(const rmw_subscription_t *subscription, void **loaned_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_take_loaned_message$descriptor() {
        return rmw_take_loaned_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_loaned_message(const rmw_subscription_t *subscription, void **loaned_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_take_loaned_message$handle() {
        return rmw_take_loaned_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_loaned_message(const rmw_subscription_t *subscription, void **loaned_message, bool *taken, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_take_loaned_message(MemorySegment subscription, MemorySegment loaned_message, MemorySegment taken, MemorySegment allocation) {
        var mh$ = rmw_take_loaned_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_loaned_message", subscription, loaned_message, taken, allocation);
            }
            return (int)mh$.invokeExact(subscription, loaned_message, taken, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_loaned_message_with_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_loaned_message_with_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_loaned_message_with_info(const rmw_subscription_t *subscription, void **loaned_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static FunctionDescriptor rmw_take_loaned_message_with_info$descriptor() {
        return rmw_take_loaned_message_with_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_loaned_message_with_info(const rmw_subscription_t *subscription, void **loaned_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static MethodHandle rmw_take_loaned_message_with_info$handle() {
        return rmw_take_loaned_message_with_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_loaned_message_with_info(const rmw_subscription_t *subscription, void **loaned_message, bool *taken, rmw_message_info_t *message_info, rmw_subscription_allocation_t *allocation)
     * }
     */
    public static int rmw_take_loaned_message_with_info(MemorySegment subscription, MemorySegment loaned_message, MemorySegment taken, MemorySegment message_info, MemorySegment allocation) {
        var mh$ = rmw_take_loaned_message_with_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_loaned_message_with_info", subscription, loaned_message, taken, message_info, allocation);
            }
            return (int)mh$.invokeExact(subscription, loaned_message, taken, message_info, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_return_loaned_message_from_subscription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_return_loaned_message_from_subscription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_return_loaned_message_from_subscription(const rmw_subscription_t *subscription, void *loaned_message)
     * }
     */
    public static FunctionDescriptor rmw_return_loaned_message_from_subscription$descriptor() {
        return rmw_return_loaned_message_from_subscription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_return_loaned_message_from_subscription(const rmw_subscription_t *subscription, void *loaned_message)
     * }
     */
    public static MethodHandle rmw_return_loaned_message_from_subscription$handle() {
        return rmw_return_loaned_message_from_subscription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_return_loaned_message_from_subscription(const rmw_subscription_t *subscription, void *loaned_message)
     * }
     */
    public static int rmw_return_loaned_message_from_subscription(MemorySegment subscription, MemorySegment loaned_message) {
        var mh$ = rmw_return_loaned_message_from_subscription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_return_loaned_message_from_subscription", subscription, loaned_message);
            }
            return (int)mh$.invokeExact(subscription, loaned_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_create_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_create_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_client_t *rmw_create_client(const rmw_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_policies)
     * }
     */
    public static FunctionDescriptor rmw_create_client$descriptor() {
        return rmw_create_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_client_t *rmw_create_client(const rmw_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_policies)
     * }
     */
    public static MethodHandle rmw_create_client$handle() {
        return rmw_create_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_client_t *rmw_create_client(const rmw_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_policies)
     * }
     */
    public static MemorySegment rmw_create_client(MemorySegment node, MemorySegment type_support, MemorySegment service_name, MemorySegment qos_policies) {
        var mh$ = rmw_create_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_create_client", node, type_support, service_name, qos_policies);
            }
            return (MemorySegment)mh$.invokeExact(node, type_support, service_name, qos_policies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_destroy_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_destroy_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_client(rmw_node_t *node, rmw_client_t *client)
     * }
     */
    public static FunctionDescriptor rmw_destroy_client$descriptor() {
        return rmw_destroy_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_client(rmw_node_t *node, rmw_client_t *client)
     * }
     */
    public static MethodHandle rmw_destroy_client$handle() {
        return rmw_destroy_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_client(rmw_node_t *node, rmw_client_t *client)
     * }
     */
    public static int rmw_destroy_client(MemorySegment node, MemorySegment client) {
        var mh$ = rmw_destroy_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_destroy_client", node, client);
            }
            return (int)mh$.invokeExact(node, client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_send_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_send_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_send_request(const rmw_client_t *client, const void *ros_request, int64_t *sequence_id)
     * }
     */
    public static FunctionDescriptor rmw_send_request$descriptor() {
        return rmw_send_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_send_request(const rmw_client_t *client, const void *ros_request, int64_t *sequence_id)
     * }
     */
    public static MethodHandle rmw_send_request$handle() {
        return rmw_send_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_send_request(const rmw_client_t *client, const void *ros_request, int64_t *sequence_id)
     * }
     */
    public static int rmw_send_request(MemorySegment client, MemorySegment ros_request, MemorySegment sequence_id) {
        var mh$ = rmw_send_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_send_request", client, ros_request, sequence_id);
            }
            return (int)mh$.invokeExact(client, ros_request, sequence_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_response(const rmw_client_t *client, rmw_service_info_t *request_header, void *ros_response, bool *taken)
     * }
     */
    public static FunctionDescriptor rmw_take_response$descriptor() {
        return rmw_take_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_response(const rmw_client_t *client, rmw_service_info_t *request_header, void *ros_response, bool *taken)
     * }
     */
    public static MethodHandle rmw_take_response$handle() {
        return rmw_take_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_response(const rmw_client_t *client, rmw_service_info_t *request_header, void *ros_response, bool *taken)
     * }
     */
    public static int rmw_take_response(MemorySegment client, MemorySegment request_header, MemorySegment ros_response, MemorySegment taken) {
        var mh$ = rmw_take_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_response", client, request_header, ros_response, taken);
            }
            return (int)mh$.invokeExact(client, request_header, ros_response, taken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_client_request_publisher_get_actual_qos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_client_request_publisher_get_actual_qos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_request_publisher_get_actual_qos(const rmw_client_t *client, rmw_qos_profile_t *qos)
     * }
     */
    public static FunctionDescriptor rmw_client_request_publisher_get_actual_qos$descriptor() {
        return rmw_client_request_publisher_get_actual_qos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_request_publisher_get_actual_qos(const rmw_client_t *client, rmw_qos_profile_t *qos)
     * }
     */
    public static MethodHandle rmw_client_request_publisher_get_actual_qos$handle() {
        return rmw_client_request_publisher_get_actual_qos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_request_publisher_get_actual_qos(const rmw_client_t *client, rmw_qos_profile_t *qos)
     * }
     */
    public static int rmw_client_request_publisher_get_actual_qos(MemorySegment client, MemorySegment qos) {
        var mh$ = rmw_client_request_publisher_get_actual_qos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_client_request_publisher_get_actual_qos", client, qos);
            }
            return (int)mh$.invokeExact(client, qos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_client_response_subscription_get_actual_qos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_client_response_subscription_get_actual_qos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_response_subscription_get_actual_qos(const rmw_client_t *client, rmw_qos_profile_t *qos)
     * }
     */
    public static FunctionDescriptor rmw_client_response_subscription_get_actual_qos$descriptor() {
        return rmw_client_response_subscription_get_actual_qos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_response_subscription_get_actual_qos(const rmw_client_t *client, rmw_qos_profile_t *qos)
     * }
     */
    public static MethodHandle rmw_client_response_subscription_get_actual_qos$handle() {
        return rmw_client_response_subscription_get_actual_qos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_response_subscription_get_actual_qos(const rmw_client_t *client, rmw_qos_profile_t *qos)
     * }
     */
    public static int rmw_client_response_subscription_get_actual_qos(MemorySegment client, MemorySegment qos) {
        var mh$ = rmw_client_response_subscription_get_actual_qos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_client_response_subscription_get_actual_qos", client, qos);
            }
            return (int)mh$.invokeExact(client, qos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_create_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_create_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_service_t *rmw_create_service(const rmw_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static FunctionDescriptor rmw_create_service$descriptor() {
        return rmw_create_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_service_t *rmw_create_service(const rmw_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static MethodHandle rmw_create_service$handle() {
        return rmw_create_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_service_t *rmw_create_service(const rmw_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static MemorySegment rmw_create_service(MemorySegment node, MemorySegment type_support, MemorySegment service_name, MemorySegment qos_profile) {
        var mh$ = rmw_create_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_create_service", node, type_support, service_name, qos_profile);
            }
            return (MemorySegment)mh$.invokeExact(node, type_support, service_name, qos_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_destroy_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_destroy_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_service(rmw_node_t *node, rmw_service_t *service)
     * }
     */
    public static FunctionDescriptor rmw_destroy_service$descriptor() {
        return rmw_destroy_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_service(rmw_node_t *node, rmw_service_t *service)
     * }
     */
    public static MethodHandle rmw_destroy_service$handle() {
        return rmw_destroy_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_service(rmw_node_t *node, rmw_service_t *service)
     * }
     */
    public static int rmw_destroy_service(MemorySegment node, MemorySegment service) {
        var mh$ = rmw_destroy_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_destroy_service", node, service);
            }
            return (int)mh$.invokeExact(node, service);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_take_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_take_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_request(const rmw_service_t *service, rmw_service_info_t *request_header, void *ros_request, bool *taken)
     * }
     */
    public static FunctionDescriptor rmw_take_request$descriptor() {
        return rmw_take_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_request(const rmw_service_t *service, rmw_service_info_t *request_header, void *ros_request, bool *taken)
     * }
     */
    public static MethodHandle rmw_take_request$handle() {
        return rmw_take_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_take_request(const rmw_service_t *service, rmw_service_info_t *request_header, void *ros_request, bool *taken)
     * }
     */
    public static int rmw_take_request(MemorySegment service, MemorySegment request_header, MemorySegment ros_request, MemorySegment taken) {
        var mh$ = rmw_take_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_take_request", service, request_header, ros_request, taken);
            }
            return (int)mh$.invokeExact(service, request_header, ros_request, taken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_send_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_send_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_send_response(const rmw_service_t *service, rmw_request_id_t *request_header, void *ros_response)
     * }
     */
    public static FunctionDescriptor rmw_send_response$descriptor() {
        return rmw_send_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_send_response(const rmw_service_t *service, rmw_request_id_t *request_header, void *ros_response)
     * }
     */
    public static MethodHandle rmw_send_response$handle() {
        return rmw_send_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_send_response(const rmw_service_t *service, rmw_request_id_t *request_header, void *ros_response)
     * }
     */
    public static int rmw_send_response(MemorySegment service, MemorySegment request_header, MemorySegment ros_response) {
        var mh$ = rmw_send_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_send_response", service, request_header, ros_response);
            }
            return (int)mh$.invokeExact(service, request_header, ros_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_service_request_subscription_get_actual_qos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_service_request_subscription_get_actual_qos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_request_subscription_get_actual_qos(const rmw_service_t *service, rmw_qos_profile_t *qos)
     * }
     */
    public static FunctionDescriptor rmw_service_request_subscription_get_actual_qos$descriptor() {
        return rmw_service_request_subscription_get_actual_qos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_request_subscription_get_actual_qos(const rmw_service_t *service, rmw_qos_profile_t *qos)
     * }
     */
    public static MethodHandle rmw_service_request_subscription_get_actual_qos$handle() {
        return rmw_service_request_subscription_get_actual_qos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_request_subscription_get_actual_qos(const rmw_service_t *service, rmw_qos_profile_t *qos)
     * }
     */
    public static int rmw_service_request_subscription_get_actual_qos(MemorySegment service, MemorySegment qos) {
        var mh$ = rmw_service_request_subscription_get_actual_qos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_service_request_subscription_get_actual_qos", service, qos);
            }
            return (int)mh$.invokeExact(service, qos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_service_response_publisher_get_actual_qos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_service_response_publisher_get_actual_qos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_response_publisher_get_actual_qos(const rmw_service_t *service, rmw_qos_profile_t *qos)
     * }
     */
    public static FunctionDescriptor rmw_service_response_publisher_get_actual_qos$descriptor() {
        return rmw_service_response_publisher_get_actual_qos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_response_publisher_get_actual_qos(const rmw_service_t *service, rmw_qos_profile_t *qos)
     * }
     */
    public static MethodHandle rmw_service_response_publisher_get_actual_qos$handle() {
        return rmw_service_response_publisher_get_actual_qos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_response_publisher_get_actual_qos(const rmw_service_t *service, rmw_qos_profile_t *qos)
     * }
     */
    public static int rmw_service_response_publisher_get_actual_qos(MemorySegment service, MemorySegment qos) {
        var mh$ = rmw_service_response_publisher_get_actual_qos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_service_response_publisher_get_actual_qos", service, qos);
            }
            return (int)mh$.invokeExact(service, qos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_create_guard_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_create_guard_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_guard_condition_t *rmw_create_guard_condition(rmw_context_t *context)
     * }
     */
    public static FunctionDescriptor rmw_create_guard_condition$descriptor() {
        return rmw_create_guard_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_guard_condition_t *rmw_create_guard_condition(rmw_context_t *context)
     * }
     */
    public static MethodHandle rmw_create_guard_condition$handle() {
        return rmw_create_guard_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_guard_condition_t *rmw_create_guard_condition(rmw_context_t *context)
     * }
     */
    public static MemorySegment rmw_create_guard_condition(MemorySegment context) {
        var mh$ = rmw_create_guard_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_create_guard_condition", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_destroy_guard_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_destroy_guard_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_guard_condition(rmw_guard_condition_t *guard_condition)
     * }
     */
    public static FunctionDescriptor rmw_destroy_guard_condition$descriptor() {
        return rmw_destroy_guard_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_guard_condition(rmw_guard_condition_t *guard_condition)
     * }
     */
    public static MethodHandle rmw_destroy_guard_condition$handle() {
        return rmw_destroy_guard_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_guard_condition(rmw_guard_condition_t *guard_condition)
     * }
     */
    public static int rmw_destroy_guard_condition(MemorySegment guard_condition) {
        var mh$ = rmw_destroy_guard_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_destroy_guard_condition", guard_condition);
            }
            return (int)mh$.invokeExact(guard_condition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_trigger_guard_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_trigger_guard_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_trigger_guard_condition(const rmw_guard_condition_t *guard_condition)
     * }
     */
    public static FunctionDescriptor rmw_trigger_guard_condition$descriptor() {
        return rmw_trigger_guard_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_trigger_guard_condition(const rmw_guard_condition_t *guard_condition)
     * }
     */
    public static MethodHandle rmw_trigger_guard_condition$handle() {
        return rmw_trigger_guard_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_trigger_guard_condition(const rmw_guard_condition_t *guard_condition)
     * }
     */
    public static int rmw_trigger_guard_condition(MemorySegment guard_condition) {
        var mh$ = rmw_trigger_guard_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_trigger_guard_condition", guard_condition);
            }
            return (int)mh$.invokeExact(guard_condition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_create_wait_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_create_wait_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_wait_set_t *rmw_create_wait_set(rmw_context_t *context, size_t max_conditions)
     * }
     */
    public static FunctionDescriptor rmw_create_wait_set$descriptor() {
        return rmw_create_wait_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_wait_set_t *rmw_create_wait_set(rmw_context_t *context, size_t max_conditions)
     * }
     */
    public static MethodHandle rmw_create_wait_set$handle() {
        return rmw_create_wait_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_wait_set_t *rmw_create_wait_set(rmw_context_t *context, size_t max_conditions)
     * }
     */
    public static MemorySegment rmw_create_wait_set(MemorySegment context, long max_conditions) {
        var mh$ = rmw_create_wait_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_create_wait_set", context, max_conditions);
            }
            return (MemorySegment)mh$.invokeExact(context, max_conditions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_destroy_wait_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_destroy_wait_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_wait_set(rmw_wait_set_t *wait_set)
     * }
     */
    public static FunctionDescriptor rmw_destroy_wait_set$descriptor() {
        return rmw_destroy_wait_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_wait_set(rmw_wait_set_t *wait_set)
     * }
     */
    public static MethodHandle rmw_destroy_wait_set$handle() {
        return rmw_destroy_wait_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_destroy_wait_set(rmw_wait_set_t *wait_set)
     * }
     */
    public static int rmw_destroy_wait_set(MemorySegment wait_set) {
        var mh$ = rmw_destroy_wait_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_destroy_wait_set", wait_set);
            }
            return (int)mh$.invokeExact(wait_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_wait(rmw_subscriptions_t *subscriptions, rmw_guard_conditions_t *guard_conditions, rmw_services_t *services, rmw_clients_t *clients, rmw_events_t *events, rmw_wait_set_t *wait_set, const rmw_time_t *wait_timeout)
     * }
     */
    public static FunctionDescriptor rmw_wait$descriptor() {
        return rmw_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_wait(rmw_subscriptions_t *subscriptions, rmw_guard_conditions_t *guard_conditions, rmw_services_t *services, rmw_clients_t *clients, rmw_events_t *events, rmw_wait_set_t *wait_set, const rmw_time_t *wait_timeout)
     * }
     */
    public static MethodHandle rmw_wait$handle() {
        return rmw_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_wait(rmw_subscriptions_t *subscriptions, rmw_guard_conditions_t *guard_conditions, rmw_services_t *services, rmw_clients_t *clients, rmw_events_t *events, rmw_wait_set_t *wait_set, const rmw_time_t *wait_timeout)
     * }
     */
    public static int rmw_wait(MemorySegment subscriptions, MemorySegment guard_conditions, MemorySegment services, MemorySegment clients, MemorySegment events, MemorySegment wait_set, MemorySegment wait_timeout) {
        var mh$ = rmw_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_wait", subscriptions, guard_conditions, services, clients, events, wait_set, wait_timeout);
            }
            return (int)mh$.invokeExact(subscriptions, guard_conditions, services, clients, events, wait_set, wait_timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_get_node_names {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_get_node_names"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_node_names(const rmw_node_t *node, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces)
     * }
     */
    public static FunctionDescriptor rmw_get_node_names$descriptor() {
        return rmw_get_node_names.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_node_names(const rmw_node_t *node, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces)
     * }
     */
    public static MethodHandle rmw_get_node_names$handle() {
        return rmw_get_node_names.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_node_names(const rmw_node_t *node, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces)
     * }
     */
    public static int rmw_get_node_names(MemorySegment node, MemorySegment node_names, MemorySegment node_namespaces) {
        var mh$ = rmw_get_node_names.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_get_node_names", node, node_names, node_namespaces);
            }
            return (int)mh$.invokeExact(node, node_names, node_namespaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_get_node_names_with_enclaves {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_get_node_names_with_enclaves"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_node_names_with_enclaves(const rmw_node_t *node, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces, rcutils_string_array_t *enclaves)
     * }
     */
    public static FunctionDescriptor rmw_get_node_names_with_enclaves$descriptor() {
        return rmw_get_node_names_with_enclaves.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_node_names_with_enclaves(const rmw_node_t *node, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces, rcutils_string_array_t *enclaves)
     * }
     */
    public static MethodHandle rmw_get_node_names_with_enclaves$handle() {
        return rmw_get_node_names_with_enclaves.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_node_names_with_enclaves(const rmw_node_t *node, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces, rcutils_string_array_t *enclaves)
     * }
     */
    public static int rmw_get_node_names_with_enclaves(MemorySegment node, MemorySegment node_names, MemorySegment node_namespaces, MemorySegment enclaves) {
        var mh$ = rmw_get_node_names_with_enclaves.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_get_node_names_with_enclaves", node, node_names, node_namespaces, enclaves);
            }
            return (int)mh$.invokeExact(node, node_names, node_namespaces, enclaves);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_count_publishers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_count_publishers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_count_publishers(const rmw_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static FunctionDescriptor rmw_count_publishers$descriptor() {
        return rmw_count_publishers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_count_publishers(const rmw_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static MethodHandle rmw_count_publishers$handle() {
        return rmw_count_publishers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_count_publishers(const rmw_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static int rmw_count_publishers(MemorySegment node, MemorySegment topic_name, MemorySegment count) {
        var mh$ = rmw_count_publishers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_count_publishers", node, topic_name, count);
            }
            return (int)mh$.invokeExact(node, topic_name, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_count_subscribers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_count_subscribers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_count_subscribers(const rmw_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static FunctionDescriptor rmw_count_subscribers$descriptor() {
        return rmw_count_subscribers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_count_subscribers(const rmw_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static MethodHandle rmw_count_subscribers$handle() {
        return rmw_count_subscribers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_count_subscribers(const rmw_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static int rmw_count_subscribers(MemorySegment node, MemorySegment topic_name, MemorySegment count) {
        var mh$ = rmw_count_subscribers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_count_subscribers", node, topic_name, count);
            }
            return (int)mh$.invokeExact(node, topic_name, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_get_gid_for_publisher {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_get_gid_for_publisher"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_gid_for_publisher(const rmw_publisher_t *publisher, rmw_gid_t *gid)
     * }
     */
    public static FunctionDescriptor rmw_get_gid_for_publisher$descriptor() {
        return rmw_get_gid_for_publisher.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_gid_for_publisher(const rmw_publisher_t *publisher, rmw_gid_t *gid)
     * }
     */
    public static MethodHandle rmw_get_gid_for_publisher$handle() {
        return rmw_get_gid_for_publisher.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_gid_for_publisher(const rmw_publisher_t *publisher, rmw_gid_t *gid)
     * }
     */
    public static int rmw_get_gid_for_publisher(MemorySegment publisher, MemorySegment gid) {
        var mh$ = rmw_get_gid_for_publisher.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_get_gid_for_publisher", publisher, gid);
            }
            return (int)mh$.invokeExact(publisher, gid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_compare_gids_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_compare_gids_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_compare_gids_equal(const rmw_gid_t *gid1, const rmw_gid_t *gid2, bool *result)
     * }
     */
    public static FunctionDescriptor rmw_compare_gids_equal$descriptor() {
        return rmw_compare_gids_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_compare_gids_equal(const rmw_gid_t *gid1, const rmw_gid_t *gid2, bool *result)
     * }
     */
    public static MethodHandle rmw_compare_gids_equal$handle() {
        return rmw_compare_gids_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_compare_gids_equal(const rmw_gid_t *gid1, const rmw_gid_t *gid2, bool *result)
     * }
     */
    public static int rmw_compare_gids_equal(MemorySegment gid1, MemorySegment gid2, MemorySegment result) {
        var mh$ = rmw_compare_gids_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_compare_gids_equal", gid1, gid2, result);
            }
            return (int)mh$.invokeExact(gid1, gid2, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_service_server_is_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_service_server_is_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_server_is_available(const rmw_node_t *node, const rmw_client_t *client, bool *is_available)
     * }
     */
    public static FunctionDescriptor rmw_service_server_is_available$descriptor() {
        return rmw_service_server_is_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_server_is_available(const rmw_node_t *node, const rmw_client_t *client, bool *is_available)
     * }
     */
    public static MethodHandle rmw_service_server_is_available$handle() {
        return rmw_service_server_is_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_server_is_available(const rmw_node_t *node, const rmw_client_t *client, bool *is_available)
     * }
     */
    public static int rmw_service_server_is_available(MemorySegment node, MemorySegment client, MemorySegment is_available) {
        var mh$ = rmw_service_server_is_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_service_server_is_available", node, client, is_available);
            }
            return (int)mh$.invokeExact(node, client, is_available);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_set_log_severity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_set_log_severity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_set_log_severity(rmw_log_severity_t severity)
     * }
     */
    public static FunctionDescriptor rmw_set_log_severity$descriptor() {
        return rmw_set_log_severity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_set_log_severity(rmw_log_severity_t severity)
     * }
     */
    public static MethodHandle rmw_set_log_severity$handle() {
        return rmw_set_log_severity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_set_log_severity(rmw_log_severity_t severity)
     * }
     */
    public static int rmw_set_log_severity(int severity) {
        var mh$ = rmw_set_log_severity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_set_log_severity", severity);
            }
            return (int)mh$.invokeExact(severity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_subscription_set_on_new_message_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_subscription_set_on_new_message_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_set_on_new_message_callback(rmw_subscription_t *subscription, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rmw_subscription_set_on_new_message_callback$descriptor() {
        return rmw_subscription_set_on_new_message_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_set_on_new_message_callback(rmw_subscription_t *subscription, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rmw_subscription_set_on_new_message_callback$handle() {
        return rmw_subscription_set_on_new_message_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_subscription_set_on_new_message_callback(rmw_subscription_t *subscription, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rmw_subscription_set_on_new_message_callback(MemorySegment subscription, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rmw_subscription_set_on_new_message_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_subscription_set_on_new_message_callback", subscription, callback, user_data);
            }
            return (int)mh$.invokeExact(subscription, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_service_set_on_new_request_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_service_set_on_new_request_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_set_on_new_request_callback(rmw_service_t *service, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rmw_service_set_on_new_request_callback$descriptor() {
        return rmw_service_set_on_new_request_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_set_on_new_request_callback(rmw_service_t *service, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rmw_service_set_on_new_request_callback$handle() {
        return rmw_service_set_on_new_request_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_service_set_on_new_request_callback(rmw_service_t *service, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rmw_service_set_on_new_request_callback(MemorySegment service, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rmw_service_set_on_new_request_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_service_set_on_new_request_callback", service, callback, user_data);
            }
            return (int)mh$.invokeExact(service, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_client_set_on_new_response_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_client_set_on_new_response_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_set_on_new_response_callback(rmw_client_t *client, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rmw_client_set_on_new_response_callback$descriptor() {
        return rmw_client_set_on_new_response_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_set_on_new_response_callback(rmw_client_t *client, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rmw_client_set_on_new_response_callback$handle() {
        return rmw_client_set_on_new_response_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_client_set_on_new_response_callback(rmw_client_t *client, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rmw_client_set_on_new_response_callback(MemorySegment client, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rmw_client_set_on_new_response_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_client_set_on_new_response_callback", client, callback, user_data);
            }
            return (int)mh$.invokeExact(client, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_event_set_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_event_set_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_event_set_callback(rmw_event_t *event, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rmw_event_set_callback$descriptor() {
        return rmw_event_set_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_event_set_callback(rmw_event_t *event, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rmw_event_set_callback$handle() {
        return rmw_event_set_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_event_set_callback(rmw_event_t *event, rmw_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rmw_event_set_callback(MemorySegment event, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rmw_event_set_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_event_set_callback", event, callback, user_data);
            }
            return (int)mh$.invokeExact(event, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_zero_initialized_timer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_timer_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_zero_initialized_timer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_timer_t rcl_get_zero_initialized_timer()
     * }
     */
    public static FunctionDescriptor rcl_get_zero_initialized_timer$descriptor() {
        return rcl_get_zero_initialized_timer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_timer_t rcl_get_zero_initialized_timer()
     * }
     */
    public static MethodHandle rcl_get_zero_initialized_timer$handle() {
        return rcl_get_zero_initialized_timer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_timer_t rcl_get_zero_initialized_timer()
     * }
     */
    public static MemorySegment rcl_get_zero_initialized_timer(SegmentAllocator allocator) {
        var mh$ = rcl_get_zero_initialized_timer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_zero_initialized_timer", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_init(rcl_timer_t *timer, rcl_clock_t *clock, rcl_context_t *context, int64_t period, const rcl_timer_callback_t callback, rcl_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_timer_init$descriptor() {
        return rcl_timer_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_init(rcl_timer_t *timer, rcl_clock_t *clock, rcl_context_t *context, int64_t period, const rcl_timer_callback_t callback, rcl_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_timer_init$handle() {
        return rcl_timer_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_init(rcl_timer_t *timer, rcl_clock_t *clock, rcl_context_t *context, int64_t period, const rcl_timer_callback_t callback, rcl_allocator_t allocator)
     * }
     */
    public static int rcl_timer_init(MemorySegment timer, MemorySegment clock, MemorySegment context, long period, MemorySegment callback, MemorySegment allocator) {
        var mh$ = rcl_timer_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_init", timer, clock, context, period, callback, allocator);
            }
            return (int)mh$.invokeExact(timer, clock, context, period, callback, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_fini(rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rcl_timer_fini$descriptor() {
        return rcl_timer_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_fini(rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rcl_timer_fini$handle() {
        return rcl_timer_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_fini(rcl_timer_t *timer)
     * }
     */
    public static int rcl_timer_fini(MemorySegment timer) {
        var mh$ = rcl_timer_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_fini", timer);
            }
            return (int)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_call {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_call"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_call(rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rcl_timer_call$descriptor() {
        return rcl_timer_call.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_call(rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rcl_timer_call$handle() {
        return rcl_timer_call.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_call(rcl_timer_t *timer)
     * }
     */
    public static int rcl_timer_call(MemorySegment timer) {
        var mh$ = rcl_timer_call.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_call", timer);
            }
            return (int)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_clock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_clock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_clock(rcl_timer_t *timer, rcl_clock_t **clock)
     * }
     */
    public static FunctionDescriptor rcl_timer_clock$descriptor() {
        return rcl_timer_clock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_clock(rcl_timer_t *timer, rcl_clock_t **clock)
     * }
     */
    public static MethodHandle rcl_timer_clock$handle() {
        return rcl_timer_clock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_clock(rcl_timer_t *timer, rcl_clock_t **clock)
     * }
     */
    public static int rcl_timer_clock(MemorySegment timer, MemorySegment clock) {
        var mh$ = rcl_timer_clock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_clock", timer, clock);
            }
            return (int)mh$.invokeExact(timer, clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_is_ready {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_is_ready"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_is_ready(const rcl_timer_t *timer, bool *is_ready)
     * }
     */
    public static FunctionDescriptor rcl_timer_is_ready$descriptor() {
        return rcl_timer_is_ready.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_is_ready(const rcl_timer_t *timer, bool *is_ready)
     * }
     */
    public static MethodHandle rcl_timer_is_ready$handle() {
        return rcl_timer_is_ready.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_is_ready(const rcl_timer_t *timer, bool *is_ready)
     * }
     */
    public static int rcl_timer_is_ready(MemorySegment timer, MemorySegment is_ready) {
        var mh$ = rcl_timer_is_ready.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_is_ready", timer, is_ready);
            }
            return (int)mh$.invokeExact(timer, is_ready);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_get_time_until_next_call {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_get_time_until_next_call"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_time_until_next_call(const rcl_timer_t *timer, int64_t *time_until_next_call)
     * }
     */
    public static FunctionDescriptor rcl_timer_get_time_until_next_call$descriptor() {
        return rcl_timer_get_time_until_next_call.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_time_until_next_call(const rcl_timer_t *timer, int64_t *time_until_next_call)
     * }
     */
    public static MethodHandle rcl_timer_get_time_until_next_call$handle() {
        return rcl_timer_get_time_until_next_call.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_time_until_next_call(const rcl_timer_t *timer, int64_t *time_until_next_call)
     * }
     */
    public static int rcl_timer_get_time_until_next_call(MemorySegment timer, MemorySegment time_until_next_call) {
        var mh$ = rcl_timer_get_time_until_next_call.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_get_time_until_next_call", timer, time_until_next_call);
            }
            return (int)mh$.invokeExact(timer, time_until_next_call);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_get_time_since_last_call {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_get_time_since_last_call"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_time_since_last_call(const rcl_timer_t *timer, int64_t *time_since_last_call)
     * }
     */
    public static FunctionDescriptor rcl_timer_get_time_since_last_call$descriptor() {
        return rcl_timer_get_time_since_last_call.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_time_since_last_call(const rcl_timer_t *timer, int64_t *time_since_last_call)
     * }
     */
    public static MethodHandle rcl_timer_get_time_since_last_call$handle() {
        return rcl_timer_get_time_since_last_call.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_time_since_last_call(const rcl_timer_t *timer, int64_t *time_since_last_call)
     * }
     */
    public static int rcl_timer_get_time_since_last_call(MemorySegment timer, MemorySegment time_since_last_call) {
        var mh$ = rcl_timer_get_time_since_last_call.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_get_time_since_last_call", timer, time_since_last_call);
            }
            return (int)mh$.invokeExact(timer, time_since_last_call);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_get_period {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_get_period"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_period(const rcl_timer_t *timer, int64_t *period)
     * }
     */
    public static FunctionDescriptor rcl_timer_get_period$descriptor() {
        return rcl_timer_get_period.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_period(const rcl_timer_t *timer, int64_t *period)
     * }
     */
    public static MethodHandle rcl_timer_get_period$handle() {
        return rcl_timer_get_period.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_get_period(const rcl_timer_t *timer, int64_t *period)
     * }
     */
    public static int rcl_timer_get_period(MemorySegment timer, MemorySegment period) {
        var mh$ = rcl_timer_get_period.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_get_period", timer, period);
            }
            return (int)mh$.invokeExact(timer, period);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_exchange_period {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_exchange_period"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_exchange_period(const rcl_timer_t *timer, int64_t new_period, int64_t *old_period)
     * }
     */
    public static FunctionDescriptor rcl_timer_exchange_period$descriptor() {
        return rcl_timer_exchange_period.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_exchange_period(const rcl_timer_t *timer, int64_t new_period, int64_t *old_period)
     * }
     */
    public static MethodHandle rcl_timer_exchange_period$handle() {
        return rcl_timer_exchange_period.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_exchange_period(const rcl_timer_t *timer, int64_t new_period, int64_t *old_period)
     * }
     */
    public static int rcl_timer_exchange_period(MemorySegment timer, long new_period, MemorySegment old_period) {
        var mh$ = rcl_timer_exchange_period.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_exchange_period", timer, new_period, old_period);
            }
            return (int)mh$.invokeExact(timer, new_period, old_period);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_get_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_get_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_timer_callback_t rcl_timer_get_callback(const rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rcl_timer_get_callback$descriptor() {
        return rcl_timer_get_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_timer_callback_t rcl_timer_get_callback(const rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rcl_timer_get_callback$handle() {
        return rcl_timer_get_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_timer_callback_t rcl_timer_get_callback(const rcl_timer_t *timer)
     * }
     */
    public static MemorySegment rcl_timer_get_callback(MemorySegment timer) {
        var mh$ = rcl_timer_get_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_get_callback", timer);
            }
            return (MemorySegment)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_exchange_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_exchange_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_timer_callback_t rcl_timer_exchange_callback(rcl_timer_t *timer, const rcl_timer_callback_t new_callback)
     * }
     */
    public static FunctionDescriptor rcl_timer_exchange_callback$descriptor() {
        return rcl_timer_exchange_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_timer_callback_t rcl_timer_exchange_callback(rcl_timer_t *timer, const rcl_timer_callback_t new_callback)
     * }
     */
    public static MethodHandle rcl_timer_exchange_callback$handle() {
        return rcl_timer_exchange_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_timer_callback_t rcl_timer_exchange_callback(rcl_timer_t *timer, const rcl_timer_callback_t new_callback)
     * }
     */
    public static MemorySegment rcl_timer_exchange_callback(MemorySegment timer, MemorySegment new_callback) {
        var mh$ = rcl_timer_exchange_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_exchange_callback", timer, new_callback);
            }
            return (MemorySegment)mh$.invokeExact(timer, new_callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_cancel(rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rcl_timer_cancel$descriptor() {
        return rcl_timer_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_cancel(rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rcl_timer_cancel$handle() {
        return rcl_timer_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_cancel(rcl_timer_t *timer)
     * }
     */
    public static int rcl_timer_cancel(MemorySegment timer) {
        var mh$ = rcl_timer_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_cancel", timer);
            }
            return (int)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_is_canceled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_is_canceled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_is_canceled(const rcl_timer_t *timer, bool *is_canceled)
     * }
     */
    public static FunctionDescriptor rcl_timer_is_canceled$descriptor() {
        return rcl_timer_is_canceled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_is_canceled(const rcl_timer_t *timer, bool *is_canceled)
     * }
     */
    public static MethodHandle rcl_timer_is_canceled$handle() {
        return rcl_timer_is_canceled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_is_canceled(const rcl_timer_t *timer, bool *is_canceled)
     * }
     */
    public static int rcl_timer_is_canceled(MemorySegment timer, MemorySegment is_canceled) {
        var mh$ = rcl_timer_is_canceled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_is_canceled", timer, is_canceled);
            }
            return (int)mh$.invokeExact(timer, is_canceled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_reset(rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rcl_timer_reset$descriptor() {
        return rcl_timer_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_reset(rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rcl_timer_reset$handle() {
        return rcl_timer_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_timer_reset(rcl_timer_t *timer)
     * }
     */
    public static int rcl_timer_reset(MemorySegment timer) {
        var mh$ = rcl_timer_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_reset", timer);
            }
            return (int)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_get_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_get_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const rcl_allocator_t *rcl_timer_get_allocator(const rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rcl_timer_get_allocator$descriptor() {
        return rcl_timer_get_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const rcl_allocator_t *rcl_timer_get_allocator(const rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rcl_timer_get_allocator$handle() {
        return rcl_timer_get_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const rcl_allocator_t *rcl_timer_get_allocator(const rcl_timer_t *timer)
     * }
     */
    public static MemorySegment rcl_timer_get_allocator(MemorySegment timer) {
        var mh$ = rcl_timer_get_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_get_allocator", timer);
            }
            return (MemorySegment)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_timer_get_guard_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_timer_get_guard_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_guard_condition_t *rcl_timer_get_guard_condition(const rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rcl_timer_get_guard_condition$descriptor() {
        return rcl_timer_get_guard_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_guard_condition_t *rcl_timer_get_guard_condition(const rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rcl_timer_get_guard_condition$handle() {
        return rcl_timer_get_guard_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_guard_condition_t *rcl_timer_get_guard_condition(const rcl_timer_t *timer)
     * }
     */
    public static MemorySegment rcl_timer_get_guard_condition(MemorySegment timer) {
        var mh$ = rcl_timer_get_guard_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_timer_get_guard_condition", timer);
            }
            return (MemorySegment)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RCL_PUBLISHER_OFFERED_DEADLINE_MISSED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum rcl_publisher_event_type_e.RCL_PUBLISHER_OFFERED_DEADLINE_MISSED = 0
     * }
     */
    public static int RCL_PUBLISHER_OFFERED_DEADLINE_MISSED() {
        return RCL_PUBLISHER_OFFERED_DEADLINE_MISSED;
    }
    private static final int RCL_PUBLISHER_LIVELINESS_LOST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum rcl_publisher_event_type_e.RCL_PUBLISHER_LIVELINESS_LOST = 1
     * }
     */
    public static int RCL_PUBLISHER_LIVELINESS_LOST() {
        return RCL_PUBLISHER_LIVELINESS_LOST;
    }
    private static final int RCL_PUBLISHER_OFFERED_INCOMPATIBLE_QOS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum rcl_publisher_event_type_e.RCL_PUBLISHER_OFFERED_INCOMPATIBLE_QOS = 2
     * }
     */
    public static int RCL_PUBLISHER_OFFERED_INCOMPATIBLE_QOS() {
        return RCL_PUBLISHER_OFFERED_INCOMPATIBLE_QOS;
    }
    private static final int RCL_SUBSCRIPTION_REQUESTED_DEADLINE_MISSED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum rcl_subscription_event_type_e.RCL_SUBSCRIPTION_REQUESTED_DEADLINE_MISSED = 0
     * }
     */
    public static int RCL_SUBSCRIPTION_REQUESTED_DEADLINE_MISSED() {
        return RCL_SUBSCRIPTION_REQUESTED_DEADLINE_MISSED;
    }
    private static final int RCL_SUBSCRIPTION_LIVELINESS_CHANGED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum rcl_subscription_event_type_e.RCL_SUBSCRIPTION_LIVELINESS_CHANGED = 1
     * }
     */
    public static int RCL_SUBSCRIPTION_LIVELINESS_CHANGED() {
        return RCL_SUBSCRIPTION_LIVELINESS_CHANGED;
    }
    private static final int RCL_SUBSCRIPTION_REQUESTED_INCOMPATIBLE_QOS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum rcl_subscription_event_type_e.RCL_SUBSCRIPTION_REQUESTED_INCOMPATIBLE_QOS = 2
     * }
     */
    public static int RCL_SUBSCRIPTION_REQUESTED_INCOMPATIBLE_QOS() {
        return RCL_SUBSCRIPTION_REQUESTED_INCOMPATIBLE_QOS;
    }
    private static final int RCL_SUBSCRIPTION_MESSAGE_LOST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum rcl_subscription_event_type_e.RCL_SUBSCRIPTION_MESSAGE_LOST = 3
     * }
     */
    public static int RCL_SUBSCRIPTION_MESSAGE_LOST() {
        return RCL_SUBSCRIPTION_MESSAGE_LOST;
    }

    private static class rcl_get_zero_initialized_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_event_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_zero_initialized_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_event_t rcl_get_zero_initialized_event()
     * }
     */
    public static FunctionDescriptor rcl_get_zero_initialized_event$descriptor() {
        return rcl_get_zero_initialized_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_event_t rcl_get_zero_initialized_event()
     * }
     */
    public static MethodHandle rcl_get_zero_initialized_event$handle() {
        return rcl_get_zero_initialized_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_event_t rcl_get_zero_initialized_event()
     * }
     */
    public static MemorySegment rcl_get_zero_initialized_event(SegmentAllocator allocator) {
        var mh$ = rcl_get_zero_initialized_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_zero_initialized_event", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_publisher_event_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_publisher_event_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_publisher_event_init(rcl_event_t *event, const rcl_publisher_t *publisher, const rcl_publisher_event_type_t event_type)
     * }
     */
    public static FunctionDescriptor rcl_publisher_event_init$descriptor() {
        return rcl_publisher_event_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_publisher_event_init(rcl_event_t *event, const rcl_publisher_t *publisher, const rcl_publisher_event_type_t event_type)
     * }
     */
    public static MethodHandle rcl_publisher_event_init$handle() {
        return rcl_publisher_event_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_publisher_event_init(rcl_event_t *event, const rcl_publisher_t *publisher, const rcl_publisher_event_type_t event_type)
     * }
     */
    public static int rcl_publisher_event_init(MemorySegment event, MemorySegment publisher, int event_type) {
        var mh$ = rcl_publisher_event_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_publisher_event_init", event, publisher, event_type);
            }
            return (int)mh$.invokeExact(event, publisher, event_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_subscription_event_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_subscription_event_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_subscription_event_init(rcl_event_t *event, const rcl_subscription_t *subscription, const rcl_subscription_event_type_t event_type)
     * }
     */
    public static FunctionDescriptor rcl_subscription_event_init$descriptor() {
        return rcl_subscription_event_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_subscription_event_init(rcl_event_t *event, const rcl_subscription_t *subscription, const rcl_subscription_event_type_t event_type)
     * }
     */
    public static MethodHandle rcl_subscription_event_init$handle() {
        return rcl_subscription_event_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_subscription_event_init(rcl_event_t *event, const rcl_subscription_t *subscription, const rcl_subscription_event_type_t event_type)
     * }
     */
    public static int rcl_subscription_event_init(MemorySegment event, MemorySegment subscription, int event_type) {
        var mh$ = rcl_subscription_event_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_subscription_event_init", event, subscription, event_type);
            }
            return (int)mh$.invokeExact(event, subscription, event_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_take_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_take_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_take_event(const rcl_event_t *event, void *event_info)
     * }
     */
    public static FunctionDescriptor rcl_take_event$descriptor() {
        return rcl_take_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_take_event(const rcl_event_t *event, void *event_info)
     * }
     */
    public static MethodHandle rcl_take_event$handle() {
        return rcl_take_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_take_event(const rcl_event_t *event, void *event_info)
     * }
     */
    public static int rcl_take_event(MemorySegment event, MemorySegment event_info) {
        var mh$ = rcl_take_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_take_event", event, event_info);
            }
            return (int)mh$.invokeExact(event, event_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_event_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_event_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_event_fini(rcl_event_t *event)
     * }
     */
    public static FunctionDescriptor rcl_event_fini$descriptor() {
        return rcl_event_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_event_fini(rcl_event_t *event)
     * }
     */
    public static MethodHandle rcl_event_fini$handle() {
        return rcl_event_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_event_fini(rcl_event_t *event)
     * }
     */
    public static int rcl_event_fini(MemorySegment event) {
        var mh$ = rcl_event_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_event_fini", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_event_get_rmw_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_event_get_rmw_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_event_t *rcl_event_get_rmw_handle(const rcl_event_t *event)
     * }
     */
    public static FunctionDescriptor rcl_event_get_rmw_handle$descriptor() {
        return rcl_event_get_rmw_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_event_t *rcl_event_get_rmw_handle(const rcl_event_t *event)
     * }
     */
    public static MethodHandle rcl_event_get_rmw_handle$handle() {
        return rcl_event_get_rmw_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_event_t *rcl_event_get_rmw_handle(const rcl_event_t *event)
     * }
     */
    public static MemorySegment rcl_event_get_rmw_handle(MemorySegment event) {
        var mh$ = rcl_event_get_rmw_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_event_get_rmw_handle", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_event_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_event_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_event_is_valid(const rcl_event_t *event)
     * }
     */
    public static FunctionDescriptor rcl_event_is_valid$descriptor() {
        return rcl_event_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_event_is_valid(const rcl_event_t *event)
     * }
     */
    public static MethodHandle rcl_event_is_valid$handle() {
        return rcl_event_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_event_is_valid(const rcl_event_t *event)
     * }
     */
    public static boolean rcl_event_is_valid(MemorySegment event) {
        var mh$ = rcl_event_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_event_is_valid", event);
            }
            return (boolean)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_event_set_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_event_set_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_event_set_callback(const rcl_event_t *event, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_event_set_callback$descriptor() {
        return rcl_event_set_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_event_set_callback(const rcl_event_t *event, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_event_set_callback$handle() {
        return rcl_event_set_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_event_set_callback(const rcl_event_t *event, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_event_set_callback(MemorySegment event, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_event_set_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_event_set_callback", event, callback, user_data);
            }
            return (int)mh$.invokeExact(event, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_zero_initialized_wait_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_wait_set_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_zero_initialized_wait_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_wait_set_t rcl_get_zero_initialized_wait_set()
     * }
     */
    public static FunctionDescriptor rcl_get_zero_initialized_wait_set$descriptor() {
        return rcl_get_zero_initialized_wait_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_wait_set_t rcl_get_zero_initialized_wait_set()
     * }
     */
    public static MethodHandle rcl_get_zero_initialized_wait_set$handle() {
        return rcl_get_zero_initialized_wait_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_wait_set_t rcl_get_zero_initialized_wait_set()
     * }
     */
    public static MemorySegment rcl_get_zero_initialized_wait_set(SegmentAllocator allocator) {
        var mh$ = rcl_get_zero_initialized_wait_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_zero_initialized_wait_set", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_POINTER,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_init(rcl_wait_set_t *wait_set, size_t number_of_subscriptions, size_t number_of_guard_conditions, size_t number_of_timers, size_t number_of_clients, size_t number_of_services, size_t number_of_events, rcl_context_t *context, rcl_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_init$descriptor() {
        return rcl_wait_set_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_init(rcl_wait_set_t *wait_set, size_t number_of_subscriptions, size_t number_of_guard_conditions, size_t number_of_timers, size_t number_of_clients, size_t number_of_services, size_t number_of_events, rcl_context_t *context, rcl_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_wait_set_init$handle() {
        return rcl_wait_set_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_init(rcl_wait_set_t *wait_set, size_t number_of_subscriptions, size_t number_of_guard_conditions, size_t number_of_timers, size_t number_of_clients, size_t number_of_services, size_t number_of_events, rcl_context_t *context, rcl_allocator_t allocator)
     * }
     */
    public static int rcl_wait_set_init(MemorySegment wait_set, long number_of_subscriptions, long number_of_guard_conditions, long number_of_timers, long number_of_clients, long number_of_services, long number_of_events, MemorySegment context, MemorySegment allocator) {
        var mh$ = rcl_wait_set_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_init", wait_set, number_of_subscriptions, number_of_guard_conditions, number_of_timers, number_of_clients, number_of_services, number_of_events, context, allocator);
            }
            return (int)mh$.invokeExact(wait_set, number_of_subscriptions, number_of_guard_conditions, number_of_timers, number_of_clients, number_of_services, number_of_events, context, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_fini(rcl_wait_set_t *wait_set)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_fini$descriptor() {
        return rcl_wait_set_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_fini(rcl_wait_set_t *wait_set)
     * }
     */
    public static MethodHandle rcl_wait_set_fini$handle() {
        return rcl_wait_set_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_fini(rcl_wait_set_t *wait_set)
     * }
     */
    public static int rcl_wait_set_fini(MemorySegment wait_set) {
        var mh$ = rcl_wait_set_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_fini", wait_set);
            }
            return (int)mh$.invokeExact(wait_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_get_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_get_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_get_allocator(const rcl_wait_set_t *wait_set, rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_get_allocator$descriptor() {
        return rcl_wait_set_get_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_get_allocator(const rcl_wait_set_t *wait_set, rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rcl_wait_set_get_allocator$handle() {
        return rcl_wait_set_get_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_get_allocator(const rcl_wait_set_t *wait_set, rcl_allocator_t *allocator)
     * }
     */
    public static int rcl_wait_set_get_allocator(MemorySegment wait_set, MemorySegment allocator) {
        var mh$ = rcl_wait_set_get_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_get_allocator", wait_set, allocator);
            }
            return (int)mh$.invokeExact(wait_set, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_add_subscription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_add_subscription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_subscription(rcl_wait_set_t *wait_set, const rcl_subscription_t *subscription, size_t *index)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_add_subscription$descriptor() {
        return rcl_wait_set_add_subscription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_subscription(rcl_wait_set_t *wait_set, const rcl_subscription_t *subscription, size_t *index)
     * }
     */
    public static MethodHandle rcl_wait_set_add_subscription$handle() {
        return rcl_wait_set_add_subscription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_subscription(rcl_wait_set_t *wait_set, const rcl_subscription_t *subscription, size_t *index)
     * }
     */
    public static int rcl_wait_set_add_subscription(MemorySegment wait_set, MemorySegment subscription, MemorySegment index) {
        var mh$ = rcl_wait_set_add_subscription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_add_subscription", wait_set, subscription, index);
            }
            return (int)mh$.invokeExact(wait_set, subscription, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_clear(rcl_wait_set_t *wait_set)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_clear$descriptor() {
        return rcl_wait_set_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_clear(rcl_wait_set_t *wait_set)
     * }
     */
    public static MethodHandle rcl_wait_set_clear$handle() {
        return rcl_wait_set_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_clear(rcl_wait_set_t *wait_set)
     * }
     */
    public static int rcl_wait_set_clear(MemorySegment wait_set) {
        var mh$ = rcl_wait_set_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_clear", wait_set);
            }
            return (int)mh$.invokeExact(wait_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_resize(rcl_wait_set_t *wait_set, size_t subscriptions_size, size_t guard_conditions_size, size_t timers_size, size_t clients_size, size_t services_size, size_t events_size)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_resize$descriptor() {
        return rcl_wait_set_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_resize(rcl_wait_set_t *wait_set, size_t subscriptions_size, size_t guard_conditions_size, size_t timers_size, size_t clients_size, size_t services_size, size_t events_size)
     * }
     */
    public static MethodHandle rcl_wait_set_resize$handle() {
        return rcl_wait_set_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_resize(rcl_wait_set_t *wait_set, size_t subscriptions_size, size_t guard_conditions_size, size_t timers_size, size_t clients_size, size_t services_size, size_t events_size)
     * }
     */
    public static int rcl_wait_set_resize(MemorySegment wait_set, long subscriptions_size, long guard_conditions_size, long timers_size, long clients_size, long services_size, long events_size) {
        var mh$ = rcl_wait_set_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_resize", wait_set, subscriptions_size, guard_conditions_size, timers_size, clients_size, services_size, events_size);
            }
            return (int)mh$.invokeExact(wait_set, subscriptions_size, guard_conditions_size, timers_size, clients_size, services_size, events_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_add_guard_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_add_guard_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_guard_condition(rcl_wait_set_t *wait_set, const rcl_guard_condition_t *guard_condition, size_t *index)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_add_guard_condition$descriptor() {
        return rcl_wait_set_add_guard_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_guard_condition(rcl_wait_set_t *wait_set, const rcl_guard_condition_t *guard_condition, size_t *index)
     * }
     */
    public static MethodHandle rcl_wait_set_add_guard_condition$handle() {
        return rcl_wait_set_add_guard_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_guard_condition(rcl_wait_set_t *wait_set, const rcl_guard_condition_t *guard_condition, size_t *index)
     * }
     */
    public static int rcl_wait_set_add_guard_condition(MemorySegment wait_set, MemorySegment guard_condition, MemorySegment index) {
        var mh$ = rcl_wait_set_add_guard_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_add_guard_condition", wait_set, guard_condition, index);
            }
            return (int)mh$.invokeExact(wait_set, guard_condition, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_add_timer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_add_timer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_timer(rcl_wait_set_t *wait_set, const rcl_timer_t *timer, size_t *index)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_add_timer$descriptor() {
        return rcl_wait_set_add_timer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_timer(rcl_wait_set_t *wait_set, const rcl_timer_t *timer, size_t *index)
     * }
     */
    public static MethodHandle rcl_wait_set_add_timer$handle() {
        return rcl_wait_set_add_timer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_timer(rcl_wait_set_t *wait_set, const rcl_timer_t *timer, size_t *index)
     * }
     */
    public static int rcl_wait_set_add_timer(MemorySegment wait_set, MemorySegment timer, MemorySegment index) {
        var mh$ = rcl_wait_set_add_timer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_add_timer", wait_set, timer, index);
            }
            return (int)mh$.invokeExact(wait_set, timer, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_add_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_add_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_client(rcl_wait_set_t *wait_set, const rcl_client_t *client, size_t *index)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_add_client$descriptor() {
        return rcl_wait_set_add_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_client(rcl_wait_set_t *wait_set, const rcl_client_t *client, size_t *index)
     * }
     */
    public static MethodHandle rcl_wait_set_add_client$handle() {
        return rcl_wait_set_add_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_client(rcl_wait_set_t *wait_set, const rcl_client_t *client, size_t *index)
     * }
     */
    public static int rcl_wait_set_add_client(MemorySegment wait_set, MemorySegment client, MemorySegment index) {
        var mh$ = rcl_wait_set_add_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_add_client", wait_set, client, index);
            }
            return (int)mh$.invokeExact(wait_set, client, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_add_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_add_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_service(rcl_wait_set_t *wait_set, const rcl_service_t *service, size_t *index)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_add_service$descriptor() {
        return rcl_wait_set_add_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_service(rcl_wait_set_t *wait_set, const rcl_service_t *service, size_t *index)
     * }
     */
    public static MethodHandle rcl_wait_set_add_service$handle() {
        return rcl_wait_set_add_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_service(rcl_wait_set_t *wait_set, const rcl_service_t *service, size_t *index)
     * }
     */
    public static int rcl_wait_set_add_service(MemorySegment wait_set, MemorySegment service, MemorySegment index) {
        var mh$ = rcl_wait_set_add_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_add_service", wait_set, service, index);
            }
            return (int)mh$.invokeExact(wait_set, service, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_add_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_add_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_event(rcl_wait_set_t *wait_set, const rcl_event_t *event, size_t *index)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_add_event$descriptor() {
        return rcl_wait_set_add_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_event(rcl_wait_set_t *wait_set, const rcl_event_t *event, size_t *index)
     * }
     */
    public static MethodHandle rcl_wait_set_add_event$handle() {
        return rcl_wait_set_add_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_set_add_event(rcl_wait_set_t *wait_set, const rcl_event_t *event, size_t *index)
     * }
     */
    public static int rcl_wait_set_add_event(MemorySegment wait_set, MemorySegment event, MemorySegment index) {
        var mh$ = rcl_wait_set_add_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_add_event", wait_set, event, index);
            }
            return (int)mh$.invokeExact(wait_set, event, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait(rcl_wait_set_t *wait_set, int64_t timeout)
     * }
     */
    public static FunctionDescriptor rcl_wait$descriptor() {
        return rcl_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait(rcl_wait_set_t *wait_set, int64_t timeout)
     * }
     */
    public static MethodHandle rcl_wait$handle() {
        return rcl_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait(rcl_wait_set_t *wait_set, int64_t timeout)
     * }
     */
    public static int rcl_wait(MemorySegment wait_set, long timeout) {
        var mh$ = rcl_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait", wait_set, timeout);
            }
            return (int)mh$.invokeExact(wait_set, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_set_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_set_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_wait_set_is_valid(const rcl_wait_set_t *wait_set)
     * }
     */
    public static FunctionDescriptor rcl_wait_set_is_valid$descriptor() {
        return rcl_wait_set_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_wait_set_is_valid(const rcl_wait_set_t *wait_set)
     * }
     */
    public static MethodHandle rcl_wait_set_is_valid$handle() {
        return rcl_wait_set_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_wait_set_is_valid(const rcl_wait_set_t *wait_set)
     * }
     */
    public static boolean rcl_wait_set_is_valid(MemorySegment wait_set) {
        var mh$ = rcl_wait_set_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_set_is_valid", wait_set);
            }
            return (boolean)mh$.invokeExact(wait_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__init(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__init$descriptor() {
        return action_msgs__msg__GoalInfo__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__init(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__init$handle() {
        return action_msgs__msg__GoalInfo__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__init(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static boolean action_msgs__msg__GoalInfo__init(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalInfo__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__fini(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__fini$descriptor() {
        return action_msgs__msg__GoalInfo__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__fini(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__fini$handle() {
        return action_msgs__msg__GoalInfo__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__fini(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static void action_msgs__msg__GoalInfo__fini(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalInfo__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalInfo *action_msgs__msg__GoalInfo__create()
     * }
     */
    public static class action_msgs__msg__GoalInfo__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("action_msgs__msg__GoalInfo__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private action_msgs__msg__GoalInfo__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * action_msgs__msg__GoalInfo *action_msgs__msg__GoalInfo__create()
         * }
         */
        public static action_msgs__msg__GoalInfo__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new action_msgs__msg__GoalInfo__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("action_msgs__msg__GoalInfo__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class action_msgs__msg__GoalInfo__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__destroy(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__destroy$descriptor() {
        return action_msgs__msg__GoalInfo__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__destroy(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__destroy$handle() {
        return action_msgs__msg__GoalInfo__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__destroy(action_msgs__msg__GoalInfo *msg)
     * }
     */
    public static void action_msgs__msg__GoalInfo__destroy(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalInfo__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__are_equal(const action_msgs__msg__GoalInfo *lhs, const action_msgs__msg__GoalInfo *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__are_equal$descriptor() {
        return action_msgs__msg__GoalInfo__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__are_equal(const action_msgs__msg__GoalInfo *lhs, const action_msgs__msg__GoalInfo *rhs)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__are_equal$handle() {
        return action_msgs__msg__GoalInfo__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__are_equal(const action_msgs__msg__GoalInfo *lhs, const action_msgs__msg__GoalInfo *rhs)
     * }
     */
    public static boolean action_msgs__msg__GoalInfo__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__msg__GoalInfo__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__copy(const action_msgs__msg__GoalInfo *input, action_msgs__msg__GoalInfo *output)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__copy$descriptor() {
        return action_msgs__msg__GoalInfo__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__copy(const action_msgs__msg__GoalInfo *input, action_msgs__msg__GoalInfo *output)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__copy$handle() {
        return action_msgs__msg__GoalInfo__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__copy(const action_msgs__msg__GoalInfo *input, action_msgs__msg__GoalInfo *output)
     * }
     */
    public static boolean action_msgs__msg__GoalInfo__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__msg__GoalInfo__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__init(action_msgs__msg__GoalInfo__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__Sequence__init$descriptor() {
        return action_msgs__msg__GoalInfo__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__init(action_msgs__msg__GoalInfo__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__Sequence__init$handle() {
        return action_msgs__msg__GoalInfo__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__init(action_msgs__msg__GoalInfo__Sequence *array, size_t size)
     * }
     */
    public static boolean action_msgs__msg__GoalInfo__Sequence__init(MemorySegment array, long size) {
        var mh$ = action_msgs__msg__GoalInfo__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__Sequence__fini(action_msgs__msg__GoalInfo__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__Sequence__fini$descriptor() {
        return action_msgs__msg__GoalInfo__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__Sequence__fini(action_msgs__msg__GoalInfo__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__Sequence__fini$handle() {
        return action_msgs__msg__GoalInfo__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__Sequence__fini(action_msgs__msg__GoalInfo__Sequence *array)
     * }
     */
    public static void action_msgs__msg__GoalInfo__Sequence__fini(MemorySegment array) {
        var mh$ = action_msgs__msg__GoalInfo__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalInfo__Sequence *action_msgs__msg__GoalInfo__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__Sequence__create$descriptor() {
        return action_msgs__msg__GoalInfo__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalInfo__Sequence *action_msgs__msg__GoalInfo__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__Sequence__create$handle() {
        return action_msgs__msg__GoalInfo__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * action_msgs__msg__GoalInfo__Sequence *action_msgs__msg__GoalInfo__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment action_msgs__msg__GoalInfo__Sequence__create(long size) {
        var mh$ = action_msgs__msg__GoalInfo__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__Sequence__destroy(action_msgs__msg__GoalInfo__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__Sequence__destroy$descriptor() {
        return action_msgs__msg__GoalInfo__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__Sequence__destroy(action_msgs__msg__GoalInfo__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__Sequence__destroy$handle() {
        return action_msgs__msg__GoalInfo__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalInfo__Sequence__destroy(action_msgs__msg__GoalInfo__Sequence *array)
     * }
     */
    public static void action_msgs__msg__GoalInfo__Sequence__destroy(MemorySegment array) {
        var mh$ = action_msgs__msg__GoalInfo__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__are_equal(const action_msgs__msg__GoalInfo__Sequence *lhs, const action_msgs__msg__GoalInfo__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__Sequence__are_equal$descriptor() {
        return action_msgs__msg__GoalInfo__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__are_equal(const action_msgs__msg__GoalInfo__Sequence *lhs, const action_msgs__msg__GoalInfo__Sequence *rhs)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__Sequence__are_equal$handle() {
        return action_msgs__msg__GoalInfo__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__are_equal(const action_msgs__msg__GoalInfo__Sequence *lhs, const action_msgs__msg__GoalInfo__Sequence *rhs)
     * }
     */
    public static boolean action_msgs__msg__GoalInfo__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__msg__GoalInfo__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalInfo__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalInfo__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__copy(const action_msgs__msg__GoalInfo__Sequence *input, action_msgs__msg__GoalInfo__Sequence *output)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalInfo__Sequence__copy$descriptor() {
        return action_msgs__msg__GoalInfo__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__copy(const action_msgs__msg__GoalInfo__Sequence *input, action_msgs__msg__GoalInfo__Sequence *output)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalInfo__Sequence__copy$handle() {
        return action_msgs__msg__GoalInfo__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalInfo__Sequence__copy(const action_msgs__msg__GoalInfo__Sequence *input, action_msgs__msg__GoalInfo__Sequence *output)
     * }
     */
    public static boolean action_msgs__msg__GoalInfo__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__msg__GoalInfo__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalInfo__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int action_msgs__msg__GoalStatus__STATUS_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__msg__GoalStatus__STATUS_UNKNOWN = 0
     * }
     */
    public static int action_msgs__msg__GoalStatus__STATUS_UNKNOWN() {
        return action_msgs__msg__GoalStatus__STATUS_UNKNOWN;
    }
    private static final int action_msgs__msg__GoalStatus__STATUS_ACCEPTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__msg__GoalStatus__STATUS_ACCEPTED = 1
     * }
     */
    public static int action_msgs__msg__GoalStatus__STATUS_ACCEPTED() {
        return action_msgs__msg__GoalStatus__STATUS_ACCEPTED;
    }
    private static final int action_msgs__msg__GoalStatus__STATUS_EXECUTING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__msg__GoalStatus__STATUS_EXECUTING = 2
     * }
     */
    public static int action_msgs__msg__GoalStatus__STATUS_EXECUTING() {
        return action_msgs__msg__GoalStatus__STATUS_EXECUTING;
    }
    private static final int action_msgs__msg__GoalStatus__STATUS_CANCELING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__msg__GoalStatus__STATUS_CANCELING = 3
     * }
     */
    public static int action_msgs__msg__GoalStatus__STATUS_CANCELING() {
        return action_msgs__msg__GoalStatus__STATUS_CANCELING;
    }
    private static final int action_msgs__msg__GoalStatus__STATUS_SUCCEEDED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__msg__GoalStatus__STATUS_SUCCEEDED = 4
     * }
     */
    public static int action_msgs__msg__GoalStatus__STATUS_SUCCEEDED() {
        return action_msgs__msg__GoalStatus__STATUS_SUCCEEDED;
    }
    private static final int action_msgs__msg__GoalStatus__STATUS_CANCELED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__msg__GoalStatus__STATUS_CANCELED = 5
     * }
     */
    public static int action_msgs__msg__GoalStatus__STATUS_CANCELED() {
        return action_msgs__msg__GoalStatus__STATUS_CANCELED;
    }
    private static final int action_msgs__msg__GoalStatus__STATUS_ABORTED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__msg__GoalStatus__STATUS_ABORTED = 6
     * }
     */
    public static int action_msgs__msg__GoalStatus__STATUS_ABORTED() {
        return action_msgs__msg__GoalStatus__STATUS_ABORTED;
    }

    private static class action_msgs__msg__GoalStatus__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__init(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__init$descriptor() {
        return action_msgs__msg__GoalStatus__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__init(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__init$handle() {
        return action_msgs__msg__GoalStatus__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__init(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static boolean action_msgs__msg__GoalStatus__init(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalStatus__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__fini(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__fini$descriptor() {
        return action_msgs__msg__GoalStatus__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__fini(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__fini$handle() {
        return action_msgs__msg__GoalStatus__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__fini(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static void action_msgs__msg__GoalStatus__fini(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalStatus__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatus *action_msgs__msg__GoalStatus__create()
     * }
     */
    public static class action_msgs__msg__GoalStatus__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("action_msgs__msg__GoalStatus__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private action_msgs__msg__GoalStatus__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * action_msgs__msg__GoalStatus *action_msgs__msg__GoalStatus__create()
         * }
         */
        public static action_msgs__msg__GoalStatus__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new action_msgs__msg__GoalStatus__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("action_msgs__msg__GoalStatus__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class action_msgs__msg__GoalStatus__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__destroy(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__destroy$descriptor() {
        return action_msgs__msg__GoalStatus__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__destroy(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__destroy$handle() {
        return action_msgs__msg__GoalStatus__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__destroy(action_msgs__msg__GoalStatus *msg)
     * }
     */
    public static void action_msgs__msg__GoalStatus__destroy(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalStatus__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__are_equal(const action_msgs__msg__GoalStatus *lhs, const action_msgs__msg__GoalStatus *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__are_equal$descriptor() {
        return action_msgs__msg__GoalStatus__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__are_equal(const action_msgs__msg__GoalStatus *lhs, const action_msgs__msg__GoalStatus *rhs)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__are_equal$handle() {
        return action_msgs__msg__GoalStatus__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__are_equal(const action_msgs__msg__GoalStatus *lhs, const action_msgs__msg__GoalStatus *rhs)
     * }
     */
    public static boolean action_msgs__msg__GoalStatus__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__msg__GoalStatus__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__copy(const action_msgs__msg__GoalStatus *input, action_msgs__msg__GoalStatus *output)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__copy$descriptor() {
        return action_msgs__msg__GoalStatus__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__copy(const action_msgs__msg__GoalStatus *input, action_msgs__msg__GoalStatus *output)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__copy$handle() {
        return action_msgs__msg__GoalStatus__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__copy(const action_msgs__msg__GoalStatus *input, action_msgs__msg__GoalStatus *output)
     * }
     */
    public static boolean action_msgs__msg__GoalStatus__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__msg__GoalStatus__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__init(action_msgs__msg__GoalStatus__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__Sequence__init$descriptor() {
        return action_msgs__msg__GoalStatus__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__init(action_msgs__msg__GoalStatus__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__Sequence__init$handle() {
        return action_msgs__msg__GoalStatus__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__init(action_msgs__msg__GoalStatus__Sequence *array, size_t size)
     * }
     */
    public static boolean action_msgs__msg__GoalStatus__Sequence__init(MemorySegment array, long size) {
        var mh$ = action_msgs__msg__GoalStatus__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__Sequence__fini(action_msgs__msg__GoalStatus__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__Sequence__fini$descriptor() {
        return action_msgs__msg__GoalStatus__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__Sequence__fini(action_msgs__msg__GoalStatus__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__Sequence__fini$handle() {
        return action_msgs__msg__GoalStatus__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__Sequence__fini(action_msgs__msg__GoalStatus__Sequence *array)
     * }
     */
    public static void action_msgs__msg__GoalStatus__Sequence__fini(MemorySegment array) {
        var mh$ = action_msgs__msg__GoalStatus__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatus__Sequence *action_msgs__msg__GoalStatus__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__Sequence__create$descriptor() {
        return action_msgs__msg__GoalStatus__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatus__Sequence *action_msgs__msg__GoalStatus__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__Sequence__create$handle() {
        return action_msgs__msg__GoalStatus__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatus__Sequence *action_msgs__msg__GoalStatus__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment action_msgs__msg__GoalStatus__Sequence__create(long size) {
        var mh$ = action_msgs__msg__GoalStatus__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__Sequence__destroy(action_msgs__msg__GoalStatus__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__Sequence__destroy$descriptor() {
        return action_msgs__msg__GoalStatus__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__Sequence__destroy(action_msgs__msg__GoalStatus__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__Sequence__destroy$handle() {
        return action_msgs__msg__GoalStatus__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatus__Sequence__destroy(action_msgs__msg__GoalStatus__Sequence *array)
     * }
     */
    public static void action_msgs__msg__GoalStatus__Sequence__destroy(MemorySegment array) {
        var mh$ = action_msgs__msg__GoalStatus__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__are_equal(const action_msgs__msg__GoalStatus__Sequence *lhs, const action_msgs__msg__GoalStatus__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__Sequence__are_equal$descriptor() {
        return action_msgs__msg__GoalStatus__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__are_equal(const action_msgs__msg__GoalStatus__Sequence *lhs, const action_msgs__msg__GoalStatus__Sequence *rhs)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__Sequence__are_equal$handle() {
        return action_msgs__msg__GoalStatus__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__are_equal(const action_msgs__msg__GoalStatus__Sequence *lhs, const action_msgs__msg__GoalStatus__Sequence *rhs)
     * }
     */
    public static boolean action_msgs__msg__GoalStatus__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__msg__GoalStatus__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatus__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatus__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__copy(const action_msgs__msg__GoalStatus__Sequence *input, action_msgs__msg__GoalStatus__Sequence *output)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatus__Sequence__copy$descriptor() {
        return action_msgs__msg__GoalStatus__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__copy(const action_msgs__msg__GoalStatus__Sequence *input, action_msgs__msg__GoalStatus__Sequence *output)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatus__Sequence__copy$handle() {
        return action_msgs__msg__GoalStatus__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatus__Sequence__copy(const action_msgs__msg__GoalStatus__Sequence *input, action_msgs__msg__GoalStatus__Sequence *output)
     * }
     */
    public static boolean action_msgs__msg__GoalStatus__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__msg__GoalStatus__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatus__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class action_msgs__msg__GoalStatusArray__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__init(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__init$descriptor() {
        return action_msgs__msg__GoalStatusArray__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__init(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__init$handle() {
        return action_msgs__msg__GoalStatusArray__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__init(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static boolean action_msgs__msg__GoalStatusArray__init(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalStatusArray__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__fini(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__fini$descriptor() {
        return action_msgs__msg__GoalStatusArray__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__fini(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__fini$handle() {
        return action_msgs__msg__GoalStatusArray__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__fini(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static void action_msgs__msg__GoalStatusArray__fini(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalStatusArray__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatusArray *action_msgs__msg__GoalStatusArray__create()
     * }
     */
    public static class action_msgs__msg__GoalStatusArray__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private action_msgs__msg__GoalStatusArray__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * action_msgs__msg__GoalStatusArray *action_msgs__msg__GoalStatusArray__create()
         * }
         */
        public static action_msgs__msg__GoalStatusArray__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new action_msgs__msg__GoalStatusArray__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("action_msgs__msg__GoalStatusArray__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class action_msgs__msg__GoalStatusArray__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__destroy(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__destroy$descriptor() {
        return action_msgs__msg__GoalStatusArray__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__destroy(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__destroy$handle() {
        return action_msgs__msg__GoalStatusArray__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__destroy(action_msgs__msg__GoalStatusArray *msg)
     * }
     */
    public static void action_msgs__msg__GoalStatusArray__destroy(MemorySegment msg) {
        var mh$ = action_msgs__msg__GoalStatusArray__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__are_equal(const action_msgs__msg__GoalStatusArray *lhs, const action_msgs__msg__GoalStatusArray *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__are_equal$descriptor() {
        return action_msgs__msg__GoalStatusArray__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__are_equal(const action_msgs__msg__GoalStatusArray *lhs, const action_msgs__msg__GoalStatusArray *rhs)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__are_equal$handle() {
        return action_msgs__msg__GoalStatusArray__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__are_equal(const action_msgs__msg__GoalStatusArray *lhs, const action_msgs__msg__GoalStatusArray *rhs)
     * }
     */
    public static boolean action_msgs__msg__GoalStatusArray__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__msg__GoalStatusArray__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__copy(const action_msgs__msg__GoalStatusArray *input, action_msgs__msg__GoalStatusArray *output)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__copy$descriptor() {
        return action_msgs__msg__GoalStatusArray__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__copy(const action_msgs__msg__GoalStatusArray *input, action_msgs__msg__GoalStatusArray *output)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__copy$handle() {
        return action_msgs__msg__GoalStatusArray__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__copy(const action_msgs__msg__GoalStatusArray *input, action_msgs__msg__GoalStatusArray *output)
     * }
     */
    public static boolean action_msgs__msg__GoalStatusArray__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__msg__GoalStatusArray__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__init(action_msgs__msg__GoalStatusArray__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__Sequence__init$descriptor() {
        return action_msgs__msg__GoalStatusArray__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__init(action_msgs__msg__GoalStatusArray__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__Sequence__init$handle() {
        return action_msgs__msg__GoalStatusArray__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__init(action_msgs__msg__GoalStatusArray__Sequence *array, size_t size)
     * }
     */
    public static boolean action_msgs__msg__GoalStatusArray__Sequence__init(MemorySegment array, long size) {
        var mh$ = action_msgs__msg__GoalStatusArray__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__Sequence__fini(action_msgs__msg__GoalStatusArray__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__Sequence__fini$descriptor() {
        return action_msgs__msg__GoalStatusArray__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__Sequence__fini(action_msgs__msg__GoalStatusArray__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__Sequence__fini$handle() {
        return action_msgs__msg__GoalStatusArray__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__Sequence__fini(action_msgs__msg__GoalStatusArray__Sequence *array)
     * }
     */
    public static void action_msgs__msg__GoalStatusArray__Sequence__fini(MemorySegment array) {
        var mh$ = action_msgs__msg__GoalStatusArray__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatusArray__Sequence *action_msgs__msg__GoalStatusArray__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__Sequence__create$descriptor() {
        return action_msgs__msg__GoalStatusArray__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatusArray__Sequence *action_msgs__msg__GoalStatusArray__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__Sequence__create$handle() {
        return action_msgs__msg__GoalStatusArray__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * action_msgs__msg__GoalStatusArray__Sequence *action_msgs__msg__GoalStatusArray__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment action_msgs__msg__GoalStatusArray__Sequence__create(long size) {
        var mh$ = action_msgs__msg__GoalStatusArray__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__Sequence__destroy(action_msgs__msg__GoalStatusArray__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__Sequence__destroy$descriptor() {
        return action_msgs__msg__GoalStatusArray__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__Sequence__destroy(action_msgs__msg__GoalStatusArray__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__Sequence__destroy$handle() {
        return action_msgs__msg__GoalStatusArray__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__msg__GoalStatusArray__Sequence__destroy(action_msgs__msg__GoalStatusArray__Sequence *array)
     * }
     */
    public static void action_msgs__msg__GoalStatusArray__Sequence__destroy(MemorySegment array) {
        var mh$ = action_msgs__msg__GoalStatusArray__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__are_equal(const action_msgs__msg__GoalStatusArray__Sequence *lhs, const action_msgs__msg__GoalStatusArray__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__Sequence__are_equal$descriptor() {
        return action_msgs__msg__GoalStatusArray__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__are_equal(const action_msgs__msg__GoalStatusArray__Sequence *lhs, const action_msgs__msg__GoalStatusArray__Sequence *rhs)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__Sequence__are_equal$handle() {
        return action_msgs__msg__GoalStatusArray__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__are_equal(const action_msgs__msg__GoalStatusArray__Sequence *lhs, const action_msgs__msg__GoalStatusArray__Sequence *rhs)
     * }
     */
    public static boolean action_msgs__msg__GoalStatusArray__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__msg__GoalStatusArray__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__msg__GoalStatusArray__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__msg__GoalStatusArray__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__copy(const action_msgs__msg__GoalStatusArray__Sequence *input, action_msgs__msg__GoalStatusArray__Sequence *output)
     * }
     */
    public static FunctionDescriptor action_msgs__msg__GoalStatusArray__Sequence__copy$descriptor() {
        return action_msgs__msg__GoalStatusArray__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__copy(const action_msgs__msg__GoalStatusArray__Sequence *input, action_msgs__msg__GoalStatusArray__Sequence *output)
     * }
     */
    public static MethodHandle action_msgs__msg__GoalStatusArray__Sequence__copy$handle() {
        return action_msgs__msg__GoalStatusArray__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__msg__GoalStatusArray__Sequence__copy(const action_msgs__msg__GoalStatusArray__Sequence *input, action_msgs__msg__GoalStatusArray__Sequence *output)
     * }
     */
    public static boolean action_msgs__msg__GoalStatusArray__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__msg__GoalStatusArray__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__msg__GoalStatusArray__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int action_msgs__srv__CancelGoal_Response__ERROR_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__srv__CancelGoal_Response__ERROR_NONE = 0
     * }
     */
    public static int action_msgs__srv__CancelGoal_Response__ERROR_NONE() {
        return action_msgs__srv__CancelGoal_Response__ERROR_NONE;
    }
    private static final int action_msgs__srv__CancelGoal_Response__ERROR_REJECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__srv__CancelGoal_Response__ERROR_REJECTED = 1
     * }
     */
    public static int action_msgs__srv__CancelGoal_Response__ERROR_REJECTED() {
        return action_msgs__srv__CancelGoal_Response__ERROR_REJECTED;
    }
    private static final int action_msgs__srv__CancelGoal_Response__ERROR_UNKNOWN_GOAL_ID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__srv__CancelGoal_Response__ERROR_UNKNOWN_GOAL_ID = 2
     * }
     */
    public static int action_msgs__srv__CancelGoal_Response__ERROR_UNKNOWN_GOAL_ID() {
        return action_msgs__srv__CancelGoal_Response__ERROR_UNKNOWN_GOAL_ID;
    }
    private static final int action_msgs__srv__CancelGoal_Response__ERROR_GOAL_TERMINATED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.action_msgs__srv__CancelGoal_Response__ERROR_GOAL_TERMINATED = 3
     * }
     */
    public static int action_msgs__srv__CancelGoal_Response__ERROR_GOAL_TERMINATED() {
        return action_msgs__srv__CancelGoal_Response__ERROR_GOAL_TERMINATED;
    }

    private static class action_msgs__srv__CancelGoal_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__init(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__init$descriptor() {
        return action_msgs__srv__CancelGoal_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__init(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__init$handle() {
        return action_msgs__srv__CancelGoal_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__init(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Request__init(MemorySegment msg) {
        var mh$ = action_msgs__srv__CancelGoal_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__fini(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__fini$descriptor() {
        return action_msgs__srv__CancelGoal_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__fini(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__fini$handle() {
        return action_msgs__srv__CancelGoal_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__fini(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Request__fini(MemorySegment msg) {
        var mh$ = action_msgs__srv__CancelGoal_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Request *action_msgs__srv__CancelGoal_Request__create()
     * }
     */
    public static class action_msgs__srv__CancelGoal_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private action_msgs__srv__CancelGoal_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * action_msgs__srv__CancelGoal_Request *action_msgs__srv__CancelGoal_Request__create()
         * }
         */
        public static action_msgs__srv__CancelGoal_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new action_msgs__srv__CancelGoal_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("action_msgs__srv__CancelGoal_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__destroy(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__destroy$descriptor() {
        return action_msgs__srv__CancelGoal_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__destroy(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__destroy$handle() {
        return action_msgs__srv__CancelGoal_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__destroy(action_msgs__srv__CancelGoal_Request *msg)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Request__destroy(MemorySegment msg) {
        var mh$ = action_msgs__srv__CancelGoal_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__are_equal(const action_msgs__srv__CancelGoal_Request *lhs, const action_msgs__srv__CancelGoal_Request *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__are_equal$descriptor() {
        return action_msgs__srv__CancelGoal_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__are_equal(const action_msgs__srv__CancelGoal_Request *lhs, const action_msgs__srv__CancelGoal_Request *rhs)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__are_equal$handle() {
        return action_msgs__srv__CancelGoal_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__are_equal(const action_msgs__srv__CancelGoal_Request *lhs, const action_msgs__srv__CancelGoal_Request *rhs)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__srv__CancelGoal_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__copy(const action_msgs__srv__CancelGoal_Request *input, action_msgs__srv__CancelGoal_Request *output)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__copy$descriptor() {
        return action_msgs__srv__CancelGoal_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__copy(const action_msgs__srv__CancelGoal_Request *input, action_msgs__srv__CancelGoal_Request *output)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__copy$handle() {
        return action_msgs__srv__CancelGoal_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__copy(const action_msgs__srv__CancelGoal_Request *input, action_msgs__srv__CancelGoal_Request *output)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__srv__CancelGoal_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__init(action_msgs__srv__CancelGoal_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__Sequence__init$descriptor() {
        return action_msgs__srv__CancelGoal_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__init(action_msgs__srv__CancelGoal_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__Sequence__init$handle() {
        return action_msgs__srv__CancelGoal_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__init(action_msgs__srv__CancelGoal_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = action_msgs__srv__CancelGoal_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__Sequence__fini(action_msgs__srv__CancelGoal_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__Sequence__fini$descriptor() {
        return action_msgs__srv__CancelGoal_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__Sequence__fini(action_msgs__srv__CancelGoal_Request__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__Sequence__fini$handle() {
        return action_msgs__srv__CancelGoal_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__Sequence__fini(action_msgs__srv__CancelGoal_Request__Sequence *array)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Request__Sequence__fini(MemorySegment array) {
        var mh$ = action_msgs__srv__CancelGoal_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Request__Sequence *action_msgs__srv__CancelGoal_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__Sequence__create$descriptor() {
        return action_msgs__srv__CancelGoal_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Request__Sequence *action_msgs__srv__CancelGoal_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__Sequence__create$handle() {
        return action_msgs__srv__CancelGoal_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Request__Sequence *action_msgs__srv__CancelGoal_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment action_msgs__srv__CancelGoal_Request__Sequence__create(long size) {
        var mh$ = action_msgs__srv__CancelGoal_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__Sequence__destroy(action_msgs__srv__CancelGoal_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__Sequence__destroy$descriptor() {
        return action_msgs__srv__CancelGoal_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__Sequence__destroy(action_msgs__srv__CancelGoal_Request__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__Sequence__destroy$handle() {
        return action_msgs__srv__CancelGoal_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Request__Sequence__destroy(action_msgs__srv__CancelGoal_Request__Sequence *array)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = action_msgs__srv__CancelGoal_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__are_equal(const action_msgs__srv__CancelGoal_Request__Sequence *lhs, const action_msgs__srv__CancelGoal_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__Sequence__are_equal$descriptor() {
        return action_msgs__srv__CancelGoal_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__are_equal(const action_msgs__srv__CancelGoal_Request__Sequence *lhs, const action_msgs__srv__CancelGoal_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__Sequence__are_equal$handle() {
        return action_msgs__srv__CancelGoal_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__are_equal(const action_msgs__srv__CancelGoal_Request__Sequence *lhs, const action_msgs__srv__CancelGoal_Request__Sequence *rhs)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__srv__CancelGoal_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__copy(const action_msgs__srv__CancelGoal_Request__Sequence *input, action_msgs__srv__CancelGoal_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Request__Sequence__copy$descriptor() {
        return action_msgs__srv__CancelGoal_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__copy(const action_msgs__srv__CancelGoal_Request__Sequence *input, action_msgs__srv__CancelGoal_Request__Sequence *output)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Request__Sequence__copy$handle() {
        return action_msgs__srv__CancelGoal_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Request__Sequence__copy(const action_msgs__srv__CancelGoal_Request__Sequence *input, action_msgs__srv__CancelGoal_Request__Sequence *output)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__srv__CancelGoal_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__init(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__init$descriptor() {
        return action_msgs__srv__CancelGoal_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__init(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__init$handle() {
        return action_msgs__srv__CancelGoal_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__init(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Response__init(MemorySegment msg) {
        var mh$ = action_msgs__srv__CancelGoal_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__fini(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__fini$descriptor() {
        return action_msgs__srv__CancelGoal_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__fini(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__fini$handle() {
        return action_msgs__srv__CancelGoal_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__fini(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Response__fini(MemorySegment msg) {
        var mh$ = action_msgs__srv__CancelGoal_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Response *action_msgs__srv__CancelGoal_Response__create()
     * }
     */
    public static class action_msgs__srv__CancelGoal_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private action_msgs__srv__CancelGoal_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * action_msgs__srv__CancelGoal_Response *action_msgs__srv__CancelGoal_Response__create()
         * }
         */
        public static action_msgs__srv__CancelGoal_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new action_msgs__srv__CancelGoal_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("action_msgs__srv__CancelGoal_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__destroy(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__destroy$descriptor() {
        return action_msgs__srv__CancelGoal_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__destroy(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__destroy$handle() {
        return action_msgs__srv__CancelGoal_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__destroy(action_msgs__srv__CancelGoal_Response *msg)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Response__destroy(MemorySegment msg) {
        var mh$ = action_msgs__srv__CancelGoal_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__are_equal(const action_msgs__srv__CancelGoal_Response *lhs, const action_msgs__srv__CancelGoal_Response *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__are_equal$descriptor() {
        return action_msgs__srv__CancelGoal_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__are_equal(const action_msgs__srv__CancelGoal_Response *lhs, const action_msgs__srv__CancelGoal_Response *rhs)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__are_equal$handle() {
        return action_msgs__srv__CancelGoal_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__are_equal(const action_msgs__srv__CancelGoal_Response *lhs, const action_msgs__srv__CancelGoal_Response *rhs)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__srv__CancelGoal_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__copy(const action_msgs__srv__CancelGoal_Response *input, action_msgs__srv__CancelGoal_Response *output)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__copy$descriptor() {
        return action_msgs__srv__CancelGoal_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__copy(const action_msgs__srv__CancelGoal_Response *input, action_msgs__srv__CancelGoal_Response *output)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__copy$handle() {
        return action_msgs__srv__CancelGoal_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__copy(const action_msgs__srv__CancelGoal_Response *input, action_msgs__srv__CancelGoal_Response *output)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__srv__CancelGoal_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__init(action_msgs__srv__CancelGoal_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__Sequence__init$descriptor() {
        return action_msgs__srv__CancelGoal_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__init(action_msgs__srv__CancelGoal_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__Sequence__init$handle() {
        return action_msgs__srv__CancelGoal_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__init(action_msgs__srv__CancelGoal_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = action_msgs__srv__CancelGoal_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__Sequence__fini(action_msgs__srv__CancelGoal_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__Sequence__fini$descriptor() {
        return action_msgs__srv__CancelGoal_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__Sequence__fini(action_msgs__srv__CancelGoal_Response__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__Sequence__fini$handle() {
        return action_msgs__srv__CancelGoal_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__Sequence__fini(action_msgs__srv__CancelGoal_Response__Sequence *array)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Response__Sequence__fini(MemorySegment array) {
        var mh$ = action_msgs__srv__CancelGoal_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Response__Sequence *action_msgs__srv__CancelGoal_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__Sequence__create$descriptor() {
        return action_msgs__srv__CancelGoal_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Response__Sequence *action_msgs__srv__CancelGoal_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__Sequence__create$handle() {
        return action_msgs__srv__CancelGoal_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * action_msgs__srv__CancelGoal_Response__Sequence *action_msgs__srv__CancelGoal_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment action_msgs__srv__CancelGoal_Response__Sequence__create(long size) {
        var mh$ = action_msgs__srv__CancelGoal_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__Sequence__destroy(action_msgs__srv__CancelGoal_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__Sequence__destroy$descriptor() {
        return action_msgs__srv__CancelGoal_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__Sequence__destroy(action_msgs__srv__CancelGoal_Response__Sequence *array)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__Sequence__destroy$handle() {
        return action_msgs__srv__CancelGoal_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void action_msgs__srv__CancelGoal_Response__Sequence__destroy(action_msgs__srv__CancelGoal_Response__Sequence *array)
     * }
     */
    public static void action_msgs__srv__CancelGoal_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = action_msgs__srv__CancelGoal_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__are_equal(const action_msgs__srv__CancelGoal_Response__Sequence *lhs, const action_msgs__srv__CancelGoal_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__Sequence__are_equal$descriptor() {
        return action_msgs__srv__CancelGoal_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__are_equal(const action_msgs__srv__CancelGoal_Response__Sequence *lhs, const action_msgs__srv__CancelGoal_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__Sequence__are_equal$handle() {
        return action_msgs__srv__CancelGoal_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__are_equal(const action_msgs__srv__CancelGoal_Response__Sequence *lhs, const action_msgs__srv__CancelGoal_Response__Sequence *rhs)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = action_msgs__srv__CancelGoal_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class action_msgs__srv__CancelGoal_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("action_msgs__srv__CancelGoal_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__copy(const action_msgs__srv__CancelGoal_Response__Sequence *input, action_msgs__srv__CancelGoal_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor action_msgs__srv__CancelGoal_Response__Sequence__copy$descriptor() {
        return action_msgs__srv__CancelGoal_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__copy(const action_msgs__srv__CancelGoal_Response__Sequence *input, action_msgs__srv__CancelGoal_Response__Sequence *output)
     * }
     */
    public static MethodHandle action_msgs__srv__CancelGoal_Response__Sequence__copy$handle() {
        return action_msgs__srv__CancelGoal_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool action_msgs__srv__CancelGoal_Response__Sequence__copy(const action_msgs__srv__CancelGoal_Response__Sequence *input, action_msgs__srv__CancelGoal_Response__Sequence *output)
     * }
     */
    public static boolean action_msgs__srv__CancelGoal_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = action_msgs__srv__CancelGoal_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("action_msgs__srv__CancelGoal_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int8_t rcl_action_goal_state_t
     * }
     */
    public static final OfByte rcl_action_goal_state_t = gen_h.C_CHAR;

    private static class goal_state_descriptions$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(0, gen_h.C_POINTER);
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("goal_state_descriptions").reinterpret(LAYOUT.byteSize());
        public static final VarHandle HANDLE = LAYOUT.varHandle();

        public static final long[] DIMS = {  };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *goal_state_descriptions[]
     * }
     */
    public static SequenceLayout goal_state_descriptions$layout() {
        return goal_state_descriptions$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const char *goal_state_descriptions[]
     * }
     */
    public static long[] goal_state_descriptions$dimensions() {
        return goal_state_descriptions$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *goal_state_descriptions[]
     * }
     */
    public static MemorySegment goal_state_descriptions() {
        return goal_state_descriptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *goal_state_descriptions[]
     * }
     */
    public static void goal_state_descriptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, goal_state_descriptions$constants.SEGMENT, 0L, goal_state_descriptions$constants.LAYOUT.byteSize());
    }

    private static class goal_event_descriptions$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(0, gen_h.C_POINTER);
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("goal_event_descriptions").reinterpret(LAYOUT.byteSize());
        public static final VarHandle HANDLE = LAYOUT.varHandle();

        public static final long[] DIMS = {  };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *goal_event_descriptions[]
     * }
     */
    public static SequenceLayout goal_event_descriptions$layout() {
        return goal_event_descriptions$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const char *goal_event_descriptions[]
     * }
     */
    public static long[] goal_event_descriptions$dimensions() {
        return goal_event_descriptions$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *goal_event_descriptions[]
     * }
     */
    public static MemorySegment goal_event_descriptions() {
        return goal_event_descriptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *goal_event_descriptions[]
     * }
     */
    public static void goal_event_descriptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, goal_event_descriptions$constants.SEGMENT, 0L, goal_event_descriptions$constants.LAYOUT.byteSize());
    }
    private static final int GOAL_EVENT_EXECUTE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum rcl_action_goal_event_e.GOAL_EVENT_EXECUTE = 0
     * }
     */
    public static int GOAL_EVENT_EXECUTE() {
        return GOAL_EVENT_EXECUTE;
    }
    private static final int GOAL_EVENT_CANCEL_GOAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum rcl_action_goal_event_e.GOAL_EVENT_CANCEL_GOAL = 1
     * }
     */
    public static int GOAL_EVENT_CANCEL_GOAL() {
        return GOAL_EVENT_CANCEL_GOAL;
    }
    private static final int GOAL_EVENT_SUCCEED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum rcl_action_goal_event_e.GOAL_EVENT_SUCCEED = 2
     * }
     */
    public static int GOAL_EVENT_SUCCEED() {
        return GOAL_EVENT_SUCCEED;
    }
    private static final int GOAL_EVENT_ABORT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum rcl_action_goal_event_e.GOAL_EVENT_ABORT = 3
     * }
     */
    public static int GOAL_EVENT_ABORT() {
        return GOAL_EVENT_ABORT;
    }
    private static final int GOAL_EVENT_CANCELED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum rcl_action_goal_event_e.GOAL_EVENT_CANCELED = 4
     * }
     */
    public static int GOAL_EVENT_CANCELED() {
        return GOAL_EVENT_CANCELED;
    }
    private static final int GOAL_EVENT_NUM_EVENTS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum rcl_action_goal_event_e.GOAL_EVENT_NUM_EVENTS = 5
     * }
     */
    public static int GOAL_EVENT_NUM_EVENTS() {
        return GOAL_EVENT_NUM_EVENTS;
    }

    private static class rcl_action_get_zero_initialized_goal_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            action_msgs__msg__GoalInfo.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_zero_initialized_goal_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_goal_info_t rcl_action_get_zero_initialized_goal_info()
     * }
     */
    public static FunctionDescriptor rcl_action_get_zero_initialized_goal_info$descriptor() {
        return rcl_action_get_zero_initialized_goal_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_goal_info_t rcl_action_get_zero_initialized_goal_info()
     * }
     */
    public static MethodHandle rcl_action_get_zero_initialized_goal_info$handle() {
        return rcl_action_get_zero_initialized_goal_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_goal_info_t rcl_action_get_zero_initialized_goal_info()
     * }
     */
    public static MemorySegment rcl_action_get_zero_initialized_goal_info(SegmentAllocator allocator) {
        var mh$ = rcl_action_get_zero_initialized_goal_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_zero_initialized_goal_info", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_zero_initialized_goal_status_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_action_goal_status_array_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_zero_initialized_goal_status_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_goal_status_array_t rcl_action_get_zero_initialized_goal_status_array()
     * }
     */
    public static FunctionDescriptor rcl_action_get_zero_initialized_goal_status_array$descriptor() {
        return rcl_action_get_zero_initialized_goal_status_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_goal_status_array_t rcl_action_get_zero_initialized_goal_status_array()
     * }
     */
    public static MethodHandle rcl_action_get_zero_initialized_goal_status_array$handle() {
        return rcl_action_get_zero_initialized_goal_status_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_goal_status_array_t rcl_action_get_zero_initialized_goal_status_array()
     * }
     */
    public static MemorySegment rcl_action_get_zero_initialized_goal_status_array(SegmentAllocator allocator) {
        var mh$ = rcl_action_get_zero_initialized_goal_status_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_zero_initialized_goal_status_array", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_zero_initialized_cancel_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            action_msgs__srv__CancelGoal_Request.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_zero_initialized_cancel_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_cancel_request_t rcl_action_get_zero_initialized_cancel_request()
     * }
     */
    public static FunctionDescriptor rcl_action_get_zero_initialized_cancel_request$descriptor() {
        return rcl_action_get_zero_initialized_cancel_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_cancel_request_t rcl_action_get_zero_initialized_cancel_request()
     * }
     */
    public static MethodHandle rcl_action_get_zero_initialized_cancel_request$handle() {
        return rcl_action_get_zero_initialized_cancel_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_cancel_request_t rcl_action_get_zero_initialized_cancel_request()
     * }
     */
    public static MemorySegment rcl_action_get_zero_initialized_cancel_request(SegmentAllocator allocator) {
        var mh$ = rcl_action_get_zero_initialized_cancel_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_zero_initialized_cancel_request", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_zero_initialized_cancel_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_action_cancel_response_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_zero_initialized_cancel_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_cancel_response_t rcl_action_get_zero_initialized_cancel_response()
     * }
     */
    public static FunctionDescriptor rcl_action_get_zero_initialized_cancel_response$descriptor() {
        return rcl_action_get_zero_initialized_cancel_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_cancel_response_t rcl_action_get_zero_initialized_cancel_response()
     * }
     */
    public static MethodHandle rcl_action_get_zero_initialized_cancel_response$handle() {
        return rcl_action_get_zero_initialized_cancel_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_cancel_response_t rcl_action_get_zero_initialized_cancel_response()
     * }
     */
    public static MemorySegment rcl_action_get_zero_initialized_cancel_response(SegmentAllocator allocator) {
        var mh$ = rcl_action_get_zero_initialized_cancel_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_zero_initialized_cancel_response", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_status_array_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_status_array_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_status_array_init(rcl_action_goal_status_array_t *status_array, const size_t num_status, const rcl_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_status_array_init$descriptor() {
        return rcl_action_goal_status_array_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_status_array_init(rcl_action_goal_status_array_t *status_array, const size_t num_status, const rcl_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_action_goal_status_array_init$handle() {
        return rcl_action_goal_status_array_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_status_array_init(rcl_action_goal_status_array_t *status_array, const size_t num_status, const rcl_allocator_t allocator)
     * }
     */
    public static int rcl_action_goal_status_array_init(MemorySegment status_array, long num_status, MemorySegment allocator) {
        var mh$ = rcl_action_goal_status_array_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_status_array_init", status_array, num_status, allocator);
            }
            return (int)mh$.invokeExact(status_array, num_status, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_status_array_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_status_array_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_status_array_fini(rcl_action_goal_status_array_t *status_array)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_status_array_fini$descriptor() {
        return rcl_action_goal_status_array_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_status_array_fini(rcl_action_goal_status_array_t *status_array)
     * }
     */
    public static MethodHandle rcl_action_goal_status_array_fini$handle() {
        return rcl_action_goal_status_array_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_status_array_fini(rcl_action_goal_status_array_t *status_array)
     * }
     */
    public static int rcl_action_goal_status_array_fini(MemorySegment status_array) {
        var mh$ = rcl_action_goal_status_array_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_status_array_fini", status_array);
            }
            return (int)mh$.invokeExact(status_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_cancel_response_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_cancel_response_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_cancel_response_init(rcl_action_cancel_response_t *cancel_response, const size_t num_goals_canceling, const rcl_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_action_cancel_response_init$descriptor() {
        return rcl_action_cancel_response_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_cancel_response_init(rcl_action_cancel_response_t *cancel_response, const size_t num_goals_canceling, const rcl_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_action_cancel_response_init$handle() {
        return rcl_action_cancel_response_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_cancel_response_init(rcl_action_cancel_response_t *cancel_response, const size_t num_goals_canceling, const rcl_allocator_t allocator)
     * }
     */
    public static int rcl_action_cancel_response_init(MemorySegment cancel_response, long num_goals_canceling, MemorySegment allocator) {
        var mh$ = rcl_action_cancel_response_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_cancel_response_init", cancel_response, num_goals_canceling, allocator);
            }
            return (int)mh$.invokeExact(cancel_response, num_goals_canceling, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_cancel_response_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_cancel_response_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_cancel_response_fini(rcl_action_cancel_response_t *cancel_response)
     * }
     */
    public static FunctionDescriptor rcl_action_cancel_response_fini$descriptor() {
        return rcl_action_cancel_response_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_cancel_response_fini(rcl_action_cancel_response_t *cancel_response)
     * }
     */
    public static MethodHandle rcl_action_cancel_response_fini$handle() {
        return rcl_action_cancel_response_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_cancel_response_fini(rcl_action_cancel_response_t *cancel_response)
     * }
     */
    public static int rcl_action_cancel_response_fini(MemorySegment cancel_response) {
        var mh$ = rcl_action_cancel_response_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_cancel_response_fini", cancel_response);
            }
            return (int)mh$.invokeExact(cancel_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_zero_initialized_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_action_client_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_zero_initialized_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_client_t rcl_action_get_zero_initialized_client()
     * }
     */
    public static FunctionDescriptor rcl_action_get_zero_initialized_client$descriptor() {
        return rcl_action_get_zero_initialized_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_client_t rcl_action_get_zero_initialized_client()
     * }
     */
    public static MethodHandle rcl_action_get_zero_initialized_client$handle() {
        return rcl_action_get_zero_initialized_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_client_t rcl_action_get_zero_initialized_client()
     * }
     */
    public static MemorySegment rcl_action_get_zero_initialized_client(SegmentAllocator allocator) {
        var mh$ = rcl_action_get_zero_initialized_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_zero_initialized_client", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_init(rcl_action_client_t *action_client, rcl_node_t *node, const rosidl_action_type_support_t *type_support, const char *action_name, const rcl_action_client_options_t *options)
     * }
     */
    public static FunctionDescriptor rcl_action_client_init$descriptor() {
        return rcl_action_client_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_init(rcl_action_client_t *action_client, rcl_node_t *node, const rosidl_action_type_support_t *type_support, const char *action_name, const rcl_action_client_options_t *options)
     * }
     */
    public static MethodHandle rcl_action_client_init$handle() {
        return rcl_action_client_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_init(rcl_action_client_t *action_client, rcl_node_t *node, const rosidl_action_type_support_t *type_support, const char *action_name, const rcl_action_client_options_t *options)
     * }
     */
    public static int rcl_action_client_init(MemorySegment action_client, MemorySegment node, MemorySegment type_support, MemorySegment action_name, MemorySegment options) {
        var mh$ = rcl_action_client_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_init", action_client, node, type_support, action_name, options);
            }
            return (int)mh$.invokeExact(action_client, node, type_support, action_name, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_fini(rcl_action_client_t *action_client, rcl_node_t *node)
     * }
     */
    public static FunctionDescriptor rcl_action_client_fini$descriptor() {
        return rcl_action_client_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_fini(rcl_action_client_t *action_client, rcl_node_t *node)
     * }
     */
    public static MethodHandle rcl_action_client_fini$handle() {
        return rcl_action_client_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_fini(rcl_action_client_t *action_client, rcl_node_t *node)
     * }
     */
    public static int rcl_action_client_fini(MemorySegment action_client, MemorySegment node) {
        var mh$ = rcl_action_client_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_fini", action_client, node);
            }
            return (int)mh$.invokeExact(action_client, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_get_default_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_action_client_options_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_get_default_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_client_options_t rcl_action_client_get_default_options()
     * }
     */
    public static FunctionDescriptor rcl_action_client_get_default_options$descriptor() {
        return rcl_action_client_get_default_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_client_options_t rcl_action_client_get_default_options()
     * }
     */
    public static MethodHandle rcl_action_client_get_default_options$handle() {
        return rcl_action_client_get_default_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_client_options_t rcl_action_client_get_default_options()
     * }
     */
    public static MemorySegment rcl_action_client_get_default_options(SegmentAllocator allocator) {
        var mh$ = rcl_action_client_get_default_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_get_default_options", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_is_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_is_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_is_available(const rcl_node_t *node, const rcl_action_client_t *client, bool *is_available)
     * }
     */
    public static FunctionDescriptor rcl_action_server_is_available$descriptor() {
        return rcl_action_server_is_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_is_available(const rcl_node_t *node, const rcl_action_client_t *client, bool *is_available)
     * }
     */
    public static MethodHandle rcl_action_server_is_available$handle() {
        return rcl_action_server_is_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_is_available(const rcl_node_t *node, const rcl_action_client_t *client, bool *is_available)
     * }
     */
    public static int rcl_action_server_is_available(MemorySegment node, MemorySegment client, MemorySegment is_available) {
        var mh$ = rcl_action_server_is_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_is_available", node, client, is_available);
            }
            return (int)mh$.invokeExact(node, client, is_available);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_send_goal_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_send_goal_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_goal_request(const rcl_action_client_t *action_client, const void *ros_goal_request, int64_t *sequence_number)
     * }
     */
    public static FunctionDescriptor rcl_action_send_goal_request$descriptor() {
        return rcl_action_send_goal_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_goal_request(const rcl_action_client_t *action_client, const void *ros_goal_request, int64_t *sequence_number)
     * }
     */
    public static MethodHandle rcl_action_send_goal_request$handle() {
        return rcl_action_send_goal_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_goal_request(const rcl_action_client_t *action_client, const void *ros_goal_request, int64_t *sequence_number)
     * }
     */
    public static int rcl_action_send_goal_request(MemorySegment action_client, MemorySegment ros_goal_request, MemorySegment sequence_number) {
        var mh$ = rcl_action_send_goal_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_send_goal_request", action_client, ros_goal_request, sequence_number);
            }
            return (int)mh$.invokeExact(action_client, ros_goal_request, sequence_number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_goal_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_goal_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_goal_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_goal_response)
     * }
     */
    public static FunctionDescriptor rcl_action_take_goal_response$descriptor() {
        return rcl_action_take_goal_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_goal_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_goal_response)
     * }
     */
    public static MethodHandle rcl_action_take_goal_response$handle() {
        return rcl_action_take_goal_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_goal_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_goal_response)
     * }
     */
    public static int rcl_action_take_goal_response(MemorySegment action_client, MemorySegment response_header, MemorySegment ros_goal_response) {
        var mh$ = rcl_action_take_goal_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_goal_response", action_client, response_header, ros_goal_response);
            }
            return (int)mh$.invokeExact(action_client, response_header, ros_goal_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_feedback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_feedback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_feedback(const rcl_action_client_t *action_client, void *ros_feedback)
     * }
     */
    public static FunctionDescriptor rcl_action_take_feedback$descriptor() {
        return rcl_action_take_feedback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_feedback(const rcl_action_client_t *action_client, void *ros_feedback)
     * }
     */
    public static MethodHandle rcl_action_take_feedback$handle() {
        return rcl_action_take_feedback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_feedback(const rcl_action_client_t *action_client, void *ros_feedback)
     * }
     */
    public static int rcl_action_take_feedback(MemorySegment action_client, MemorySegment ros_feedback) {
        var mh$ = rcl_action_take_feedback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_feedback", action_client, ros_feedback);
            }
            return (int)mh$.invokeExact(action_client, ros_feedback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_status(const rcl_action_client_t *action_client, void *ros_status_array)
     * }
     */
    public static FunctionDescriptor rcl_action_take_status$descriptor() {
        return rcl_action_take_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_status(const rcl_action_client_t *action_client, void *ros_status_array)
     * }
     */
    public static MethodHandle rcl_action_take_status$handle() {
        return rcl_action_take_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_status(const rcl_action_client_t *action_client, void *ros_status_array)
     * }
     */
    public static int rcl_action_take_status(MemorySegment action_client, MemorySegment ros_status_array) {
        var mh$ = rcl_action_take_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_status", action_client, ros_status_array);
            }
            return (int)mh$.invokeExact(action_client, ros_status_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_send_result_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_send_result_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_result_request(const rcl_action_client_t *action_client, const void *ros_result_request, int64_t *sequence_number)
     * }
     */
    public static FunctionDescriptor rcl_action_send_result_request$descriptor() {
        return rcl_action_send_result_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_result_request(const rcl_action_client_t *action_client, const void *ros_result_request, int64_t *sequence_number)
     * }
     */
    public static MethodHandle rcl_action_send_result_request$handle() {
        return rcl_action_send_result_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_result_request(const rcl_action_client_t *action_client, const void *ros_result_request, int64_t *sequence_number)
     * }
     */
    public static int rcl_action_send_result_request(MemorySegment action_client, MemorySegment ros_result_request, MemorySegment sequence_number) {
        var mh$ = rcl_action_send_result_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_send_result_request", action_client, ros_result_request, sequence_number);
            }
            return (int)mh$.invokeExact(action_client, ros_result_request, sequence_number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_result_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_result_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_result_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_result)
     * }
     */
    public static FunctionDescriptor rcl_action_take_result_response$descriptor() {
        return rcl_action_take_result_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_result_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_result)
     * }
     */
    public static MethodHandle rcl_action_take_result_response$handle() {
        return rcl_action_take_result_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_result_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_result)
     * }
     */
    public static int rcl_action_take_result_response(MemorySegment action_client, MemorySegment response_header, MemorySegment ros_result) {
        var mh$ = rcl_action_take_result_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_result_response", action_client, response_header, ros_result);
            }
            return (int)mh$.invokeExact(action_client, response_header, ros_result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_send_cancel_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_send_cancel_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_cancel_request(const rcl_action_client_t *action_client, const void *ros_cancel_request, int64_t *sequence_number)
     * }
     */
    public static FunctionDescriptor rcl_action_send_cancel_request$descriptor() {
        return rcl_action_send_cancel_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_cancel_request(const rcl_action_client_t *action_client, const void *ros_cancel_request, int64_t *sequence_number)
     * }
     */
    public static MethodHandle rcl_action_send_cancel_request$handle() {
        return rcl_action_send_cancel_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_cancel_request(const rcl_action_client_t *action_client, const void *ros_cancel_request, int64_t *sequence_number)
     * }
     */
    public static int rcl_action_send_cancel_request(MemorySegment action_client, MemorySegment ros_cancel_request, MemorySegment sequence_number) {
        var mh$ = rcl_action_send_cancel_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_send_cancel_request", action_client, ros_cancel_request, sequence_number);
            }
            return (int)mh$.invokeExact(action_client, ros_cancel_request, sequence_number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_cancel_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_cancel_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_cancel_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_cancel_response)
     * }
     */
    public static FunctionDescriptor rcl_action_take_cancel_response$descriptor() {
        return rcl_action_take_cancel_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_cancel_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_cancel_response)
     * }
     */
    public static MethodHandle rcl_action_take_cancel_response$handle() {
        return rcl_action_take_cancel_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_cancel_response(const rcl_action_client_t *action_client, rmw_request_id_t *response_header, void *ros_cancel_response)
     * }
     */
    public static int rcl_action_take_cancel_response(MemorySegment action_client, MemorySegment response_header, MemorySegment ros_cancel_response) {
        var mh$ = rcl_action_take_cancel_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_cancel_response", action_client, response_header, ros_cancel_response);
            }
            return (int)mh$.invokeExact(action_client, response_header, ros_cancel_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_get_action_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_get_action_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *rcl_action_client_get_action_name(const rcl_action_client_t *action_client)
     * }
     */
    public static FunctionDescriptor rcl_action_client_get_action_name$descriptor() {
        return rcl_action_client_get_action_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *rcl_action_client_get_action_name(const rcl_action_client_t *action_client)
     * }
     */
    public static MethodHandle rcl_action_client_get_action_name$handle() {
        return rcl_action_client_get_action_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *rcl_action_client_get_action_name(const rcl_action_client_t *action_client)
     * }
     */
    public static MemorySegment rcl_action_client_get_action_name(MemorySegment action_client) {
        var mh$ = rcl_action_client_get_action_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_get_action_name", action_client);
            }
            return (MemorySegment)mh$.invokeExact(action_client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_get_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_get_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const rcl_action_client_options_t *rcl_action_client_get_options(const rcl_action_client_t *action_client)
     * }
     */
    public static FunctionDescriptor rcl_action_client_get_options$descriptor() {
        return rcl_action_client_get_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const rcl_action_client_options_t *rcl_action_client_get_options(const rcl_action_client_t *action_client)
     * }
     */
    public static MethodHandle rcl_action_client_get_options$handle() {
        return rcl_action_client_get_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const rcl_action_client_options_t *rcl_action_client_get_options(const rcl_action_client_t *action_client)
     * }
     */
    public static MemorySegment rcl_action_client_get_options(MemorySegment action_client) {
        var mh$ = rcl_action_client_get_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_get_options", action_client);
            }
            return (MemorySegment)mh$.invokeExact(action_client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_action_client_is_valid(const rcl_action_client_t *action_client)
     * }
     */
    public static FunctionDescriptor rcl_action_client_is_valid$descriptor() {
        return rcl_action_client_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_action_client_is_valid(const rcl_action_client_t *action_client)
     * }
     */
    public static MethodHandle rcl_action_client_is_valid$handle() {
        return rcl_action_client_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_action_client_is_valid(const rcl_action_client_t *action_client)
     * }
     */
    public static boolean rcl_action_client_is_valid(MemorySegment action_client) {
        var mh$ = rcl_action_client_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_is_valid", action_client);
            }
            return (boolean)mh$.invokeExact(action_client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_set_goal_client_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_set_goal_client_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_goal_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_client_set_goal_client_callback$descriptor() {
        return rcl_action_client_set_goal_client_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_goal_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_client_set_goal_client_callback$handle() {
        return rcl_action_client_set_goal_client_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_goal_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_client_set_goal_client_callback(MemorySegment action_client, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_client_set_goal_client_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_set_goal_client_callback", action_client, callback, user_data);
            }
            return (int)mh$.invokeExact(action_client, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_set_cancel_client_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_set_cancel_client_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_cancel_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_client_set_cancel_client_callback$descriptor() {
        return rcl_action_client_set_cancel_client_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_cancel_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_client_set_cancel_client_callback$handle() {
        return rcl_action_client_set_cancel_client_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_cancel_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_client_set_cancel_client_callback(MemorySegment action_client, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_client_set_cancel_client_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_set_cancel_client_callback", action_client, callback, user_data);
            }
            return (int)mh$.invokeExact(action_client, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_set_result_client_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_set_result_client_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_result_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_client_set_result_client_callback$descriptor() {
        return rcl_action_client_set_result_client_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_result_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_client_set_result_client_callback$handle() {
        return rcl_action_client_set_result_client_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_result_client_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_client_set_result_client_callback(MemorySegment action_client, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_client_set_result_client_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_set_result_client_callback", action_client, callback, user_data);
            }
            return (int)mh$.invokeExact(action_client, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_set_feedback_subscription_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_set_feedback_subscription_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_feedback_subscription_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_client_set_feedback_subscription_callback$descriptor() {
        return rcl_action_client_set_feedback_subscription_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_feedback_subscription_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_client_set_feedback_subscription_callback$handle() {
        return rcl_action_client_set_feedback_subscription_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_feedback_subscription_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_client_set_feedback_subscription_callback(MemorySegment action_client, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_client_set_feedback_subscription_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_set_feedback_subscription_callback", action_client, callback, user_data);
            }
            return (int)mh$.invokeExact(action_client, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_set_status_subscription_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_set_status_subscription_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_status_subscription_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_client_set_status_subscription_callback$descriptor() {
        return rcl_action_client_set_status_subscription_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_status_subscription_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_client_set_status_subscription_callback$handle() {
        return rcl_action_client_set_status_subscription_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_set_status_subscription_callback(const rcl_action_client_t *action_client, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_client_set_status_subscription_callback(MemorySegment action_client, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_client_set_status_subscription_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_set_status_subscription_callback", action_client, callback, user_data);
            }
            return (int)mh$.invokeExact(action_client, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_transition_goal_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_CHAR,
            gen_h.C_CHAR,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_transition_goal_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_goal_state_t rcl_action_transition_goal_state(const rcl_action_goal_state_t state, const rcl_action_goal_event_t event)
     * }
     */
    public static FunctionDescriptor rcl_action_transition_goal_state$descriptor() {
        return rcl_action_transition_goal_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_goal_state_t rcl_action_transition_goal_state(const rcl_action_goal_state_t state, const rcl_action_goal_event_t event)
     * }
     */
    public static MethodHandle rcl_action_transition_goal_state$handle() {
        return rcl_action_transition_goal_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_goal_state_t rcl_action_transition_goal_state(const rcl_action_goal_state_t state, const rcl_action_goal_event_t event)
     * }
     */
    public static byte rcl_action_transition_goal_state(byte state, int event) {
        var mh$ = rcl_action_transition_goal_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_transition_goal_state", state, event);
            }
            return (byte)mh$.invokeExact(state, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_zero_initialized_goal_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_action_goal_handle_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_zero_initialized_goal_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_goal_handle_t rcl_action_get_zero_initialized_goal_handle()
     * }
     */
    public static FunctionDescriptor rcl_action_get_zero_initialized_goal_handle$descriptor() {
        return rcl_action_get_zero_initialized_goal_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_goal_handle_t rcl_action_get_zero_initialized_goal_handle()
     * }
     */
    public static MethodHandle rcl_action_get_zero_initialized_goal_handle$handle() {
        return rcl_action_get_zero_initialized_goal_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_goal_handle_t rcl_action_get_zero_initialized_goal_handle()
     * }
     */
    public static MemorySegment rcl_action_get_zero_initialized_goal_handle(SegmentAllocator allocator) {
        var mh$ = rcl_action_get_zero_initialized_goal_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_zero_initialized_goal_handle", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_handle_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_handle_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_init(rcl_action_goal_handle_t *goal_handle, const rcl_action_goal_info_t *goal_info, rcl_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_handle_init$descriptor() {
        return rcl_action_goal_handle_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_init(rcl_action_goal_handle_t *goal_handle, const rcl_action_goal_info_t *goal_info, rcl_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_action_goal_handle_init$handle() {
        return rcl_action_goal_handle_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_init(rcl_action_goal_handle_t *goal_handle, const rcl_action_goal_info_t *goal_info, rcl_allocator_t allocator)
     * }
     */
    public static int rcl_action_goal_handle_init(MemorySegment goal_handle, MemorySegment goal_info, MemorySegment allocator) {
        var mh$ = rcl_action_goal_handle_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_handle_init", goal_handle, goal_info, allocator);
            }
            return (int)mh$.invokeExact(goal_handle, goal_info, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_handle_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_handle_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_fini(rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_handle_fini$descriptor() {
        return rcl_action_goal_handle_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_fini(rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static MethodHandle rcl_action_goal_handle_fini$handle() {
        return rcl_action_goal_handle_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_fini(rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static int rcl_action_goal_handle_fini(MemorySegment goal_handle) {
        var mh$ = rcl_action_goal_handle_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_handle_fini", goal_handle);
            }
            return (int)mh$.invokeExact(goal_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_update_goal_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_update_goal_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_update_goal_state(rcl_action_goal_handle_t *goal_handle, const rcl_action_goal_event_t goal_event)
     * }
     */
    public static FunctionDescriptor rcl_action_update_goal_state$descriptor() {
        return rcl_action_update_goal_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_update_goal_state(rcl_action_goal_handle_t *goal_handle, const rcl_action_goal_event_t goal_event)
     * }
     */
    public static MethodHandle rcl_action_update_goal_state$handle() {
        return rcl_action_update_goal_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_update_goal_state(rcl_action_goal_handle_t *goal_handle, const rcl_action_goal_event_t goal_event)
     * }
     */
    public static int rcl_action_update_goal_state(MemorySegment goal_handle, int goal_event) {
        var mh$ = rcl_action_update_goal_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_update_goal_state", goal_handle, goal_event);
            }
            return (int)mh$.invokeExact(goal_handle, goal_event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_handle_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_handle_get_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_get_info(const rcl_action_goal_handle_t *goal_handle, rcl_action_goal_info_t *goal_info)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_handle_get_info$descriptor() {
        return rcl_action_goal_handle_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_get_info(const rcl_action_goal_handle_t *goal_handle, rcl_action_goal_info_t *goal_info)
     * }
     */
    public static MethodHandle rcl_action_goal_handle_get_info$handle() {
        return rcl_action_goal_handle_get_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_get_info(const rcl_action_goal_handle_t *goal_handle, rcl_action_goal_info_t *goal_info)
     * }
     */
    public static int rcl_action_goal_handle_get_info(MemorySegment goal_handle, MemorySegment goal_info) {
        var mh$ = rcl_action_goal_handle_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_handle_get_info", goal_handle, goal_info);
            }
            return (int)mh$.invokeExact(goal_handle, goal_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_handle_get_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_handle_get_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_get_status(const rcl_action_goal_handle_t *goal_handle, rcl_action_goal_state_t *status)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_handle_get_status$descriptor() {
        return rcl_action_goal_handle_get_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_get_status(const rcl_action_goal_handle_t *goal_handle, rcl_action_goal_state_t *status)
     * }
     */
    public static MethodHandle rcl_action_goal_handle_get_status$handle() {
        return rcl_action_goal_handle_get_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_goal_handle_get_status(const rcl_action_goal_handle_t *goal_handle, rcl_action_goal_state_t *status)
     * }
     */
    public static int rcl_action_goal_handle_get_status(MemorySegment goal_handle, MemorySegment status) {
        var mh$ = rcl_action_goal_handle_get_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_handle_get_status", goal_handle, status);
            }
            return (int)mh$.invokeExact(goal_handle, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_handle_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_handle_is_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_active(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_handle_is_active$descriptor() {
        return rcl_action_goal_handle_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_active(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static MethodHandle rcl_action_goal_handle_is_active$handle() {
        return rcl_action_goal_handle_is_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_active(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static boolean rcl_action_goal_handle_is_active(MemorySegment goal_handle) {
        var mh$ = rcl_action_goal_handle_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_handle_is_active", goal_handle);
            }
            return (boolean)mh$.invokeExact(goal_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_handle_is_cancelable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_handle_is_cancelable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_cancelable(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_handle_is_cancelable$descriptor() {
        return rcl_action_goal_handle_is_cancelable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_cancelable(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static MethodHandle rcl_action_goal_handle_is_cancelable$handle() {
        return rcl_action_goal_handle_is_cancelable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_cancelable(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static boolean rcl_action_goal_handle_is_cancelable(MemorySegment goal_handle) {
        var mh$ = rcl_action_goal_handle_is_cancelable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_handle_is_cancelable", goal_handle);
            }
            return (boolean)mh$.invokeExact(goal_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_goal_handle_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_goal_handle_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_valid(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static FunctionDescriptor rcl_action_goal_handle_is_valid$descriptor() {
        return rcl_action_goal_handle_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_valid(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static MethodHandle rcl_action_goal_handle_is_valid$handle() {
        return rcl_action_goal_handle_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_action_goal_handle_is_valid(const rcl_action_goal_handle_t *goal_handle)
     * }
     */
    public static boolean rcl_action_goal_handle_is_valid(MemorySegment goal_handle) {
        var mh$ = rcl_action_goal_handle_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_goal_handle_is_valid", goal_handle);
            }
            return (boolean)mh$.invokeExact(goal_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_zero_initialized_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_action_server_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_zero_initialized_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_server_t rcl_action_get_zero_initialized_server()
     * }
     */
    public static FunctionDescriptor rcl_action_get_zero_initialized_server$descriptor() {
        return rcl_action_get_zero_initialized_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_server_t rcl_action_get_zero_initialized_server()
     * }
     */
    public static MethodHandle rcl_action_get_zero_initialized_server$handle() {
        return rcl_action_get_zero_initialized_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_server_t rcl_action_get_zero_initialized_server()
     * }
     */
    public static MemorySegment rcl_action_get_zero_initialized_server(SegmentAllocator allocator) {
        var mh$ = rcl_action_get_zero_initialized_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_zero_initialized_server", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_init(rcl_action_server_t *action_server, rcl_node_t *node, rcl_clock_t *clock, const rosidl_action_type_support_t *type_support, const char *action_name, const rcl_action_server_options_t *options)
     * }
     */
    public static FunctionDescriptor rcl_action_server_init$descriptor() {
        return rcl_action_server_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_init(rcl_action_server_t *action_server, rcl_node_t *node, rcl_clock_t *clock, const rosidl_action_type_support_t *type_support, const char *action_name, const rcl_action_server_options_t *options)
     * }
     */
    public static MethodHandle rcl_action_server_init$handle() {
        return rcl_action_server_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_init(rcl_action_server_t *action_server, rcl_node_t *node, rcl_clock_t *clock, const rosidl_action_type_support_t *type_support, const char *action_name, const rcl_action_server_options_t *options)
     * }
     */
    public static int rcl_action_server_init(MemorySegment action_server, MemorySegment node, MemorySegment clock, MemorySegment type_support, MemorySegment action_name, MemorySegment options) {
        var mh$ = rcl_action_server_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_init", action_server, node, clock, type_support, action_name, options);
            }
            return (int)mh$.invokeExact(action_server, node, clock, type_support, action_name, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_fini(rcl_action_server_t *action_server, rcl_node_t *node)
     * }
     */
    public static FunctionDescriptor rcl_action_server_fini$descriptor() {
        return rcl_action_server_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_fini(rcl_action_server_t *action_server, rcl_node_t *node)
     * }
     */
    public static MethodHandle rcl_action_server_fini$handle() {
        return rcl_action_server_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_fini(rcl_action_server_t *action_server, rcl_node_t *node)
     * }
     */
    public static int rcl_action_server_fini(MemorySegment action_server, MemorySegment node) {
        var mh$ = rcl_action_server_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_fini", action_server, node);
            }
            return (int)mh$.invokeExact(action_server, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_get_default_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rcl_action_server_options_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_get_default_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_server_options_t rcl_action_server_get_default_options()
     * }
     */
    public static FunctionDescriptor rcl_action_server_get_default_options$descriptor() {
        return rcl_action_server_get_default_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_server_options_t rcl_action_server_get_default_options()
     * }
     */
    public static MethodHandle rcl_action_server_get_default_options$handle() {
        return rcl_action_server_get_default_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_server_options_t rcl_action_server_get_default_options()
     * }
     */
    public static MemorySegment rcl_action_server_get_default_options(SegmentAllocator allocator) {
        var mh$ = rcl_action_server_get_default_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_get_default_options", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_goal_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_goal_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_goal_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_goal_request)
     * }
     */
    public static FunctionDescriptor rcl_action_take_goal_request$descriptor() {
        return rcl_action_take_goal_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_goal_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_goal_request)
     * }
     */
    public static MethodHandle rcl_action_take_goal_request$handle() {
        return rcl_action_take_goal_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_goal_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_goal_request)
     * }
     */
    public static int rcl_action_take_goal_request(MemorySegment action_server, MemorySegment request_header, MemorySegment ros_goal_request) {
        var mh$ = rcl_action_take_goal_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_goal_request", action_server, request_header, ros_goal_request);
            }
            return (int)mh$.invokeExact(action_server, request_header, ros_goal_request);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_send_goal_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_send_goal_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_goal_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_goal_response)
     * }
     */
    public static FunctionDescriptor rcl_action_send_goal_response$descriptor() {
        return rcl_action_send_goal_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_goal_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_goal_response)
     * }
     */
    public static MethodHandle rcl_action_send_goal_response$handle() {
        return rcl_action_send_goal_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_goal_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_goal_response)
     * }
     */
    public static int rcl_action_send_goal_response(MemorySegment action_server, MemorySegment response_header, MemorySegment ros_goal_response) {
        var mh$ = rcl_action_send_goal_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_send_goal_response", action_server, response_header, ros_goal_response);
            }
            return (int)mh$.invokeExact(action_server, response_header, ros_goal_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_accept_new_goal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_accept_new_goal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_action_goal_handle_t *rcl_action_accept_new_goal(rcl_action_server_t *action_server, const rcl_action_goal_info_t *goal_info)
     * }
     */
    public static FunctionDescriptor rcl_action_accept_new_goal$descriptor() {
        return rcl_action_accept_new_goal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_action_goal_handle_t *rcl_action_accept_new_goal(rcl_action_server_t *action_server, const rcl_action_goal_info_t *goal_info)
     * }
     */
    public static MethodHandle rcl_action_accept_new_goal$handle() {
        return rcl_action_accept_new_goal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_action_goal_handle_t *rcl_action_accept_new_goal(rcl_action_server_t *action_server, const rcl_action_goal_info_t *goal_info)
     * }
     */
    public static MemorySegment rcl_action_accept_new_goal(MemorySegment action_server, MemorySegment goal_info) {
        var mh$ = rcl_action_accept_new_goal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_accept_new_goal", action_server, goal_info);
            }
            return (MemorySegment)mh$.invokeExact(action_server, goal_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_publish_feedback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_publish_feedback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_publish_feedback(const rcl_action_server_t *action_server, void *ros_feedback)
     * }
     */
    public static FunctionDescriptor rcl_action_publish_feedback$descriptor() {
        return rcl_action_publish_feedback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_publish_feedback(const rcl_action_server_t *action_server, void *ros_feedback)
     * }
     */
    public static MethodHandle rcl_action_publish_feedback$handle() {
        return rcl_action_publish_feedback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_publish_feedback(const rcl_action_server_t *action_server, void *ros_feedback)
     * }
     */
    public static int rcl_action_publish_feedback(MemorySegment action_server, MemorySegment ros_feedback) {
        var mh$ = rcl_action_publish_feedback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_publish_feedback", action_server, ros_feedback);
            }
            return (int)mh$.invokeExact(action_server, ros_feedback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_goal_status_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_goal_status_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_goal_status_array(const rcl_action_server_t *action_server, rcl_action_goal_status_array_t *status_message)
     * }
     */
    public static FunctionDescriptor rcl_action_get_goal_status_array$descriptor() {
        return rcl_action_get_goal_status_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_goal_status_array(const rcl_action_server_t *action_server, rcl_action_goal_status_array_t *status_message)
     * }
     */
    public static MethodHandle rcl_action_get_goal_status_array$handle() {
        return rcl_action_get_goal_status_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_goal_status_array(const rcl_action_server_t *action_server, rcl_action_goal_status_array_t *status_message)
     * }
     */
    public static int rcl_action_get_goal_status_array(MemorySegment action_server, MemorySegment status_message) {
        var mh$ = rcl_action_get_goal_status_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_goal_status_array", action_server, status_message);
            }
            return (int)mh$.invokeExact(action_server, status_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_publish_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_publish_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_publish_status(const rcl_action_server_t *action_server, const void *status_message)
     * }
     */
    public static FunctionDescriptor rcl_action_publish_status$descriptor() {
        return rcl_action_publish_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_publish_status(const rcl_action_server_t *action_server, const void *status_message)
     * }
     */
    public static MethodHandle rcl_action_publish_status$handle() {
        return rcl_action_publish_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_publish_status(const rcl_action_server_t *action_server, const void *status_message)
     * }
     */
    public static int rcl_action_publish_status(MemorySegment action_server, MemorySegment status_message) {
        var mh$ = rcl_action_publish_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_publish_status", action_server, status_message);
            }
            return (int)mh$.invokeExact(action_server, status_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_result_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_result_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_result_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_result_request)
     * }
     */
    public static FunctionDescriptor rcl_action_take_result_request$descriptor() {
        return rcl_action_take_result_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_result_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_result_request)
     * }
     */
    public static MethodHandle rcl_action_take_result_request$handle() {
        return rcl_action_take_result_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_result_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_result_request)
     * }
     */
    public static int rcl_action_take_result_request(MemorySegment action_server, MemorySegment request_header, MemorySegment ros_result_request) {
        var mh$ = rcl_action_take_result_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_result_request", action_server, request_header, ros_result_request);
            }
            return (int)mh$.invokeExact(action_server, request_header, ros_result_request);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_send_result_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_send_result_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_result_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_result_response)
     * }
     */
    public static FunctionDescriptor rcl_action_send_result_response$descriptor() {
        return rcl_action_send_result_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_result_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_result_response)
     * }
     */
    public static MethodHandle rcl_action_send_result_response$handle() {
        return rcl_action_send_result_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_result_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_result_response)
     * }
     */
    public static int rcl_action_send_result_response(MemorySegment action_server, MemorySegment response_header, MemorySegment ros_result_response) {
        var mh$ = rcl_action_send_result_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_send_result_response", action_server, response_header, ros_result_response);
            }
            return (int)mh$.invokeExact(action_server, response_header, ros_result_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_expire_goals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_expire_goals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_expire_goals(const rcl_action_server_t *action_server, rcl_action_goal_info_t *expired_goals, size_t expired_goals_capacity, size_t *num_expired)
     * }
     */
    public static FunctionDescriptor rcl_action_expire_goals$descriptor() {
        return rcl_action_expire_goals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_expire_goals(const rcl_action_server_t *action_server, rcl_action_goal_info_t *expired_goals, size_t expired_goals_capacity, size_t *num_expired)
     * }
     */
    public static MethodHandle rcl_action_expire_goals$handle() {
        return rcl_action_expire_goals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_expire_goals(const rcl_action_server_t *action_server, rcl_action_goal_info_t *expired_goals, size_t expired_goals_capacity, size_t *num_expired)
     * }
     */
    public static int rcl_action_expire_goals(MemorySegment action_server, MemorySegment expired_goals, long expired_goals_capacity, MemorySegment num_expired) {
        var mh$ = rcl_action_expire_goals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_expire_goals", action_server, expired_goals, expired_goals_capacity, num_expired);
            }
            return (int)mh$.invokeExact(action_server, expired_goals, expired_goals_capacity, num_expired);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_notify_goal_done {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_notify_goal_done"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_notify_goal_done(const rcl_action_server_t *action_server)
     * }
     */
    public static FunctionDescriptor rcl_action_notify_goal_done$descriptor() {
        return rcl_action_notify_goal_done.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_notify_goal_done(const rcl_action_server_t *action_server)
     * }
     */
    public static MethodHandle rcl_action_notify_goal_done$handle() {
        return rcl_action_notify_goal_done.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_notify_goal_done(const rcl_action_server_t *action_server)
     * }
     */
    public static int rcl_action_notify_goal_done(MemorySegment action_server) {
        var mh$ = rcl_action_notify_goal_done.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_notify_goal_done", action_server);
            }
            return (int)mh$.invokeExact(action_server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_take_cancel_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_take_cancel_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_cancel_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_cancel_request)
     * }
     */
    public static FunctionDescriptor rcl_action_take_cancel_request$descriptor() {
        return rcl_action_take_cancel_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_cancel_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_cancel_request)
     * }
     */
    public static MethodHandle rcl_action_take_cancel_request$handle() {
        return rcl_action_take_cancel_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_take_cancel_request(const rcl_action_server_t *action_server, rmw_request_id_t *request_header, void *ros_cancel_request)
     * }
     */
    public static int rcl_action_take_cancel_request(MemorySegment action_server, MemorySegment request_header, MemorySegment ros_cancel_request) {
        var mh$ = rcl_action_take_cancel_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_take_cancel_request", action_server, request_header, ros_cancel_request);
            }
            return (int)mh$.invokeExact(action_server, request_header, ros_cancel_request);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_process_cancel_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_process_cancel_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_process_cancel_request(const rcl_action_server_t *action_server, const rcl_action_cancel_request_t *cancel_request, rcl_action_cancel_response_t *cancel_response)
     * }
     */
    public static FunctionDescriptor rcl_action_process_cancel_request$descriptor() {
        return rcl_action_process_cancel_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_process_cancel_request(const rcl_action_server_t *action_server, const rcl_action_cancel_request_t *cancel_request, rcl_action_cancel_response_t *cancel_response)
     * }
     */
    public static MethodHandle rcl_action_process_cancel_request$handle() {
        return rcl_action_process_cancel_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_process_cancel_request(const rcl_action_server_t *action_server, const rcl_action_cancel_request_t *cancel_request, rcl_action_cancel_response_t *cancel_response)
     * }
     */
    public static int rcl_action_process_cancel_request(MemorySegment action_server, MemorySegment cancel_request, MemorySegment cancel_response) {
        var mh$ = rcl_action_process_cancel_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_process_cancel_request", action_server, cancel_request, cancel_response);
            }
            return (int)mh$.invokeExact(action_server, cancel_request, cancel_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_send_cancel_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_send_cancel_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_cancel_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_cancel_response)
     * }
     */
    public static FunctionDescriptor rcl_action_send_cancel_response$descriptor() {
        return rcl_action_send_cancel_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_cancel_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_cancel_response)
     * }
     */
    public static MethodHandle rcl_action_send_cancel_response$handle() {
        return rcl_action_send_cancel_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_send_cancel_response(const rcl_action_server_t *action_server, rmw_request_id_t *response_header, void *ros_cancel_response)
     * }
     */
    public static int rcl_action_send_cancel_response(MemorySegment action_server, MemorySegment response_header, MemorySegment ros_cancel_response) {
        var mh$ = rcl_action_send_cancel_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_send_cancel_response", action_server, response_header, ros_cancel_response);
            }
            return (int)mh$.invokeExact(action_server, response_header, ros_cancel_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_get_action_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_get_action_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *rcl_action_server_get_action_name(const rcl_action_server_t *action_server)
     * }
     */
    public static FunctionDescriptor rcl_action_server_get_action_name$descriptor() {
        return rcl_action_server_get_action_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *rcl_action_server_get_action_name(const rcl_action_server_t *action_server)
     * }
     */
    public static MethodHandle rcl_action_server_get_action_name$handle() {
        return rcl_action_server_get_action_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *rcl_action_server_get_action_name(const rcl_action_server_t *action_server)
     * }
     */
    public static MemorySegment rcl_action_server_get_action_name(MemorySegment action_server) {
        var mh$ = rcl_action_server_get_action_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_get_action_name", action_server);
            }
            return (MemorySegment)mh$.invokeExact(action_server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_get_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_get_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const rcl_action_server_options_t *rcl_action_server_get_options(const rcl_action_server_t *action_server)
     * }
     */
    public static FunctionDescriptor rcl_action_server_get_options$descriptor() {
        return rcl_action_server_get_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const rcl_action_server_options_t *rcl_action_server_get_options(const rcl_action_server_t *action_server)
     * }
     */
    public static MethodHandle rcl_action_server_get_options$handle() {
        return rcl_action_server_get_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const rcl_action_server_options_t *rcl_action_server_get_options(const rcl_action_server_t *action_server)
     * }
     */
    public static MemorySegment rcl_action_server_get_options(MemorySegment action_server) {
        var mh$ = rcl_action_server_get_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_get_options", action_server);
            }
            return (MemorySegment)mh$.invokeExact(action_server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_get_goal_handles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_get_goal_handles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_get_goal_handles(const rcl_action_server_t *action_server, rcl_action_goal_handle_t ***goal_handles, size_t *num_goals)
     * }
     */
    public static FunctionDescriptor rcl_action_server_get_goal_handles$descriptor() {
        return rcl_action_server_get_goal_handles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_get_goal_handles(const rcl_action_server_t *action_server, rcl_action_goal_handle_t ***goal_handles, size_t *num_goals)
     * }
     */
    public static MethodHandle rcl_action_server_get_goal_handles$handle() {
        return rcl_action_server_get_goal_handles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_get_goal_handles(const rcl_action_server_t *action_server, rcl_action_goal_handle_t ***goal_handles, size_t *num_goals)
     * }
     */
    public static int rcl_action_server_get_goal_handles(MemorySegment action_server, MemorySegment goal_handles, MemorySegment num_goals) {
        var mh$ = rcl_action_server_get_goal_handles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_get_goal_handles", action_server, goal_handles, num_goals);
            }
            return (int)mh$.invokeExact(action_server, goal_handles, num_goals);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_goal_exists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_goal_exists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_action_server_goal_exists(const rcl_action_server_t *action_server, const rcl_action_goal_info_t *goal_info)
     * }
     */
    public static FunctionDescriptor rcl_action_server_goal_exists$descriptor() {
        return rcl_action_server_goal_exists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_action_server_goal_exists(const rcl_action_server_t *action_server, const rcl_action_goal_info_t *goal_info)
     * }
     */
    public static MethodHandle rcl_action_server_goal_exists$handle() {
        return rcl_action_server_goal_exists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_action_server_goal_exists(const rcl_action_server_t *action_server, const rcl_action_goal_info_t *goal_info)
     * }
     */
    public static boolean rcl_action_server_goal_exists(MemorySegment action_server, MemorySegment goal_info) {
        var mh$ = rcl_action_server_goal_exists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_goal_exists", action_server, goal_info);
            }
            return (boolean)mh$.invokeExact(action_server, goal_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_action_server_is_valid(const rcl_action_server_t *action_server)
     * }
     */
    public static FunctionDescriptor rcl_action_server_is_valid$descriptor() {
        return rcl_action_server_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_action_server_is_valid(const rcl_action_server_t *action_server)
     * }
     */
    public static MethodHandle rcl_action_server_is_valid$handle() {
        return rcl_action_server_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_action_server_is_valid(const rcl_action_server_t *action_server)
     * }
     */
    public static boolean rcl_action_server_is_valid(MemorySegment action_server) {
        var mh$ = rcl_action_server_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_is_valid", action_server);
            }
            return (boolean)mh$.invokeExact(action_server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_is_valid_except_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_is_valid_except_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_action_server_is_valid_except_context(const rcl_action_server_t *action_server)
     * }
     */
    public static FunctionDescriptor rcl_action_server_is_valid_except_context$descriptor() {
        return rcl_action_server_is_valid_except_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_action_server_is_valid_except_context(const rcl_action_server_t *action_server)
     * }
     */
    public static MethodHandle rcl_action_server_is_valid_except_context$handle() {
        return rcl_action_server_is_valid_except_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_action_server_is_valid_except_context(const rcl_action_server_t *action_server)
     * }
     */
    public static boolean rcl_action_server_is_valid_except_context(MemorySegment action_server) {
        var mh$ = rcl_action_server_is_valid_except_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_is_valid_except_context", action_server);
            }
            return (boolean)mh$.invokeExact(action_server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_set_goal_service_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_set_goal_service_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_goal_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_server_set_goal_service_callback$descriptor() {
        return rcl_action_server_set_goal_service_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_goal_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_server_set_goal_service_callback$handle() {
        return rcl_action_server_set_goal_service_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_goal_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_server_set_goal_service_callback(MemorySegment action_server, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_server_set_goal_service_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_set_goal_service_callback", action_server, callback, user_data);
            }
            return (int)mh$.invokeExact(action_server, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_set_cancel_service_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_set_cancel_service_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_cancel_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_server_set_cancel_service_callback$descriptor() {
        return rcl_action_server_set_cancel_service_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_cancel_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_server_set_cancel_service_callback$handle() {
        return rcl_action_server_set_cancel_service_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_cancel_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_server_set_cancel_service_callback(MemorySegment action_server, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_server_set_cancel_service_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_set_cancel_service_callback", action_server, callback, user_data);
            }
            return (int)mh$.invokeExact(action_server, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_set_result_service_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_set_result_service_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_result_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static FunctionDescriptor rcl_action_server_set_result_service_callback$descriptor() {
        return rcl_action_server_set_result_service_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_result_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static MethodHandle rcl_action_server_set_result_service_callback$handle() {
        return rcl_action_server_set_result_service_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_set_result_service_callback(const rcl_action_server_t *action_server, rcl_event_callback_t callback, const void *user_data)
     * }
     */
    public static int rcl_action_server_set_result_service_callback(MemorySegment action_server, MemorySegment callback, MemorySegment user_data) {
        var mh$ = rcl_action_server_set_result_service_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_set_result_service_callback", action_server, callback, user_data);
            }
            return (int)mh$.invokeExact(action_server, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_get_zero_initialized_names_and_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rmw_names_and_types_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_get_zero_initialized_names_and_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_names_and_types_t rmw_get_zero_initialized_names_and_types()
     * }
     */
    public static FunctionDescriptor rmw_get_zero_initialized_names_and_types$descriptor() {
        return rmw_get_zero_initialized_names_and_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_names_and_types_t rmw_get_zero_initialized_names_and_types()
     * }
     */
    public static MethodHandle rmw_get_zero_initialized_names_and_types$handle() {
        return rmw_get_zero_initialized_names_and_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_names_and_types_t rmw_get_zero_initialized_names_and_types()
     * }
     */
    public static MemorySegment rmw_get_zero_initialized_names_and_types(SegmentAllocator allocator) {
        var mh$ = rmw_get_zero_initialized_names_and_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_get_zero_initialized_names_and_types", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_names_and_types_check_zero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_names_and_types_check_zero"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_check_zero(rmw_names_and_types_t *names_and_types)
     * }
     */
    public static FunctionDescriptor rmw_names_and_types_check_zero$descriptor() {
        return rmw_names_and_types_check_zero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_check_zero(rmw_names_and_types_t *names_and_types)
     * }
     */
    public static MethodHandle rmw_names_and_types_check_zero$handle() {
        return rmw_names_and_types_check_zero.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_check_zero(rmw_names_and_types_t *names_and_types)
     * }
     */
    public static int rmw_names_and_types_check_zero(MemorySegment names_and_types) {
        var mh$ = rmw_names_and_types_check_zero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_names_and_types_check_zero", names_and_types);
            }
            return (int)mh$.invokeExact(names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_names_and_types_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_names_and_types_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_init(rmw_names_and_types_t *names_and_types, size_t size, rcutils_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rmw_names_and_types_init$descriptor() {
        return rmw_names_and_types_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_init(rmw_names_and_types_t *names_and_types, size_t size, rcutils_allocator_t *allocator)
     * }
     */
    public static MethodHandle rmw_names_and_types_init$handle() {
        return rmw_names_and_types_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_init(rmw_names_and_types_t *names_and_types, size_t size, rcutils_allocator_t *allocator)
     * }
     */
    public static int rmw_names_and_types_init(MemorySegment names_and_types, long size, MemorySegment allocator) {
        var mh$ = rmw_names_and_types_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_names_and_types_init", names_and_types, size, allocator);
            }
            return (int)mh$.invokeExact(names_and_types, size, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_names_and_types_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_names_and_types_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_fini(rmw_names_and_types_t *names_and_types)
     * }
     */
    public static FunctionDescriptor rmw_names_and_types_fini$descriptor() {
        return rmw_names_and_types_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_fini(rmw_names_and_types_t *names_and_types)
     * }
     */
    public static MethodHandle rmw_names_and_types_fini$handle() {
        return rmw_names_and_types_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_names_and_types_fini(rmw_names_and_types_t *names_and_types)
     * }
     */
    public static int rmw_names_and_types_fini(MemorySegment names_and_types) {
        var mh$ = rmw_names_and_types_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_names_and_types_fini", names_and_types);
            }
            return (int)mh$.invokeExact(names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_get_topic_names_and_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_get_topic_names_and_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_topic_names_and_types(const rmw_node_t *node, rcutils_allocator_t *allocator, bool no_demangle, rmw_names_and_types_t *topic_names_and_types)
     * }
     */
    public static FunctionDescriptor rmw_get_topic_names_and_types$descriptor() {
        return rmw_get_topic_names_and_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_topic_names_and_types(const rmw_node_t *node, rcutils_allocator_t *allocator, bool no_demangle, rmw_names_and_types_t *topic_names_and_types)
     * }
     */
    public static MethodHandle rmw_get_topic_names_and_types$handle() {
        return rmw_get_topic_names_and_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_get_topic_names_and_types(const rmw_node_t *node, rcutils_allocator_t *allocator, bool no_demangle, rmw_names_and_types_t *topic_names_and_types)
     * }
     */
    public static int rmw_get_topic_names_and_types(MemorySegment node, MemorySegment allocator, boolean no_demangle, MemorySegment topic_names_and_types) {
        var mh$ = rmw_get_topic_names_and_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_get_topic_names_and_types", node, allocator, no_demangle, topic_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, no_demangle, topic_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_get_zero_initialized_topic_endpoint_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rmw_topic_endpoint_info_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_get_zero_initialized_topic_endpoint_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_topic_endpoint_info_t rmw_get_zero_initialized_topic_endpoint_info()
     * }
     */
    public static FunctionDescriptor rmw_get_zero_initialized_topic_endpoint_info$descriptor() {
        return rmw_get_zero_initialized_topic_endpoint_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_topic_endpoint_info_t rmw_get_zero_initialized_topic_endpoint_info()
     * }
     */
    public static MethodHandle rmw_get_zero_initialized_topic_endpoint_info$handle() {
        return rmw_get_zero_initialized_topic_endpoint_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_topic_endpoint_info_t rmw_get_zero_initialized_topic_endpoint_info()
     * }
     */
    public static MemorySegment rmw_get_zero_initialized_topic_endpoint_info(SegmentAllocator allocator) {
        var mh$ = rmw_get_zero_initialized_topic_endpoint_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_get_zero_initialized_topic_endpoint_info", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_fini(rmw_topic_endpoint_info_t *topic_endpoint_info, rcutils_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_fini$descriptor() {
        return rmw_topic_endpoint_info_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_fini(rmw_topic_endpoint_info_t *topic_endpoint_info, rcutils_allocator_t *allocator)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_fini$handle() {
        return rmw_topic_endpoint_info_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_fini(rmw_topic_endpoint_info_t *topic_endpoint_info, rcutils_allocator_t *allocator)
     * }
     */
    public static int rmw_topic_endpoint_info_fini(MemorySegment topic_endpoint_info, MemorySegment allocator) {
        var mh$ = rmw_topic_endpoint_info_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_fini", topic_endpoint_info, allocator);
            }
            return (int)mh$.invokeExact(topic_endpoint_info, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_set_topic_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_set_topic_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_topic_type(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *topic_type, rcutils_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_set_topic_type$descriptor() {
        return rmw_topic_endpoint_info_set_topic_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_topic_type(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *topic_type, rcutils_allocator_t *allocator)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_set_topic_type$handle() {
        return rmw_topic_endpoint_info_set_topic_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_topic_type(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *topic_type, rcutils_allocator_t *allocator)
     * }
     */
    public static int rmw_topic_endpoint_info_set_topic_type(MemorySegment topic_endpoint_info, MemorySegment topic_type, MemorySegment allocator) {
        var mh$ = rmw_topic_endpoint_info_set_topic_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_set_topic_type", topic_endpoint_info, topic_type, allocator);
            }
            return (int)mh$.invokeExact(topic_endpoint_info, topic_type, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_set_node_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_set_node_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_node_name(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *node_name, rcutils_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_set_node_name$descriptor() {
        return rmw_topic_endpoint_info_set_node_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_node_name(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *node_name, rcutils_allocator_t *allocator)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_set_node_name$handle() {
        return rmw_topic_endpoint_info_set_node_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_node_name(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *node_name, rcutils_allocator_t *allocator)
     * }
     */
    public static int rmw_topic_endpoint_info_set_node_name(MemorySegment topic_endpoint_info, MemorySegment node_name, MemorySegment allocator) {
        var mh$ = rmw_topic_endpoint_info_set_node_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_set_node_name", topic_endpoint_info, node_name, allocator);
            }
            return (int)mh$.invokeExact(topic_endpoint_info, node_name, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_set_node_namespace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_set_node_namespace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_node_namespace(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *node_namespace, rcutils_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_set_node_namespace$descriptor() {
        return rmw_topic_endpoint_info_set_node_namespace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_node_namespace(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *node_namespace, rcutils_allocator_t *allocator)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_set_node_namespace$handle() {
        return rmw_topic_endpoint_info_set_node_namespace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_node_namespace(rmw_topic_endpoint_info_t *topic_endpoint_info, const char *node_namespace, rcutils_allocator_t *allocator)
     * }
     */
    public static int rmw_topic_endpoint_info_set_node_namespace(MemorySegment topic_endpoint_info, MemorySegment node_namespace, MemorySegment allocator) {
        var mh$ = rmw_topic_endpoint_info_set_node_namespace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_set_node_namespace", topic_endpoint_info, node_namespace, allocator);
            }
            return (int)mh$.invokeExact(topic_endpoint_info, node_namespace, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_set_endpoint_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_set_endpoint_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_endpoint_type(rmw_topic_endpoint_info_t *topic_endpoint_info, rmw_endpoint_type_t type)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_set_endpoint_type$descriptor() {
        return rmw_topic_endpoint_info_set_endpoint_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_endpoint_type(rmw_topic_endpoint_info_t *topic_endpoint_info, rmw_endpoint_type_t type)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_set_endpoint_type$handle() {
        return rmw_topic_endpoint_info_set_endpoint_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_endpoint_type(rmw_topic_endpoint_info_t *topic_endpoint_info, rmw_endpoint_type_t type)
     * }
     */
    public static int rmw_topic_endpoint_info_set_endpoint_type(MemorySegment topic_endpoint_info, int type) {
        var mh$ = rmw_topic_endpoint_info_set_endpoint_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_set_endpoint_type", topic_endpoint_info, type);
            }
            return (int)mh$.invokeExact(topic_endpoint_info, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_set_gid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_set_gid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_gid(rmw_topic_endpoint_info_t *topic_endpoint_info, const uint8_t *gid, size_t size)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_set_gid$descriptor() {
        return rmw_topic_endpoint_info_set_gid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_gid(rmw_topic_endpoint_info_t *topic_endpoint_info, const uint8_t *gid, size_t size)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_set_gid$handle() {
        return rmw_topic_endpoint_info_set_gid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_gid(rmw_topic_endpoint_info_t *topic_endpoint_info, const uint8_t *gid, size_t size)
     * }
     */
    public static int rmw_topic_endpoint_info_set_gid(MemorySegment topic_endpoint_info, MemorySegment gid, long size) {
        var mh$ = rmw_topic_endpoint_info_set_gid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_set_gid", topic_endpoint_info, gid, size);
            }
            return (int)mh$.invokeExact(topic_endpoint_info, gid, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_set_qos_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_set_qos_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_qos_profile(rmw_topic_endpoint_info_t *topic_endpoint_info, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_set_qos_profile$descriptor() {
        return rmw_topic_endpoint_info_set_qos_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_qos_profile(rmw_topic_endpoint_info_t *topic_endpoint_info, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_set_qos_profile$handle() {
        return rmw_topic_endpoint_info_set_qos_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_set_qos_profile(rmw_topic_endpoint_info_t *topic_endpoint_info, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static int rmw_topic_endpoint_info_set_qos_profile(MemorySegment topic_endpoint_info, MemorySegment qos_profile) {
        var mh$ = rmw_topic_endpoint_info_set_qos_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_set_qos_profile", topic_endpoint_info, qos_profile);
            }
            return (int)mh$.invokeExact(topic_endpoint_info, qos_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_get_zero_initialized_topic_endpoint_info_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rmw_topic_endpoint_info_array_s.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_get_zero_initialized_topic_endpoint_info_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_topic_endpoint_info_array_t rmw_get_zero_initialized_topic_endpoint_info_array()
     * }
     */
    public static FunctionDescriptor rmw_get_zero_initialized_topic_endpoint_info_array$descriptor() {
        return rmw_get_zero_initialized_topic_endpoint_info_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_topic_endpoint_info_array_t rmw_get_zero_initialized_topic_endpoint_info_array()
     * }
     */
    public static MethodHandle rmw_get_zero_initialized_topic_endpoint_info_array$handle() {
        return rmw_get_zero_initialized_topic_endpoint_info_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_topic_endpoint_info_array_t rmw_get_zero_initialized_topic_endpoint_info_array()
     * }
     */
    public static MemorySegment rmw_get_zero_initialized_topic_endpoint_info_array(SegmentAllocator allocator) {
        var mh$ = rmw_get_zero_initialized_topic_endpoint_info_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_get_zero_initialized_topic_endpoint_info_array", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_array_check_zero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_array_check_zero"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_check_zero(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_array_check_zero$descriptor() {
        return rmw_topic_endpoint_info_array_check_zero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_check_zero(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_array_check_zero$handle() {
        return rmw_topic_endpoint_info_array_check_zero.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_check_zero(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array)
     * }
     */
    public static int rmw_topic_endpoint_info_array_check_zero(MemorySegment topic_endpoint_info_array) {
        var mh$ = rmw_topic_endpoint_info_array_check_zero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_array_check_zero", topic_endpoint_info_array);
            }
            return (int)mh$.invokeExact(topic_endpoint_info_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_array_init_with_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_array_init_with_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_init_with_size(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array, size_t size, rcutils_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_array_init_with_size$descriptor() {
        return rmw_topic_endpoint_info_array_init_with_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_init_with_size(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array, size_t size, rcutils_allocator_t *allocator)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_array_init_with_size$handle() {
        return rmw_topic_endpoint_info_array_init_with_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_init_with_size(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array, size_t size, rcutils_allocator_t *allocator)
     * }
     */
    public static int rmw_topic_endpoint_info_array_init_with_size(MemorySegment topic_endpoint_info_array, long size, MemorySegment allocator) {
        var mh$ = rmw_topic_endpoint_info_array_init_with_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_array_init_with_size", topic_endpoint_info_array, size, allocator);
            }
            return (int)mh$.invokeExact(topic_endpoint_info_array, size, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmw_topic_endpoint_info_array_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rmw_topic_endpoint_info_array_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_fini(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array, rcutils_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rmw_topic_endpoint_info_array_fini$descriptor() {
        return rmw_topic_endpoint_info_array_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_fini(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array, rcutils_allocator_t *allocator)
     * }
     */
    public static MethodHandle rmw_topic_endpoint_info_array_fini$handle() {
        return rmw_topic_endpoint_info_array_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rmw_ret_t rmw_topic_endpoint_info_array_fini(rmw_topic_endpoint_info_array_t *topic_endpoint_info_array, rcutils_allocator_t *allocator)
     * }
     */
    public static int rmw_topic_endpoint_info_array_fini(MemorySegment topic_endpoint_info_array, MemorySegment allocator) {
        var mh$ = rmw_topic_endpoint_info_array_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmw_topic_endpoint_info_array_fini", topic_endpoint_info_array, allocator);
            }
            return (int)mh$.invokeExact(topic_endpoint_info_array, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_publisher_names_and_types_by_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_publisher_names_and_types_by_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_publisher_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, const char *node_name, const char *node_namespace, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_get_publisher_names_and_types_by_node$descriptor() {
        return rcl_get_publisher_names_and_types_by_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_publisher_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, const char *node_name, const char *node_namespace, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static MethodHandle rcl_get_publisher_names_and_types_by_node$handle() {
        return rcl_get_publisher_names_and_types_by_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_publisher_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, const char *node_name, const char *node_namespace, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static int rcl_get_publisher_names_and_types_by_node(MemorySegment node, MemorySegment allocator, boolean no_demangle, MemorySegment node_name, MemorySegment node_namespace, MemorySegment topic_names_and_types) {
        var mh$ = rcl_get_publisher_names_and_types_by_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_publisher_names_and_types_by_node", node, allocator, no_demangle, node_name, node_namespace, topic_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, no_demangle, node_name, node_namespace, topic_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_subscriber_names_and_types_by_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_subscriber_names_and_types_by_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_subscriber_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, const char *node_name, const char *node_namespace, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_get_subscriber_names_and_types_by_node$descriptor() {
        return rcl_get_subscriber_names_and_types_by_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_subscriber_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, const char *node_name, const char *node_namespace, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static MethodHandle rcl_get_subscriber_names_and_types_by_node$handle() {
        return rcl_get_subscriber_names_and_types_by_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_subscriber_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, const char *node_name, const char *node_namespace, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static int rcl_get_subscriber_names_and_types_by_node(MemorySegment node, MemorySegment allocator, boolean no_demangle, MemorySegment node_name, MemorySegment node_namespace, MemorySegment topic_names_and_types) {
        var mh$ = rcl_get_subscriber_names_and_types_by_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_subscriber_names_and_types_by_node", node, allocator, no_demangle, node_name, node_namespace, topic_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, no_demangle, node_name, node_namespace, topic_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_service_names_and_types_by_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_service_names_and_types_by_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_service_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_get_service_names_and_types_by_node$descriptor() {
        return rcl_get_service_names_and_types_by_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_service_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static MethodHandle rcl_get_service_names_and_types_by_node$handle() {
        return rcl_get_service_names_and_types_by_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_service_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static int rcl_get_service_names_and_types_by_node(MemorySegment node, MemorySegment allocator, MemorySegment node_name, MemorySegment node_namespace, MemorySegment service_names_and_types) {
        var mh$ = rcl_get_service_names_and_types_by_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_service_names_and_types_by_node", node, allocator, node_name, node_namespace, service_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, node_name, node_namespace, service_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_client_names_and_types_by_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_client_names_and_types_by_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_client_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_get_client_names_and_types_by_node$descriptor() {
        return rcl_get_client_names_and_types_by_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_client_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static MethodHandle rcl_get_client_names_and_types_by_node$handle() {
        return rcl_get_client_names_and_types_by_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_client_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static int rcl_get_client_names_and_types_by_node(MemorySegment node, MemorySegment allocator, MemorySegment node_name, MemorySegment node_namespace, MemorySegment service_names_and_types) {
        var mh$ = rcl_get_client_names_and_types_by_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_client_names_and_types_by_node", node, allocator, node_name, node_namespace, service_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, node_name, node_namespace, service_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_topic_names_and_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_topic_names_and_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_topic_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_get_topic_names_and_types$descriptor() {
        return rcl_get_topic_names_and_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_topic_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static MethodHandle rcl_get_topic_names_and_types$handle() {
        return rcl_get_topic_names_and_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_topic_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, bool no_demangle, rcl_names_and_types_t *topic_names_and_types)
     * }
     */
    public static int rcl_get_topic_names_and_types(MemorySegment node, MemorySegment allocator, boolean no_demangle, MemorySegment topic_names_and_types) {
        var mh$ = rcl_get_topic_names_and_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_topic_names_and_types", node, allocator, no_demangle, topic_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, no_demangle, topic_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_service_names_and_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_service_names_and_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_service_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_get_service_names_and_types$descriptor() {
        return rcl_get_service_names_and_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_service_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static MethodHandle rcl_get_service_names_and_types$handle() {
        return rcl_get_service_names_and_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_service_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, rcl_names_and_types_t *service_names_and_types)
     * }
     */
    public static int rcl_get_service_names_and_types(MemorySegment node, MemorySegment allocator, MemorySegment service_names_and_types) {
        var mh$ = rcl_get_service_names_and_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_service_names_and_types", node, allocator, service_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, service_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_names_and_types_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_names_and_types_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_names_and_types_init(rcl_names_and_types_t *names_and_types, size_t size, rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rcl_names_and_types_init$descriptor() {
        return rcl_names_and_types_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_names_and_types_init(rcl_names_and_types_t *names_and_types, size_t size, rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rcl_names_and_types_init$handle() {
        return rcl_names_and_types_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_names_and_types_init(rcl_names_and_types_t *names_and_types, size_t size, rcl_allocator_t *allocator)
     * }
     */
    public static int rcl_names_and_types_init(MemorySegment names_and_types, long size, MemorySegment allocator) {
        var mh$ = rcl_names_and_types_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_names_and_types_init", names_and_types, size, allocator);
            }
            return (int)mh$.invokeExact(names_and_types, size, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_names_and_types_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_names_and_types_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_names_and_types_fini(rcl_names_and_types_t *names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_names_and_types_fini$descriptor() {
        return rcl_names_and_types_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_names_and_types_fini(rcl_names_and_types_t *names_and_types)
     * }
     */
    public static MethodHandle rcl_names_and_types_fini$handle() {
        return rcl_names_and_types_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_names_and_types_fini(rcl_names_and_types_t *names_and_types)
     * }
     */
    public static int rcl_names_and_types_fini(MemorySegment names_and_types) {
        var mh$ = rcl_names_and_types_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_names_and_types_fini", names_and_types);
            }
            return (int)mh$.invokeExact(names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_node_names {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            rcutils_allocator_s.layout(),
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_node_names"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_node_names(const rcl_node_t *node, rcl_allocator_t allocator, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces)
     * }
     */
    public static FunctionDescriptor rcl_get_node_names$descriptor() {
        return rcl_get_node_names.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_node_names(const rcl_node_t *node, rcl_allocator_t allocator, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces)
     * }
     */
    public static MethodHandle rcl_get_node_names$handle() {
        return rcl_get_node_names.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_node_names(const rcl_node_t *node, rcl_allocator_t allocator, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces)
     * }
     */
    public static int rcl_get_node_names(MemorySegment node, MemorySegment allocator, MemorySegment node_names, MemorySegment node_namespaces) {
        var mh$ = rcl_get_node_names.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_node_names", node, allocator, node_names, node_namespaces);
            }
            return (int)mh$.invokeExact(node, allocator, node_names, node_namespaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_node_names_with_enclaves {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            rcutils_allocator_s.layout(),
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_node_names_with_enclaves"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_node_names_with_enclaves(const rcl_node_t *node, rcl_allocator_t allocator, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces, rcutils_string_array_t *enclaves)
     * }
     */
    public static FunctionDescriptor rcl_get_node_names_with_enclaves$descriptor() {
        return rcl_get_node_names_with_enclaves.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_node_names_with_enclaves(const rcl_node_t *node, rcl_allocator_t allocator, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces, rcutils_string_array_t *enclaves)
     * }
     */
    public static MethodHandle rcl_get_node_names_with_enclaves$handle() {
        return rcl_get_node_names_with_enclaves.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_node_names_with_enclaves(const rcl_node_t *node, rcl_allocator_t allocator, rcutils_string_array_t *node_names, rcutils_string_array_t *node_namespaces, rcutils_string_array_t *enclaves)
     * }
     */
    public static int rcl_get_node_names_with_enclaves(MemorySegment node, MemorySegment allocator, MemorySegment node_names, MemorySegment node_namespaces, MemorySegment enclaves) {
        var mh$ = rcl_get_node_names_with_enclaves.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_node_names_with_enclaves", node, allocator, node_names, node_namespaces, enclaves);
            }
            return (int)mh$.invokeExact(node, allocator, node_names, node_namespaces, enclaves);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_count_publishers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_count_publishers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_count_publishers(const rcl_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static FunctionDescriptor rcl_count_publishers$descriptor() {
        return rcl_count_publishers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_count_publishers(const rcl_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static MethodHandle rcl_count_publishers$handle() {
        return rcl_count_publishers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_count_publishers(const rcl_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static int rcl_count_publishers(MemorySegment node, MemorySegment topic_name, MemorySegment count) {
        var mh$ = rcl_count_publishers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_count_publishers", node, topic_name, count);
            }
            return (int)mh$.invokeExact(node, topic_name, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_count_subscribers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_count_subscribers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_count_subscribers(const rcl_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static FunctionDescriptor rcl_count_subscribers$descriptor() {
        return rcl_count_subscribers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_count_subscribers(const rcl_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static MethodHandle rcl_count_subscribers$handle() {
        return rcl_count_subscribers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_count_subscribers(const rcl_node_t *node, const char *topic_name, size_t *count)
     * }
     */
    public static int rcl_count_subscribers(MemorySegment node, MemorySegment topic_name, MemorySegment count) {
        var mh$ = rcl_count_subscribers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_count_subscribers", node, topic_name, count);
            }
            return (int)mh$.invokeExact(node, topic_name, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_for_publishers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_for_publishers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_for_publishers(const rcl_node_t *node, rcl_allocator_t *allocator, const char *topic_name, const size_t count, rcutils_duration_value_t timeout, bool *success)
     * }
     */
    public static FunctionDescriptor rcl_wait_for_publishers$descriptor() {
        return rcl_wait_for_publishers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_for_publishers(const rcl_node_t *node, rcl_allocator_t *allocator, const char *topic_name, const size_t count, rcutils_duration_value_t timeout, bool *success)
     * }
     */
    public static MethodHandle rcl_wait_for_publishers$handle() {
        return rcl_wait_for_publishers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_for_publishers(const rcl_node_t *node, rcl_allocator_t *allocator, const char *topic_name, const size_t count, rcutils_duration_value_t timeout, bool *success)
     * }
     */
    public static int rcl_wait_for_publishers(MemorySegment node, MemorySegment allocator, MemorySegment topic_name, long count, long timeout, MemorySegment success) {
        var mh$ = rcl_wait_for_publishers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_for_publishers", node, allocator, topic_name, count, timeout, success);
            }
            return (int)mh$.invokeExact(node, allocator, topic_name, count, timeout, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_wait_for_subscribers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_wait_for_subscribers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_for_subscribers(const rcl_node_t *node, rcl_allocator_t *allocator, const char *topic_name, const size_t count, rcutils_duration_value_t timeout, bool *success)
     * }
     */
    public static FunctionDescriptor rcl_wait_for_subscribers$descriptor() {
        return rcl_wait_for_subscribers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_for_subscribers(const rcl_node_t *node, rcl_allocator_t *allocator, const char *topic_name, const size_t count, rcutils_duration_value_t timeout, bool *success)
     * }
     */
    public static MethodHandle rcl_wait_for_subscribers$handle() {
        return rcl_wait_for_subscribers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_wait_for_subscribers(const rcl_node_t *node, rcl_allocator_t *allocator, const char *topic_name, const size_t count, rcutils_duration_value_t timeout, bool *success)
     * }
     */
    public static int rcl_wait_for_subscribers(MemorySegment node, MemorySegment allocator, MemorySegment topic_name, long count, long timeout, MemorySegment success) {
        var mh$ = rcl_wait_for_subscribers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_wait_for_subscribers", node, allocator, topic_name, count, timeout, success);
            }
            return (int)mh$.invokeExact(node, allocator, topic_name, count, timeout, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_publishers_info_by_topic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_publishers_info_by_topic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_publishers_info_by_topic(const rcl_node_t *node, rcutils_allocator_t *allocator, const char *topic_name, bool no_mangle, rcl_topic_endpoint_info_array_t *publishers_info)
     * }
     */
    public static FunctionDescriptor rcl_get_publishers_info_by_topic$descriptor() {
        return rcl_get_publishers_info_by_topic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_publishers_info_by_topic(const rcl_node_t *node, rcutils_allocator_t *allocator, const char *topic_name, bool no_mangle, rcl_topic_endpoint_info_array_t *publishers_info)
     * }
     */
    public static MethodHandle rcl_get_publishers_info_by_topic$handle() {
        return rcl_get_publishers_info_by_topic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_publishers_info_by_topic(const rcl_node_t *node, rcutils_allocator_t *allocator, const char *topic_name, bool no_mangle, rcl_topic_endpoint_info_array_t *publishers_info)
     * }
     */
    public static int rcl_get_publishers_info_by_topic(MemorySegment node, MemorySegment allocator, MemorySegment topic_name, boolean no_mangle, MemorySegment publishers_info) {
        var mh$ = rcl_get_publishers_info_by_topic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_publishers_info_by_topic", node, allocator, topic_name, no_mangle, publishers_info);
            }
            return (int)mh$.invokeExact(node, allocator, topic_name, no_mangle, publishers_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_get_subscriptions_info_by_topic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_get_subscriptions_info_by_topic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_subscriptions_info_by_topic(const rcl_node_t *node, rcutils_allocator_t *allocator, const char *topic_name, bool no_mangle, rcl_topic_endpoint_info_array_t *subscriptions_info)
     * }
     */
    public static FunctionDescriptor rcl_get_subscriptions_info_by_topic$descriptor() {
        return rcl_get_subscriptions_info_by_topic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_subscriptions_info_by_topic(const rcl_node_t *node, rcutils_allocator_t *allocator, const char *topic_name, bool no_mangle, rcl_topic_endpoint_info_array_t *subscriptions_info)
     * }
     */
    public static MethodHandle rcl_get_subscriptions_info_by_topic$handle() {
        return rcl_get_subscriptions_info_by_topic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_get_subscriptions_info_by_topic(const rcl_node_t *node, rcutils_allocator_t *allocator, const char *topic_name, bool no_mangle, rcl_topic_endpoint_info_array_t *subscriptions_info)
     * }
     */
    public static int rcl_get_subscriptions_info_by_topic(MemorySegment node, MemorySegment allocator, MemorySegment topic_name, boolean no_mangle, MemorySegment subscriptions_info) {
        var mh$ = rcl_get_subscriptions_info_by_topic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_get_subscriptions_info_by_topic", node, allocator, topic_name, no_mangle, subscriptions_info);
            }
            return (int)mh$.invokeExact(node, allocator, topic_name, no_mangle, subscriptions_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_service_server_is_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_service_server_is_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_service_server_is_available(const rcl_node_t *node, const rcl_client_t *client, bool *is_available)
     * }
     */
    public static FunctionDescriptor rcl_service_server_is_available$descriptor() {
        return rcl_service_server_is_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_service_server_is_available(const rcl_node_t *node, const rcl_client_t *client, bool *is_available)
     * }
     */
    public static MethodHandle rcl_service_server_is_available$handle() {
        return rcl_service_server_is_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_service_server_is_available(const rcl_node_t *node, const rcl_client_t *client, bool *is_available)
     * }
     */
    public static int rcl_service_server_is_available(MemorySegment node, MemorySegment client, MemorySegment is_available) {
        var mh$ = rcl_service_server_is_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_service_server_is_available", node, client, is_available);
            }
            return (int)mh$.invokeExact(node, client, is_available);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_client_names_and_types_by_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_client_names_and_types_by_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_client_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_action_get_client_names_and_types_by_node$descriptor() {
        return rcl_action_get_client_names_and_types_by_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_client_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static MethodHandle rcl_action_get_client_names_and_types_by_node$handle() {
        return rcl_action_get_client_names_and_types_by_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_client_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static int rcl_action_get_client_names_and_types_by_node(MemorySegment node, MemorySegment allocator, MemorySegment node_name, MemorySegment node_namespace, MemorySegment action_names_and_types) {
        var mh$ = rcl_action_get_client_names_and_types_by_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_client_names_and_types_by_node", node, allocator, node_name, node_namespace, action_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, node_name, node_namespace, action_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_server_names_and_types_by_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_server_names_and_types_by_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_server_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_action_get_server_names_and_types_by_node$descriptor() {
        return rcl_action_get_server_names_and_types_by_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_server_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static MethodHandle rcl_action_get_server_names_and_types_by_node$handle() {
        return rcl_action_get_server_names_and_types_by_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_server_names_and_types_by_node(const rcl_node_t *node, rcl_allocator_t *allocator, const char *node_name, const char *node_namespace, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static int rcl_action_get_server_names_and_types_by_node(MemorySegment node, MemorySegment allocator, MemorySegment node_name, MemorySegment node_namespace, MemorySegment action_names_and_types) {
        var mh$ = rcl_action_get_server_names_and_types_by_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_server_names_and_types_by_node", node, allocator, node_name, node_namespace, action_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, node_name, node_namespace, action_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_get_names_and_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_get_names_and_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static FunctionDescriptor rcl_action_get_names_and_types$descriptor() {
        return rcl_action_get_names_and_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static MethodHandle rcl_action_get_names_and_types$handle() {
        return rcl_action_get_names_and_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_get_names_and_types(const rcl_node_t *node, rcl_allocator_t *allocator, rcl_names_and_types_t *action_names_and_types)
     * }
     */
    public static int rcl_action_get_names_and_types(MemorySegment node, MemorySegment allocator, MemorySegment action_names_and_types) {
        var mh$ = rcl_action_get_names_and_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_get_names_and_types", node, allocator, action_names_and_types);
            }
            return (int)mh$.invokeExact(node, allocator, action_names_and_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_wait_set_add_action_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_wait_set_add_action_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_wait_set_add_action_client(rcl_wait_set_t *wait_set, const rcl_action_client_t *action_client, size_t *client_index, size_t *subscription_index)
     * }
     */
    public static FunctionDescriptor rcl_action_wait_set_add_action_client$descriptor() {
        return rcl_action_wait_set_add_action_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_wait_set_add_action_client(rcl_wait_set_t *wait_set, const rcl_action_client_t *action_client, size_t *client_index, size_t *subscription_index)
     * }
     */
    public static MethodHandle rcl_action_wait_set_add_action_client$handle() {
        return rcl_action_wait_set_add_action_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_wait_set_add_action_client(rcl_wait_set_t *wait_set, const rcl_action_client_t *action_client, size_t *client_index, size_t *subscription_index)
     * }
     */
    public static int rcl_action_wait_set_add_action_client(MemorySegment wait_set, MemorySegment action_client, MemorySegment client_index, MemorySegment subscription_index) {
        var mh$ = rcl_action_wait_set_add_action_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_wait_set_add_action_client", wait_set, action_client, client_index, subscription_index);
            }
            return (int)mh$.invokeExact(wait_set, action_client, client_index, subscription_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_wait_set_add_action_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_wait_set_add_action_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_wait_set_add_action_server(rcl_wait_set_t *wait_set, const rcl_action_server_t *action_server, size_t *service_index)
     * }
     */
    public static FunctionDescriptor rcl_action_wait_set_add_action_server$descriptor() {
        return rcl_action_wait_set_add_action_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_wait_set_add_action_server(rcl_wait_set_t *wait_set, const rcl_action_server_t *action_server, size_t *service_index)
     * }
     */
    public static MethodHandle rcl_action_wait_set_add_action_server$handle() {
        return rcl_action_wait_set_add_action_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_wait_set_add_action_server(rcl_wait_set_t *wait_set, const rcl_action_server_t *action_server, size_t *service_index)
     * }
     */
    public static int rcl_action_wait_set_add_action_server(MemorySegment wait_set, MemorySegment action_server, MemorySegment service_index) {
        var mh$ = rcl_action_wait_set_add_action_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_wait_set_add_action_server", wait_set, action_server, service_index);
            }
            return (int)mh$.invokeExact(wait_set, action_server, service_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_wait_set_get_num_entities {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_wait_set_get_num_entities"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_wait_set_get_num_entities(const rcl_action_client_t *action_client, size_t *num_subscriptions, size_t *num_guard_conditions, size_t *num_timers, size_t *num_clients, size_t *num_services)
     * }
     */
    public static FunctionDescriptor rcl_action_client_wait_set_get_num_entities$descriptor() {
        return rcl_action_client_wait_set_get_num_entities.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_wait_set_get_num_entities(const rcl_action_client_t *action_client, size_t *num_subscriptions, size_t *num_guard_conditions, size_t *num_timers, size_t *num_clients, size_t *num_services)
     * }
     */
    public static MethodHandle rcl_action_client_wait_set_get_num_entities$handle() {
        return rcl_action_client_wait_set_get_num_entities.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_wait_set_get_num_entities(const rcl_action_client_t *action_client, size_t *num_subscriptions, size_t *num_guard_conditions, size_t *num_timers, size_t *num_clients, size_t *num_services)
     * }
     */
    public static int rcl_action_client_wait_set_get_num_entities(MemorySegment action_client, MemorySegment num_subscriptions, MemorySegment num_guard_conditions, MemorySegment num_timers, MemorySegment num_clients, MemorySegment num_services) {
        var mh$ = rcl_action_client_wait_set_get_num_entities.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_wait_set_get_num_entities", action_client, num_subscriptions, num_guard_conditions, num_timers, num_clients, num_services);
            }
            return (int)mh$.invokeExact(action_client, num_subscriptions, num_guard_conditions, num_timers, num_clients, num_services);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_wait_set_get_num_entities {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_wait_set_get_num_entities"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_wait_set_get_num_entities(const rcl_action_server_t *action_server, size_t *num_subscriptions, size_t *num_guard_conditions, size_t *num_timers, size_t *num_clients, size_t *num_services)
     * }
     */
    public static FunctionDescriptor rcl_action_server_wait_set_get_num_entities$descriptor() {
        return rcl_action_server_wait_set_get_num_entities.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_wait_set_get_num_entities(const rcl_action_server_t *action_server, size_t *num_subscriptions, size_t *num_guard_conditions, size_t *num_timers, size_t *num_clients, size_t *num_services)
     * }
     */
    public static MethodHandle rcl_action_server_wait_set_get_num_entities$handle() {
        return rcl_action_server_wait_set_get_num_entities.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_wait_set_get_num_entities(const rcl_action_server_t *action_server, size_t *num_subscriptions, size_t *num_guard_conditions, size_t *num_timers, size_t *num_clients, size_t *num_services)
     * }
     */
    public static int rcl_action_server_wait_set_get_num_entities(MemorySegment action_server, MemorySegment num_subscriptions, MemorySegment num_guard_conditions, MemorySegment num_timers, MemorySegment num_clients, MemorySegment num_services) {
        var mh$ = rcl_action_server_wait_set_get_num_entities.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_wait_set_get_num_entities", action_server, num_subscriptions, num_guard_conditions, num_timers, num_clients, num_services);
            }
            return (int)mh$.invokeExact(action_server, num_subscriptions, num_guard_conditions, num_timers, num_clients, num_services);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_client_wait_set_get_entities_ready {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_client_wait_set_get_entities_ready"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_wait_set_get_entities_ready(const rcl_wait_set_t *wait_set, const rcl_action_client_t *action_client, bool *is_feedback_ready, bool *is_status_ready, bool *is_goal_response_ready, bool *is_cancel_response_ready, bool *is_result_response_ready)
     * }
     */
    public static FunctionDescriptor rcl_action_client_wait_set_get_entities_ready$descriptor() {
        return rcl_action_client_wait_set_get_entities_ready.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_wait_set_get_entities_ready(const rcl_wait_set_t *wait_set, const rcl_action_client_t *action_client, bool *is_feedback_ready, bool *is_status_ready, bool *is_goal_response_ready, bool *is_cancel_response_ready, bool *is_result_response_ready)
     * }
     */
    public static MethodHandle rcl_action_client_wait_set_get_entities_ready$handle() {
        return rcl_action_client_wait_set_get_entities_ready.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_client_wait_set_get_entities_ready(const rcl_wait_set_t *wait_set, const rcl_action_client_t *action_client, bool *is_feedback_ready, bool *is_status_ready, bool *is_goal_response_ready, bool *is_cancel_response_ready, bool *is_result_response_ready)
     * }
     */
    public static int rcl_action_client_wait_set_get_entities_ready(MemorySegment wait_set, MemorySegment action_client, MemorySegment is_feedback_ready, MemorySegment is_status_ready, MemorySegment is_goal_response_ready, MemorySegment is_cancel_response_ready, MemorySegment is_result_response_ready) {
        var mh$ = rcl_action_client_wait_set_get_entities_ready.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_client_wait_set_get_entities_ready", wait_set, action_client, is_feedback_ready, is_status_ready, is_goal_response_ready, is_cancel_response_ready, is_result_response_ready);
            }
            return (int)mh$.invokeExact(wait_set, action_client, is_feedback_ready, is_status_ready, is_goal_response_ready, is_cancel_response_ready, is_result_response_ready);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_action_server_wait_set_get_entities_ready {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_action_server_wait_set_get_entities_ready"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_wait_set_get_entities_ready(const rcl_wait_set_t *wait_set, const rcl_action_server_t *action_server, bool *is_goal_request_ready, bool *is_cancel_request_ready, bool *is_result_request_ready, bool *is_goal_expired)
     * }
     */
    public static FunctionDescriptor rcl_action_server_wait_set_get_entities_ready$descriptor() {
        return rcl_action_server_wait_set_get_entities_ready.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_wait_set_get_entities_ready(const rcl_wait_set_t *wait_set, const rcl_action_server_t *action_server, bool *is_goal_request_ready, bool *is_cancel_request_ready, bool *is_result_request_ready, bool *is_goal_expired)
     * }
     */
    public static MethodHandle rcl_action_server_wait_set_get_entities_ready$handle() {
        return rcl_action_server_wait_set_get_entities_ready.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_action_server_wait_set_get_entities_ready(const rcl_wait_set_t *wait_set, const rcl_action_server_t *action_server, bool *is_goal_request_ready, bool *is_cancel_request_ready, bool *is_result_request_ready, bool *is_goal_expired)
     * }
     */
    public static int rcl_action_server_wait_set_get_entities_ready(MemorySegment wait_set, MemorySegment action_server, MemorySegment is_goal_request_ready, MemorySegment is_cancel_request_ready, MemorySegment is_result_request_ready, MemorySegment is_goal_expired) {
        var mh$ = rcl_action_server_wait_set_get_entities_ready.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_action_server_wait_set_get_entities_ready", wait_set, action_server, is_goal_request_ready, is_cancel_request_ready, is_result_request_ready, is_goal_expired);
            }
            return (int)mh$.invokeExact(wait_set, action_server, is_goal_request_ready, is_cancel_request_ready, is_result_request_ready, is_goal_expired);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_CREATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_CREATE = 0
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_CREATE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_CREATE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_CONFIGURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_CONFIGURE = 1
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_CONFIGURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_CONFIGURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_CLEANUP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_CLEANUP = 2
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_CLEANUP() {
        return lifecycle_msgs__msg__Transition__TRANSITION_CLEANUP;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ACTIVATE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ACTIVATE = 3
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ACTIVATE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ACTIVATE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_DEACTIVATE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_DEACTIVATE = 4
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_DEACTIVATE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_DEACTIVATE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_UNCONFIGURED_SHUTDOWN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_UNCONFIGURED_SHUTDOWN = 5
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_UNCONFIGURED_SHUTDOWN() {
        return lifecycle_msgs__msg__Transition__TRANSITION_UNCONFIGURED_SHUTDOWN;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_INACTIVE_SHUTDOWN = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_INACTIVE_SHUTDOWN = 6
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_INACTIVE_SHUTDOWN() {
        return lifecycle_msgs__msg__Transition__TRANSITION_INACTIVE_SHUTDOWN;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ACTIVE_SHUTDOWN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ACTIVE_SHUTDOWN = 7
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ACTIVE_SHUTDOWN() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ACTIVE_SHUTDOWN;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_DESTROY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_DESTROY = 8
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_DESTROY() {
        return lifecycle_msgs__msg__Transition__TRANSITION_DESTROY;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_SUCCESS = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_SUCCESS = 10
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_SUCCESS() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_SUCCESS;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_FAILURE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_FAILURE = 11
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_FAILURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_FAILURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_ERROR = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_ERROR = 12
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_ERROR() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_CONFIGURE_ERROR;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_SUCCESS = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_SUCCESS = 20
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_SUCCESS() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_SUCCESS;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_FAILURE = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_FAILURE = 21
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_FAILURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_FAILURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_ERROR = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_ERROR = 22
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_ERROR() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_CLEANUP_ERROR;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_SUCCESS = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_SUCCESS = 30
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_SUCCESS() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_SUCCESS;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_FAILURE = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_FAILURE = 31
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_FAILURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_FAILURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_ERROR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_ERROR = 32
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_ERROR() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_ACTIVATE_ERROR;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_SUCCESS = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_SUCCESS = 40
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_SUCCESS() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_SUCCESS;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_FAILURE = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_FAILURE = 41
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_FAILURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_FAILURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_ERROR = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_ERROR = 42
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_ERROR() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_DEACTIVATE_ERROR;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_SUCCESS = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_SUCCESS = 50
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_SUCCESS() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_SUCCESS;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_FAILURE = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_FAILURE = 51
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_FAILURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_FAILURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_ERROR = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_ERROR = 52
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_ERROR() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_SHUTDOWN_ERROR;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_SUCCESS = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_SUCCESS = 60
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_SUCCESS() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_SUCCESS;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_FAILURE = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_FAILURE = 61
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_FAILURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_FAILURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_ERROR = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_ERROR = 62
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_ERROR() {
        return lifecycle_msgs__msg__Transition__TRANSITION_ON_ERROR_ERROR;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_SUCCESS = (int)97L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_SUCCESS = 97
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_SUCCESS() {
        return lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_SUCCESS;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_FAILURE = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_FAILURE = 98
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_FAILURE() {
        return lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_FAILURE;
    }
    private static final int lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_ERROR = (int)99L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_ERROR = 99
     * }
     */
    public static int lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_ERROR() {
        return lifecycle_msgs__msg__Transition__TRANSITION_CALLBACK_ERROR;
    }
    private static final int lifecycle_msgs__msg__State__PRIMARY_STATE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__PRIMARY_STATE_UNKNOWN = 0
     * }
     */
    public static int lifecycle_msgs__msg__State__PRIMARY_STATE_UNKNOWN() {
        return lifecycle_msgs__msg__State__PRIMARY_STATE_UNKNOWN;
    }
    private static final int lifecycle_msgs__msg__State__PRIMARY_STATE_UNCONFIGURED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__PRIMARY_STATE_UNCONFIGURED = 1
     * }
     */
    public static int lifecycle_msgs__msg__State__PRIMARY_STATE_UNCONFIGURED() {
        return lifecycle_msgs__msg__State__PRIMARY_STATE_UNCONFIGURED;
    }
    private static final int lifecycle_msgs__msg__State__PRIMARY_STATE_INACTIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__PRIMARY_STATE_INACTIVE = 2
     * }
     */
    public static int lifecycle_msgs__msg__State__PRIMARY_STATE_INACTIVE() {
        return lifecycle_msgs__msg__State__PRIMARY_STATE_INACTIVE;
    }
    private static final int lifecycle_msgs__msg__State__PRIMARY_STATE_ACTIVE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__PRIMARY_STATE_ACTIVE = 3
     * }
     */
    public static int lifecycle_msgs__msg__State__PRIMARY_STATE_ACTIVE() {
        return lifecycle_msgs__msg__State__PRIMARY_STATE_ACTIVE;
    }
    private static final int lifecycle_msgs__msg__State__PRIMARY_STATE_FINALIZED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__PRIMARY_STATE_FINALIZED = 4
     * }
     */
    public static int lifecycle_msgs__msg__State__PRIMARY_STATE_FINALIZED() {
        return lifecycle_msgs__msg__State__PRIMARY_STATE_FINALIZED;
    }
    private static final int lifecycle_msgs__msg__State__TRANSITION_STATE_CONFIGURING = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__TRANSITION_STATE_CONFIGURING = 10
     * }
     */
    public static int lifecycle_msgs__msg__State__TRANSITION_STATE_CONFIGURING() {
        return lifecycle_msgs__msg__State__TRANSITION_STATE_CONFIGURING;
    }
    private static final int lifecycle_msgs__msg__State__TRANSITION_STATE_CLEANINGUP = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__TRANSITION_STATE_CLEANINGUP = 11
     * }
     */
    public static int lifecycle_msgs__msg__State__TRANSITION_STATE_CLEANINGUP() {
        return lifecycle_msgs__msg__State__TRANSITION_STATE_CLEANINGUP;
    }
    private static final int lifecycle_msgs__msg__State__TRANSITION_STATE_SHUTTINGDOWN = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__TRANSITION_STATE_SHUTTINGDOWN = 12
     * }
     */
    public static int lifecycle_msgs__msg__State__TRANSITION_STATE_SHUTTINGDOWN() {
        return lifecycle_msgs__msg__State__TRANSITION_STATE_SHUTTINGDOWN;
    }
    private static final int lifecycle_msgs__msg__State__TRANSITION_STATE_ACTIVATING = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__TRANSITION_STATE_ACTIVATING = 13
     * }
     */
    public static int lifecycle_msgs__msg__State__TRANSITION_STATE_ACTIVATING() {
        return lifecycle_msgs__msg__State__TRANSITION_STATE_ACTIVATING;
    }
    private static final int lifecycle_msgs__msg__State__TRANSITION_STATE_DEACTIVATING = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__TRANSITION_STATE_DEACTIVATING = 14
     * }
     */
    public static int lifecycle_msgs__msg__State__TRANSITION_STATE_DEACTIVATING() {
        return lifecycle_msgs__msg__State__TRANSITION_STATE_DEACTIVATING;
    }
    private static final int lifecycle_msgs__msg__State__TRANSITION_STATE_ERRORPROCESSING = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.lifecycle_msgs__msg__State__TRANSITION_STATE_ERRORPROCESSING = 15
     * }
     */
    public static int lifecycle_msgs__msg__State__TRANSITION_STATE_ERRORPROCESSING() {
        return lifecycle_msgs__msg__State__TRANSITION_STATE_ERRORPROCESSING;
    }

    private static class lifecycle_msgs__msg__TransitionEvent__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__init(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__init$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__init(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__init$handle() {
        return lifecycle_msgs__msg__TransitionEvent__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__init(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static boolean lifecycle_msgs__msg__TransitionEvent__init(MemorySegment msg) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__fini(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__fini$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__fini(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__fini$handle() {
        return lifecycle_msgs__msg__TransitionEvent__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__fini(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static void lifecycle_msgs__msg__TransitionEvent__fini(MemorySegment msg) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent *lifecycle_msgs__msg__TransitionEvent__create()
     * }
     */
    public static class lifecycle_msgs__msg__TransitionEvent__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private lifecycle_msgs__msg__TransitionEvent__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * lifecycle_msgs__msg__TransitionEvent *lifecycle_msgs__msg__TransitionEvent__create()
         * }
         */
        public static lifecycle_msgs__msg__TransitionEvent__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new lifecycle_msgs__msg__TransitionEvent__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("lifecycle_msgs__msg__TransitionEvent__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__destroy(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__destroy$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__destroy(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__destroy$handle() {
        return lifecycle_msgs__msg__TransitionEvent__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__destroy(lifecycle_msgs__msg__TransitionEvent *msg)
     * }
     */
    public static void lifecycle_msgs__msg__TransitionEvent__destroy(MemorySegment msg) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__are_equal(const lifecycle_msgs__msg__TransitionEvent *lhs, const lifecycle_msgs__msg__TransitionEvent *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__are_equal$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__are_equal(const lifecycle_msgs__msg__TransitionEvent *lhs, const lifecycle_msgs__msg__TransitionEvent *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__are_equal$handle() {
        return lifecycle_msgs__msg__TransitionEvent__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__are_equal(const lifecycle_msgs__msg__TransitionEvent *lhs, const lifecycle_msgs__msg__TransitionEvent *rhs)
     * }
     */
    public static boolean lifecycle_msgs__msg__TransitionEvent__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__copy(const lifecycle_msgs__msg__TransitionEvent *input, lifecycle_msgs__msg__TransitionEvent *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__copy$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__copy(const lifecycle_msgs__msg__TransitionEvent *input, lifecycle_msgs__msg__TransitionEvent *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__copy$handle() {
        return lifecycle_msgs__msg__TransitionEvent__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__copy(const lifecycle_msgs__msg__TransitionEvent *input, lifecycle_msgs__msg__TransitionEvent *output)
     * }
     */
    public static boolean lifecycle_msgs__msg__TransitionEvent__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__init(lifecycle_msgs__msg__TransitionEvent__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__Sequence__init$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__init(lifecycle_msgs__msg__TransitionEvent__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__Sequence__init$handle() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__init(lifecycle_msgs__msg__TransitionEvent__Sequence *array, size_t size)
     * }
     */
    public static boolean lifecycle_msgs__msg__TransitionEvent__Sequence__init(MemorySegment array, long size) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__Sequence__fini(lifecycle_msgs__msg__TransitionEvent__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__Sequence__fini$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__Sequence__fini(lifecycle_msgs__msg__TransitionEvent__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__Sequence__fini$handle() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__Sequence__fini(lifecycle_msgs__msg__TransitionEvent__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__msg__TransitionEvent__Sequence__fini(MemorySegment array) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent__Sequence *lifecycle_msgs__msg__TransitionEvent__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__Sequence__create$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent__Sequence *lifecycle_msgs__msg__TransitionEvent__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__Sequence__create$handle() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent__Sequence *lifecycle_msgs__msg__TransitionEvent__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment lifecycle_msgs__msg__TransitionEvent__Sequence__create(long size) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__Sequence__destroy(lifecycle_msgs__msg__TransitionEvent__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__Sequence__destroy$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__Sequence__destroy(lifecycle_msgs__msg__TransitionEvent__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__Sequence__destroy$handle() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__msg__TransitionEvent__Sequence__destroy(lifecycle_msgs__msg__TransitionEvent__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__msg__TransitionEvent__Sequence__destroy(MemorySegment array) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal(const lifecycle_msgs__msg__TransitionEvent__Sequence *lhs, const lifecycle_msgs__msg__TransitionEvent__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal(const lifecycle_msgs__msg__TransitionEvent__Sequence *lhs, const lifecycle_msgs__msg__TransitionEvent__Sequence *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal$handle() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal(const lifecycle_msgs__msg__TransitionEvent__Sequence *lhs, const lifecycle_msgs__msg__TransitionEvent__Sequence *rhs)
     * }
     */
    public static boolean lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__msg__TransitionEvent__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__msg__TransitionEvent__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__copy(const lifecycle_msgs__msg__TransitionEvent__Sequence *input, lifecycle_msgs__msg__TransitionEvent__Sequence *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__msg__TransitionEvent__Sequence__copy$descriptor() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__copy(const lifecycle_msgs__msg__TransitionEvent__Sequence *input, lifecycle_msgs__msg__TransitionEvent__Sequence *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__msg__TransitionEvent__Sequence__copy$handle() {
        return lifecycle_msgs__msg__TransitionEvent__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__msg__TransitionEvent__Sequence__copy(const lifecycle_msgs__msg__TransitionEvent__Sequence *input, lifecycle_msgs__msg__TransitionEvent__Sequence *output)
     * }
     */
    public static boolean lifecycle_msgs__msg__TransitionEvent__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__msg__TransitionEvent__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__msg__TransitionEvent__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_lifecycle_configure_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_configure_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_configure_label
     * }
     */
    public static AddressLayout rcl_lifecycle_configure_label$layout() {
        return rcl_lifecycle_configure_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_configure_label
     * }
     */
    public static MemorySegment rcl_lifecycle_configure_label$segment() {
        return rcl_lifecycle_configure_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_configure_label
     * }
     */
    public static MemorySegment rcl_lifecycle_configure_label() {
        return rcl_lifecycle_configure_label$constants.SEGMENT.get(rcl_lifecycle_configure_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_configure_label
     * }
     */
    public static void rcl_lifecycle_configure_label(MemorySegment varValue) {
        rcl_lifecycle_configure_label$constants.SEGMENT.set(rcl_lifecycle_configure_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_cleanup_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_cleanup_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_cleanup_label
     * }
     */
    public static AddressLayout rcl_lifecycle_cleanup_label$layout() {
        return rcl_lifecycle_cleanup_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_cleanup_label
     * }
     */
    public static MemorySegment rcl_lifecycle_cleanup_label$segment() {
        return rcl_lifecycle_cleanup_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_cleanup_label
     * }
     */
    public static MemorySegment rcl_lifecycle_cleanup_label() {
        return rcl_lifecycle_cleanup_label$constants.SEGMENT.get(rcl_lifecycle_cleanup_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_cleanup_label
     * }
     */
    public static void rcl_lifecycle_cleanup_label(MemorySegment varValue) {
        rcl_lifecycle_cleanup_label$constants.SEGMENT.set(rcl_lifecycle_cleanup_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_activate_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_activate_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_activate_label
     * }
     */
    public static AddressLayout rcl_lifecycle_activate_label$layout() {
        return rcl_lifecycle_activate_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_activate_label
     * }
     */
    public static MemorySegment rcl_lifecycle_activate_label$segment() {
        return rcl_lifecycle_activate_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_activate_label
     * }
     */
    public static MemorySegment rcl_lifecycle_activate_label() {
        return rcl_lifecycle_activate_label$constants.SEGMENT.get(rcl_lifecycle_activate_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_activate_label
     * }
     */
    public static void rcl_lifecycle_activate_label(MemorySegment varValue) {
        rcl_lifecycle_activate_label$constants.SEGMENT.set(rcl_lifecycle_activate_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_deactivate_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_deactivate_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_deactivate_label
     * }
     */
    public static AddressLayout rcl_lifecycle_deactivate_label$layout() {
        return rcl_lifecycle_deactivate_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_deactivate_label
     * }
     */
    public static MemorySegment rcl_lifecycle_deactivate_label$segment() {
        return rcl_lifecycle_deactivate_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_deactivate_label
     * }
     */
    public static MemorySegment rcl_lifecycle_deactivate_label() {
        return rcl_lifecycle_deactivate_label$constants.SEGMENT.get(rcl_lifecycle_deactivate_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_deactivate_label
     * }
     */
    public static void rcl_lifecycle_deactivate_label(MemorySegment varValue) {
        rcl_lifecycle_deactivate_label$constants.SEGMENT.set(rcl_lifecycle_deactivate_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_shutdown_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_shutdown_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_shutdown_label
     * }
     */
    public static AddressLayout rcl_lifecycle_shutdown_label$layout() {
        return rcl_lifecycle_shutdown_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_shutdown_label
     * }
     */
    public static MemorySegment rcl_lifecycle_shutdown_label$segment() {
        return rcl_lifecycle_shutdown_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_shutdown_label
     * }
     */
    public static MemorySegment rcl_lifecycle_shutdown_label() {
        return rcl_lifecycle_shutdown_label$constants.SEGMENT.get(rcl_lifecycle_shutdown_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_shutdown_label
     * }
     */
    public static void rcl_lifecycle_shutdown_label(MemorySegment varValue) {
        rcl_lifecycle_shutdown_label$constants.SEGMENT.set(rcl_lifecycle_shutdown_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_transition_success_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_transition_success_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_success_label
     * }
     */
    public static AddressLayout rcl_lifecycle_transition_success_label$layout() {
        return rcl_lifecycle_transition_success_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_success_label
     * }
     */
    public static MemorySegment rcl_lifecycle_transition_success_label$segment() {
        return rcl_lifecycle_transition_success_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_success_label
     * }
     */
    public static MemorySegment rcl_lifecycle_transition_success_label() {
        return rcl_lifecycle_transition_success_label$constants.SEGMENT.get(rcl_lifecycle_transition_success_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_success_label
     * }
     */
    public static void rcl_lifecycle_transition_success_label(MemorySegment varValue) {
        rcl_lifecycle_transition_success_label$constants.SEGMENT.set(rcl_lifecycle_transition_success_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_transition_failure_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_transition_failure_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_failure_label
     * }
     */
    public static AddressLayout rcl_lifecycle_transition_failure_label$layout() {
        return rcl_lifecycle_transition_failure_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_failure_label
     * }
     */
    public static MemorySegment rcl_lifecycle_transition_failure_label$segment() {
        return rcl_lifecycle_transition_failure_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_failure_label
     * }
     */
    public static MemorySegment rcl_lifecycle_transition_failure_label() {
        return rcl_lifecycle_transition_failure_label$constants.SEGMENT.get(rcl_lifecycle_transition_failure_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_failure_label
     * }
     */
    public static void rcl_lifecycle_transition_failure_label(MemorySegment varValue) {
        rcl_lifecycle_transition_failure_label$constants.SEGMENT.set(rcl_lifecycle_transition_failure_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_transition_error_label$constants {
        public static final AddressLayout LAYOUT = gen_h.C_POINTER;
        public static final MemorySegment SEGMENT = gen_h.findOrThrow("rcl_lifecycle_transition_error_label").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_error_label
     * }
     */
    public static AddressLayout rcl_lifecycle_transition_error_label$layout() {
        return rcl_lifecycle_transition_error_label$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_error_label
     * }
     */
    public static MemorySegment rcl_lifecycle_transition_error_label$segment() {
        return rcl_lifecycle_transition_error_label$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_error_label
     * }
     */
    public static MemorySegment rcl_lifecycle_transition_error_label() {
        return rcl_lifecycle_transition_error_label$constants.SEGMENT.get(rcl_lifecycle_transition_error_label$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *rcl_lifecycle_transition_error_label
     * }
     */
    public static void rcl_lifecycle_transition_error_label(MemorySegment varValue) {
        rcl_lifecycle_transition_error_label$constants.SEGMENT.set(rcl_lifecycle_transition_error_label$constants.LAYOUT, 0L, varValue);
    }

    private static class rcl_lifecycle_init_default_state_machine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_init_default_state_machine"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_init_default_state_machine(rcl_lifecycle_state_machine_t *state_machine, const rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_init_default_state_machine$descriptor() {
        return rcl_lifecycle_init_default_state_machine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_init_default_state_machine(rcl_lifecycle_state_machine_t *state_machine, const rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rcl_lifecycle_init_default_state_machine$handle() {
        return rcl_lifecycle_init_default_state_machine.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_init_default_state_machine(rcl_lifecycle_state_machine_t *state_machine, const rcl_allocator_t *allocator)
     * }
     */
    public static int rcl_lifecycle_init_default_state_machine(MemorySegment state_machine, MemorySegment allocator) {
        var mh$ = rcl_lifecycle_init_default_state_machine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_init_default_state_machine", state_machine, allocator);
            }
            return (int)mh$.invokeExact(state_machine, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_lifecycle_state_t rcl_lifecycle_get_zero_initialized_state()
     * }
     */
    public static class rcl_lifecycle_get_zero_initialized_state {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                rcl_lifecycle_state_s.layout()        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_lifecycle_get_zero_initialized_state");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_lifecycle_get_zero_initialized_state(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_lifecycle_state_t rcl_lifecycle_get_zero_initialized_state()
         * }
         */
        public static rcl_lifecycle_get_zero_initialized_state makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_lifecycle_get_zero_initialized_state(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_lifecycle_get_zero_initialized_state", allocator, x0);
                }
                return (MemorySegment)spreader.invokeExact(allocator, x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_lifecycle_state_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_CHAR,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_state_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_init(rcl_lifecycle_state_t *state, uint8_t id, const char *label, const rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_state_init$descriptor() {
        return rcl_lifecycle_state_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_init(rcl_lifecycle_state_t *state, uint8_t id, const char *label, const rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rcl_lifecycle_state_init$handle() {
        return rcl_lifecycle_state_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_init(rcl_lifecycle_state_t *state, uint8_t id, const char *label, const rcl_allocator_t *allocator)
     * }
     */
    public static int rcl_lifecycle_state_init(MemorySegment state, byte id, MemorySegment label, MemorySegment allocator) {
        var mh$ = rcl_lifecycle_state_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_state_init", state, id, label, allocator);
            }
            return (int)mh$.invokeExact(state, id, label, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_state_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_state_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_fini(rcl_lifecycle_state_t *state, const rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_state_fini$descriptor() {
        return rcl_lifecycle_state_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_fini(rcl_lifecycle_state_t *state, const rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rcl_lifecycle_state_fini$handle() {
        return rcl_lifecycle_state_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_fini(rcl_lifecycle_state_t *state, const rcl_allocator_t *allocator)
     * }
     */
    public static int rcl_lifecycle_state_fini(MemorySegment state, MemorySegment allocator) {
        var mh$ = rcl_lifecycle_state_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_state_fini", state, allocator);
            }
            return (int)mh$.invokeExact(state, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_lifecycle_transition_t rcl_lifecycle_get_zero_initialized_transition()
     * }
     */
    public static class rcl_lifecycle_get_zero_initialized_transition {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                rcl_lifecycle_transition_s.layout()        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_lifecycle_get_zero_initialized_transition");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_lifecycle_get_zero_initialized_transition(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_lifecycle_transition_t rcl_lifecycle_get_zero_initialized_transition()
         * }
         */
        public static rcl_lifecycle_get_zero_initialized_transition makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_lifecycle_get_zero_initialized_transition(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_lifecycle_get_zero_initialized_transition", allocator, x0);
                }
                return (MemorySegment)spreader.invokeExact(allocator, x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_lifecycle_transition_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_transition_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_transition_init(rcl_lifecycle_transition_t *transition, unsigned int id, const char *label, rcl_lifecycle_state_t *start, rcl_lifecycle_state_t *goal, const rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_transition_init$descriptor() {
        return rcl_lifecycle_transition_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_transition_init(rcl_lifecycle_transition_t *transition, unsigned int id, const char *label, rcl_lifecycle_state_t *start, rcl_lifecycle_state_t *goal, const rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rcl_lifecycle_transition_init$handle() {
        return rcl_lifecycle_transition_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_transition_init(rcl_lifecycle_transition_t *transition, unsigned int id, const char *label, rcl_lifecycle_state_t *start, rcl_lifecycle_state_t *goal, const rcl_allocator_t *allocator)
     * }
     */
    public static int rcl_lifecycle_transition_init(MemorySegment transition, int id, MemorySegment label, MemorySegment start, MemorySegment goal, MemorySegment allocator) {
        var mh$ = rcl_lifecycle_transition_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_transition_init", transition, id, label, start, goal, allocator);
            }
            return (int)mh$.invokeExact(transition, id, label, start, goal, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_transition_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_transition_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_transition_fini(rcl_lifecycle_transition_t *transition, const rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_transition_fini$descriptor() {
        return rcl_lifecycle_transition_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_transition_fini(rcl_lifecycle_transition_t *transition, const rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rcl_lifecycle_transition_fini$handle() {
        return rcl_lifecycle_transition_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_transition_fini(rcl_lifecycle_transition_t *transition, const rcl_allocator_t *allocator)
     * }
     */
    public static int rcl_lifecycle_transition_fini(MemorySegment transition, MemorySegment allocator) {
        var mh$ = rcl_lifecycle_transition_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_transition_fini", transition, allocator);
            }
            return (int)mh$.invokeExact(transition, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_options_t rcl_lifecycle_get_default_state_machine_options()
     * }
     */
    public static class rcl_lifecycle_get_default_state_machine_options {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                rcl_lifecycle_state_machine_options_s.layout()        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_lifecycle_get_default_state_machine_options");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_lifecycle_get_default_state_machine_options(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_lifecycle_state_machine_options_t rcl_lifecycle_get_default_state_machine_options()
         * }
         */
        public static rcl_lifecycle_get_default_state_machine_options makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_lifecycle_get_default_state_machine_options(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_lifecycle_get_default_state_machine_options", allocator, x0);
                }
                return (MemorySegment)spreader.invokeExact(allocator, x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_lifecycle_state_machine_t rcl_lifecycle_get_zero_initialized_state_machine()
     * }
     */
    public static class rcl_lifecycle_get_zero_initialized_state_machine {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                rcl_lifecycle_state_machine_s.layout()        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_lifecycle_get_zero_initialized_state_machine");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_lifecycle_get_zero_initialized_state_machine(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_lifecycle_state_machine_t rcl_lifecycle_get_zero_initialized_state_machine()
         * }
         */
        public static rcl_lifecycle_get_zero_initialized_state_machine makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_lifecycle_get_zero_initialized_state_machine(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_lifecycle_get_zero_initialized_state_machine", allocator, x0);
                }
                return (MemorySegment)spreader.invokeExact(allocator, x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_lifecycle_state_machine_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_state_machine_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_init(rcl_lifecycle_state_machine_t *state_machine, rcl_node_t *node_handle, const rosidl_message_type_support_t *ts_pub_notify, const rosidl_service_type_support_t *ts_srv_change_state, const rosidl_service_type_support_t *ts_srv_get_state, const rosidl_service_type_support_t *ts_srv_get_available_states, const rosidl_service_type_support_t *ts_srv_get_available_transitions, const rosidl_service_type_support_t *ts_srv_get_transition_graph, const rcl_lifecycle_state_machine_options_t *state_machine_options)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_state_machine_init$descriptor() {
        return rcl_lifecycle_state_machine_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_init(rcl_lifecycle_state_machine_t *state_machine, rcl_node_t *node_handle, const rosidl_message_type_support_t *ts_pub_notify, const rosidl_service_type_support_t *ts_srv_change_state, const rosidl_service_type_support_t *ts_srv_get_state, const rosidl_service_type_support_t *ts_srv_get_available_states, const rosidl_service_type_support_t *ts_srv_get_available_transitions, const rosidl_service_type_support_t *ts_srv_get_transition_graph, const rcl_lifecycle_state_machine_options_t *state_machine_options)
     * }
     */
    public static MethodHandle rcl_lifecycle_state_machine_init$handle() {
        return rcl_lifecycle_state_machine_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_init(rcl_lifecycle_state_machine_t *state_machine, rcl_node_t *node_handle, const rosidl_message_type_support_t *ts_pub_notify, const rosidl_service_type_support_t *ts_srv_change_state, const rosidl_service_type_support_t *ts_srv_get_state, const rosidl_service_type_support_t *ts_srv_get_available_states, const rosidl_service_type_support_t *ts_srv_get_available_transitions, const rosidl_service_type_support_t *ts_srv_get_transition_graph, const rcl_lifecycle_state_machine_options_t *state_machine_options)
     * }
     */
    public static int rcl_lifecycle_state_machine_init(MemorySegment state_machine, MemorySegment node_handle, MemorySegment ts_pub_notify, MemorySegment ts_srv_change_state, MemorySegment ts_srv_get_state, MemorySegment ts_srv_get_available_states, MemorySegment ts_srv_get_available_transitions, MemorySegment ts_srv_get_transition_graph, MemorySegment state_machine_options) {
        var mh$ = rcl_lifecycle_state_machine_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_state_machine_init", state_machine, node_handle, ts_pub_notify, ts_srv_change_state, ts_srv_get_state, ts_srv_get_available_states, ts_srv_get_available_transitions, ts_srv_get_transition_graph, state_machine_options);
            }
            return (int)mh$.invokeExact(state_machine, node_handle, ts_pub_notify, ts_srv_change_state, ts_srv_get_state, ts_srv_get_available_states, ts_srv_get_available_transitions, ts_srv_get_transition_graph, state_machine_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_state_machine_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_state_machine_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_fini(rcl_lifecycle_state_machine_t *state_machine, rcl_node_t *node_handle)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_state_machine_fini$descriptor() {
        return rcl_lifecycle_state_machine_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_fini(rcl_lifecycle_state_machine_t *state_machine, rcl_node_t *node_handle)
     * }
     */
    public static MethodHandle rcl_lifecycle_state_machine_fini$handle() {
        return rcl_lifecycle_state_machine_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_fini(rcl_lifecycle_state_machine_t *state_machine, rcl_node_t *node_handle)
     * }
     */
    public static int rcl_lifecycle_state_machine_fini(MemorySegment state_machine, MemorySegment node_handle) {
        var mh$ = rcl_lifecycle_state_machine_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_state_machine_fini", state_machine, node_handle);
            }
            return (int)mh$.invokeExact(state_machine, node_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_state_machine_is_initialized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_state_machine_is_initialized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_is_initialized(const rcl_lifecycle_state_machine_t *state_machine)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_state_machine_is_initialized$descriptor() {
        return rcl_lifecycle_state_machine_is_initialized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_is_initialized(const rcl_lifecycle_state_machine_t *state_machine)
     * }
     */
    public static MethodHandle rcl_lifecycle_state_machine_is_initialized$handle() {
        return rcl_lifecycle_state_machine_is_initialized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_state_machine_is_initialized(const rcl_lifecycle_state_machine_t *state_machine)
     * }
     */
    public static int rcl_lifecycle_state_machine_is_initialized(MemorySegment state_machine) {
        var mh$ = rcl_lifecycle_state_machine_is_initialized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_state_machine_is_initialized", state_machine);
            }
            return (int)mh$.invokeExact(state_machine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_get_transition_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_get_transition_by_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const rcl_lifecycle_transition_t *rcl_lifecycle_get_transition_by_id(const rcl_lifecycle_state_t *state, uint8_t id)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_get_transition_by_id$descriptor() {
        return rcl_lifecycle_get_transition_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const rcl_lifecycle_transition_t *rcl_lifecycle_get_transition_by_id(const rcl_lifecycle_state_t *state, uint8_t id)
     * }
     */
    public static MethodHandle rcl_lifecycle_get_transition_by_id$handle() {
        return rcl_lifecycle_get_transition_by_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const rcl_lifecycle_transition_t *rcl_lifecycle_get_transition_by_id(const rcl_lifecycle_state_t *state, uint8_t id)
     * }
     */
    public static MemorySegment rcl_lifecycle_get_transition_by_id(MemorySegment state, byte id) {
        var mh$ = rcl_lifecycle_get_transition_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_get_transition_by_id", state, id);
            }
            return (MemorySegment)mh$.invokeExact(state, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_get_transition_by_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_get_transition_by_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const rcl_lifecycle_transition_t *rcl_lifecycle_get_transition_by_label(const rcl_lifecycle_state_t *state, const char *label)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_get_transition_by_label$descriptor() {
        return rcl_lifecycle_get_transition_by_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const rcl_lifecycle_transition_t *rcl_lifecycle_get_transition_by_label(const rcl_lifecycle_state_t *state, const char *label)
     * }
     */
    public static MethodHandle rcl_lifecycle_get_transition_by_label$handle() {
        return rcl_lifecycle_get_transition_by_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const rcl_lifecycle_transition_t *rcl_lifecycle_get_transition_by_label(const rcl_lifecycle_state_t *state, const char *label)
     * }
     */
    public static MemorySegment rcl_lifecycle_get_transition_by_label(MemorySegment state, MemorySegment label) {
        var mh$ = rcl_lifecycle_get_transition_by_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_get_transition_by_label", state, label);
            }
            return (MemorySegment)mh$.invokeExact(state, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_trigger_transition_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_CHAR,
            gen_h.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_trigger_transition_by_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_trigger_transition_by_id(rcl_lifecycle_state_machine_t *state_machine, uint8_t id, bool publish_notification)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_trigger_transition_by_id$descriptor() {
        return rcl_lifecycle_trigger_transition_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_trigger_transition_by_id(rcl_lifecycle_state_machine_t *state_machine, uint8_t id, bool publish_notification)
     * }
     */
    public static MethodHandle rcl_lifecycle_trigger_transition_by_id$handle() {
        return rcl_lifecycle_trigger_transition_by_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_trigger_transition_by_id(rcl_lifecycle_state_machine_t *state_machine, uint8_t id, bool publish_notification)
     * }
     */
    public static int rcl_lifecycle_trigger_transition_by_id(MemorySegment state_machine, byte id, boolean publish_notification) {
        var mh$ = rcl_lifecycle_trigger_transition_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_trigger_transition_by_id", state_machine, id, publish_notification);
            }
            return (int)mh$.invokeExact(state_machine, id, publish_notification);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_lifecycle_trigger_transition_by_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_lifecycle_trigger_transition_by_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_trigger_transition_by_label(rcl_lifecycle_state_machine_t *state_machine, const char *label, bool publish_notification)
     * }
     */
    public static FunctionDescriptor rcl_lifecycle_trigger_transition_by_label$descriptor() {
        return rcl_lifecycle_trigger_transition_by_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_trigger_transition_by_label(rcl_lifecycle_state_machine_t *state_machine, const char *label, bool publish_notification)
     * }
     */
    public static MethodHandle rcl_lifecycle_trigger_transition_by_label$handle() {
        return rcl_lifecycle_trigger_transition_by_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rcl_lifecycle_trigger_transition_by_label(rcl_lifecycle_state_machine_t *state_machine, const char *label, bool publish_notification)
     * }
     */
    public static int rcl_lifecycle_trigger_transition_by_label(MemorySegment state_machine, MemorySegment label, boolean publish_notification) {
        var mh$ = rcl_lifecycle_trigger_transition_by_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_lifecycle_trigger_transition_by_label", state_machine, label, publish_notification);
            }
            return (int)mh$.invokeExact(state_machine, label, publish_notification);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_print_state_machine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_print_state_machine"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_print_state_machine(const rcl_lifecycle_state_machine_t *state_machine)
     * }
     */
    public static FunctionDescriptor rcl_print_state_machine$descriptor() {
        return rcl_print_state_machine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_print_state_machine(const rcl_lifecycle_state_machine_t *state_machine)
     * }
     */
    public static MethodHandle rcl_print_state_machine$handle() {
        return rcl_print_state_machine.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_print_state_machine(const rcl_lifecycle_state_machine_t *state_machine)
     * }
     */
    public static void rcl_print_state_machine(MemorySegment state_machine) {
        var mh$ = rcl_print_state_machine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_print_state_machine", state_machine);
            }
            mh$.invokeExact(state_machine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_yaml_node_struct_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_yaml_node_struct_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_init(const rcutils_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_yaml_node_struct_init$descriptor() {
        return rcl_yaml_node_struct_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_init(const rcutils_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_yaml_node_struct_init$handle() {
        return rcl_yaml_node_struct_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_init(const rcutils_allocator_t allocator)
     * }
     */
    public static MemorySegment rcl_yaml_node_struct_init(MemorySegment allocator) {
        var mh$ = rcl_yaml_node_struct_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_yaml_node_struct_init", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_yaml_node_struct_init_with_capacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_yaml_node_struct_init_with_capacity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_init_with_capacity(size_t capacity, const rcutils_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_yaml_node_struct_init_with_capacity$descriptor() {
        return rcl_yaml_node_struct_init_with_capacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_init_with_capacity(size_t capacity, const rcutils_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_yaml_node_struct_init_with_capacity$handle() {
        return rcl_yaml_node_struct_init_with_capacity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_init_with_capacity(size_t capacity, const rcutils_allocator_t allocator)
     * }
     */
    public static MemorySegment rcl_yaml_node_struct_init_with_capacity(long capacity, MemorySegment allocator) {
        var mh$ = rcl_yaml_node_struct_init_with_capacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_yaml_node_struct_init_with_capacity", capacity, allocator);
            }
            return (MemorySegment)mh$.invokeExact(capacity, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_yaml_node_struct_reallocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            rcutils_allocator_s.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_yaml_node_struct_reallocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcutils_ret_t rcl_yaml_node_struct_reallocate(rcl_params_t *params_st, size_t new_capacity, const rcutils_allocator_t allocator)
     * }
     */
    public static FunctionDescriptor rcl_yaml_node_struct_reallocate$descriptor() {
        return rcl_yaml_node_struct_reallocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcutils_ret_t rcl_yaml_node_struct_reallocate(rcl_params_t *params_st, size_t new_capacity, const rcutils_allocator_t allocator)
     * }
     */
    public static MethodHandle rcl_yaml_node_struct_reallocate$handle() {
        return rcl_yaml_node_struct_reallocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcutils_ret_t rcl_yaml_node_struct_reallocate(rcl_params_t *params_st, size_t new_capacity, const rcutils_allocator_t allocator)
     * }
     */
    public static int rcl_yaml_node_struct_reallocate(MemorySegment params_st, long new_capacity, MemorySegment allocator) {
        var mh$ = rcl_yaml_node_struct_reallocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_yaml_node_struct_reallocate", params_st, new_capacity, allocator);
            }
            return (int)mh$.invokeExact(params_st, new_capacity, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_yaml_node_struct_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_yaml_node_struct_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_copy(const rcl_params_t *params_st)
     * }
     */
    public static FunctionDescriptor rcl_yaml_node_struct_copy$descriptor() {
        return rcl_yaml_node_struct_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_copy(const rcl_params_t *params_st)
     * }
     */
    public static MethodHandle rcl_yaml_node_struct_copy$handle() {
        return rcl_yaml_node_struct_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_params_t *rcl_yaml_node_struct_copy(const rcl_params_t *params_st)
     * }
     */
    public static MemorySegment rcl_yaml_node_struct_copy(MemorySegment params_st) {
        var mh$ = rcl_yaml_node_struct_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_yaml_node_struct_copy", params_st);
            }
            return (MemorySegment)mh$.invokeExact(params_st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_yaml_node_struct_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_yaml_node_struct_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_yaml_node_struct_fini(rcl_params_t *params_st)
     * }
     */
    public static FunctionDescriptor rcl_yaml_node_struct_fini$descriptor() {
        return rcl_yaml_node_struct_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_yaml_node_struct_fini(rcl_params_t *params_st)
     * }
     */
    public static MethodHandle rcl_yaml_node_struct_fini$handle() {
        return rcl_yaml_node_struct_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_yaml_node_struct_fini(rcl_params_t *params_st)
     * }
     */
    public static void rcl_yaml_node_struct_fini(MemorySegment params_st) {
        var mh$ = rcl_yaml_node_struct_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_yaml_node_struct_fini", params_st);
            }
            mh$.invokeExact(params_st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_parse_yaml_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_parse_yaml_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_parse_yaml_file(const char *file_path, rcl_params_t *params_st)
     * }
     */
    public static FunctionDescriptor rcl_parse_yaml_file$descriptor() {
        return rcl_parse_yaml_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_parse_yaml_file(const char *file_path, rcl_params_t *params_st)
     * }
     */
    public static MethodHandle rcl_parse_yaml_file$handle() {
        return rcl_parse_yaml_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_parse_yaml_file(const char *file_path, rcl_params_t *params_st)
     * }
     */
    public static boolean rcl_parse_yaml_file(MemorySegment file_path, MemorySegment params_st) {
        var mh$ = rcl_parse_yaml_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_parse_yaml_file", file_path, params_st);
            }
            return (boolean)mh$.invokeExact(file_path, params_st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_parse_yaml_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_parse_yaml_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_parse_yaml_value(const char *node_name, const char *param_name, const char *yaml_value, rcl_params_t *params_st)
     * }
     */
    public static FunctionDescriptor rcl_parse_yaml_value$descriptor() {
        return rcl_parse_yaml_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_parse_yaml_value(const char *node_name, const char *param_name, const char *yaml_value, rcl_params_t *params_st)
     * }
     */
    public static MethodHandle rcl_parse_yaml_value$handle() {
        return rcl_parse_yaml_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_parse_yaml_value(const char *node_name, const char *param_name, const char *yaml_value, rcl_params_t *params_st)
     * }
     */
    public static boolean rcl_parse_yaml_value(MemorySegment node_name, MemorySegment param_name, MemorySegment yaml_value, MemorySegment params_st) {
        var mh$ = rcl_parse_yaml_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_parse_yaml_value", node_name, param_name, yaml_value, params_st);
            }
            return (boolean)mh$.invokeExact(node_name, param_name, yaml_value, params_st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_yaml_node_struct_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_yaml_node_struct_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_variant_t *rcl_yaml_node_struct_get(const char *node_name, const char *param_name, rcl_params_t *params_st)
     * }
     */
    public static FunctionDescriptor rcl_yaml_node_struct_get$descriptor() {
        return rcl_yaml_node_struct_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_variant_t *rcl_yaml_node_struct_get(const char *node_name, const char *param_name, rcl_params_t *params_st)
     * }
     */
    public static MethodHandle rcl_yaml_node_struct_get$handle() {
        return rcl_yaml_node_struct_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_variant_t *rcl_yaml_node_struct_get(const char *node_name, const char *param_name, rcl_params_t *params_st)
     * }
     */
    public static MemorySegment rcl_yaml_node_struct_get(MemorySegment node_name, MemorySegment param_name, MemorySegment params_st) {
        var mh$ = rcl_yaml_node_struct_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_yaml_node_struct_get", node_name, param_name, params_st);
            }
            return (MemorySegment)mh$.invokeExact(node_name, param_name, params_st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_yaml_node_struct_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_yaml_node_struct_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_yaml_node_struct_print(const rcl_params_t *const params_st)
     * }
     */
    public static FunctionDescriptor rcl_yaml_node_struct_print$descriptor() {
        return rcl_yaml_node_struct_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_yaml_node_struct_print(const rcl_params_t *const params_st)
     * }
     */
    public static MethodHandle rcl_yaml_node_struct_print$handle() {
        return rcl_yaml_node_struct_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_yaml_node_struct_print(const rcl_params_t *const params_st)
     * }
     */
    public static void rcl_yaml_node_struct_print(MemorySegment params_st) {
        var mh$ = rcl_yaml_node_struct_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_yaml_node_struct_print", params_st);
            }
            mh$.invokeExact(params_st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_support_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_support_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_init(rclc_support_t *support, int argc, const char *const *argv, rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rclc_support_init$descriptor() {
        return rclc_support_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_init(rclc_support_t *support, int argc, const char *const *argv, rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rclc_support_init$handle() {
        return rclc_support_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_init(rclc_support_t *support, int argc, const char *const *argv, rcl_allocator_t *allocator)
     * }
     */
    public static int rclc_support_init(MemorySegment support, int argc, MemorySegment argv, MemorySegment allocator) {
        var mh$ = rclc_support_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_support_init", support, argc, argv, allocator);
            }
            return (int)mh$.invokeExact(support, argc, argv, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_support_init_with_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_support_init_with_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_init_with_options(rclc_support_t *support, int argc, const char *const *argv, rcl_init_options_t *init_options, rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rclc_support_init_with_options$descriptor() {
        return rclc_support_init_with_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_init_with_options(rclc_support_t *support, int argc, const char *const *argv, rcl_init_options_t *init_options, rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rclc_support_init_with_options$handle() {
        return rclc_support_init_with_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_init_with_options(rclc_support_t *support, int argc, const char *const *argv, rcl_init_options_t *init_options, rcl_allocator_t *allocator)
     * }
     */
    public static int rclc_support_init_with_options(MemorySegment support, int argc, MemorySegment argv, MemorySegment init_options, MemorySegment allocator) {
        var mh$ = rclc_support_init_with_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_support_init_with_options", support, argc, argv, init_options, allocator);
            }
            return (int)mh$.invokeExact(support, argc, argv, init_options, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_support_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_support_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_fini(rclc_support_t *support)
     * }
     */
    public static FunctionDescriptor rclc_support_fini$descriptor() {
        return rclc_support_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_fini(rclc_support_t *support)
     * }
     */
    public static MethodHandle rclc_support_fini$handle() {
        return rclc_support_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_support_fini(rclc_support_t *support)
     * }
     */
    public static int rclc_support_fini(MemorySegment support) {
        var mh$ = rclc_support_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_support_fini", support);
            }
            return (int)mh$.invokeExact(support);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_node_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_node_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_node_init_default(rcl_node_t *node, const char *name, const char *namespace_, rclc_support_t *support)
     * }
     */
    public static FunctionDescriptor rclc_node_init_default$descriptor() {
        return rclc_node_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_node_init_default(rcl_node_t *node, const char *name, const char *namespace_, rclc_support_t *support)
     * }
     */
    public static MethodHandle rclc_node_init_default$handle() {
        return rclc_node_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_node_init_default(rcl_node_t *node, const char *name, const char *namespace_, rclc_support_t *support)
     * }
     */
    public static int rclc_node_init_default(MemorySegment node, MemorySegment name, MemorySegment namespace_, MemorySegment support) {
        var mh$ = rclc_node_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_node_init_default", node, name, namespace_, support);
            }
            return (int)mh$.invokeExact(node, name, namespace_, support);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_node_init_with_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_node_init_with_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_node_init_with_options(rcl_node_t *node, const char *name, const char *namespace_, rclc_support_t *support, rcl_node_options_t *node_ops)
     * }
     */
    public static FunctionDescriptor rclc_node_init_with_options$descriptor() {
        return rclc_node_init_with_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_node_init_with_options(rcl_node_t *node, const char *name, const char *namespace_, rclc_support_t *support, rcl_node_options_t *node_ops)
     * }
     */
    public static MethodHandle rclc_node_init_with_options$handle() {
        return rclc_node_init_with_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_node_init_with_options(rcl_node_t *node, const char *name, const char *namespace_, rclc_support_t *support, rcl_node_options_t *node_ops)
     * }
     */
    public static int rclc_node_init_with_options(MemorySegment node, MemorySegment name, MemorySegment namespace_, MemorySegment support, MemorySegment node_ops) {
        var mh$ = rclc_node_init_with_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_node_init_with_options", node, name, namespace_, support, node_ops);
            }
            return (int)mh$.invokeExact(node, name, namespace_, support, node_ops);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_publisher_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_publisher_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init_default(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static FunctionDescriptor rclc_publisher_init_default$descriptor() {
        return rclc_publisher_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init_default(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static MethodHandle rclc_publisher_init_default$handle() {
        return rclc_publisher_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init_default(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static int rclc_publisher_init_default(MemorySegment publisher, MemorySegment node, MemorySegment type_support, MemorySegment topic_name) {
        var mh$ = rclc_publisher_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_publisher_init_default", publisher, node, type_support, topic_name);
            }
            return (int)mh$.invokeExact(publisher, node, type_support, topic_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_publisher_init_best_effort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_publisher_init_best_effort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init_best_effort(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static FunctionDescriptor rclc_publisher_init_best_effort$descriptor() {
        return rclc_publisher_init_best_effort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init_best_effort(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static MethodHandle rclc_publisher_init_best_effort$handle() {
        return rclc_publisher_init_best_effort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init_best_effort(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static int rclc_publisher_init_best_effort(MemorySegment publisher, MemorySegment node, MemorySegment type_support, MemorySegment topic_name) {
        var mh$ = rclc_publisher_init_best_effort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_publisher_init_best_effort", publisher, node, type_support, topic_name);
            }
            return (int)mh$.invokeExact(publisher, node, type_support, topic_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_publisher_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_publisher_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static FunctionDescriptor rclc_publisher_init$descriptor() {
        return rclc_publisher_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static MethodHandle rclc_publisher_init$handle() {
        return rclc_publisher_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_publisher_init(rcl_publisher_t *publisher, const rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static int rclc_publisher_init(MemorySegment publisher, MemorySegment node, MemorySegment type_support, MemorySegment topic_name, MemorySegment qos_profile) {
        var mh$ = rclc_publisher_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_publisher_init", publisher, node, type_support, topic_name, qos_profile);
            }
            return (int)mh$.invokeExact(publisher, node, type_support, topic_name, qos_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_subscription_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_subscription_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init_default(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static FunctionDescriptor rclc_subscription_init_default$descriptor() {
        return rclc_subscription_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init_default(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static MethodHandle rclc_subscription_init_default$handle() {
        return rclc_subscription_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init_default(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static int rclc_subscription_init_default(MemorySegment subscription, MemorySegment node, MemorySegment type_support, MemorySegment topic_name) {
        var mh$ = rclc_subscription_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_subscription_init_default", subscription, node, type_support, topic_name);
            }
            return (int)mh$.invokeExact(subscription, node, type_support, topic_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_subscription_init_best_effort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_subscription_init_best_effort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init_best_effort(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static FunctionDescriptor rclc_subscription_init_best_effort$descriptor() {
        return rclc_subscription_init_best_effort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init_best_effort(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static MethodHandle rclc_subscription_init_best_effort$handle() {
        return rclc_subscription_init_best_effort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init_best_effort(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name)
     * }
     */
    public static int rclc_subscription_init_best_effort(MemorySegment subscription, MemorySegment node, MemorySegment type_support, MemorySegment topic_name) {
        var mh$ = rclc_subscription_init_best_effort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_subscription_init_best_effort", subscription, node, type_support, topic_name);
            }
            return (int)mh$.invokeExact(subscription, node, type_support, topic_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_subscription_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_subscription_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static FunctionDescriptor rclc_subscription_init$descriptor() {
        return rclc_subscription_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static MethodHandle rclc_subscription_init$handle() {
        return rclc_subscription_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_subscription_init(rcl_subscription_t *subscription, rcl_node_t *node, const rosidl_message_type_support_t *type_support, const char *topic_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static int rclc_subscription_init(MemorySegment subscription, MemorySegment node, MemorySegment type_support, MemorySegment topic_name, MemorySegment qos_profile) {
        var mh$ = rclc_subscription_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_subscription_init", subscription, node, type_support, topic_name, qos_profile);
            }
            return (int)mh$.invokeExact(subscription, node, type_support, topic_name, qos_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_timer_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_timer_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_timer_init_default(rcl_timer_t *timer, rclc_support_t *support, const uint64_t timeout_ns, const rcl_timer_callback_t callback)
     * }
     */
    public static FunctionDescriptor rclc_timer_init_default$descriptor() {
        return rclc_timer_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_timer_init_default(rcl_timer_t *timer, rclc_support_t *support, const uint64_t timeout_ns, const rcl_timer_callback_t callback)
     * }
     */
    public static MethodHandle rclc_timer_init_default$handle() {
        return rclc_timer_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_timer_init_default(rcl_timer_t *timer, rclc_support_t *support, const uint64_t timeout_ns, const rcl_timer_callback_t callback)
     * }
     */
    public static int rclc_timer_init_default(MemorySegment timer, MemorySegment support, long timeout_ns, MemorySegment callback) {
        var mh$ = rclc_timer_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_timer_init_default", timer, support, timeout_ns, callback);
            }
            return (int)mh$.invokeExact(timer, support, timeout_ns, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_client_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_client_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init_default(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static FunctionDescriptor rclc_client_init_default$descriptor() {
        return rclc_client_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init_default(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static MethodHandle rclc_client_init_default$handle() {
        return rclc_client_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init_default(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static int rclc_client_init_default(MemorySegment client, MemorySegment node, MemorySegment type_support, MemorySegment service_name) {
        var mh$ = rclc_client_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_client_init_default", client, node, type_support, service_name);
            }
            return (int)mh$.invokeExact(client, node, type_support, service_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_client_init_best_effort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_client_init_best_effort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init_best_effort(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static FunctionDescriptor rclc_client_init_best_effort$descriptor() {
        return rclc_client_init_best_effort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init_best_effort(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static MethodHandle rclc_client_init_best_effort$handle() {
        return rclc_client_init_best_effort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init_best_effort(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static int rclc_client_init_best_effort(MemorySegment client, MemorySegment node, MemorySegment type_support, MemorySegment service_name) {
        var mh$ = rclc_client_init_best_effort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_client_init_best_effort", client, node, type_support, service_name);
            }
            return (int)mh$.invokeExact(client, node, type_support, service_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_client_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_client_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static FunctionDescriptor rclc_client_init$descriptor() {
        return rclc_client_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static MethodHandle rclc_client_init$handle() {
        return rclc_client_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_client_init(rcl_client_t *client, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static int rclc_client_init(MemorySegment client, MemorySegment node, MemorySegment type_support, MemorySegment service_name, MemorySegment qos_profile) {
        var mh$ = rclc_client_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_client_init", client, node, type_support, service_name, qos_profile);
            }
            return (int)mh$.invokeExact(client, node, type_support, service_name, qos_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_service_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_service_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init_default(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static FunctionDescriptor rclc_service_init_default$descriptor() {
        return rclc_service_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init_default(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static MethodHandle rclc_service_init_default$handle() {
        return rclc_service_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init_default(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static int rclc_service_init_default(MemorySegment service, MemorySegment node, MemorySegment type_support, MemorySegment service_name) {
        var mh$ = rclc_service_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_service_init_default", service, node, type_support, service_name);
            }
            return (int)mh$.invokeExact(service, node, type_support, service_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_service_init_best_effort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_service_init_best_effort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init_best_effort(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static FunctionDescriptor rclc_service_init_best_effort$descriptor() {
        return rclc_service_init_best_effort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init_best_effort(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static MethodHandle rclc_service_init_best_effort$handle() {
        return rclc_service_init_best_effort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init_best_effort(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name)
     * }
     */
    public static int rclc_service_init_best_effort(MemorySegment service, MemorySegment node, MemorySegment type_support, MemorySegment service_name) {
        var mh$ = rclc_service_init_best_effort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_service_init_best_effort", service, node, type_support, service_name);
            }
            return (int)mh$.invokeExact(service, node, type_support, service_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_service_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_service_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static FunctionDescriptor rclc_service_init$descriptor() {
        return rclc_service_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static MethodHandle rclc_service_init$handle() {
        return rclc_service_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_service_init(rcl_service_t *service, const rcl_node_t *node, const rosidl_service_type_support_t *type_support, const char *service_name, const rmw_qos_profile_t *qos_profile)
     * }
     */
    public static int rclc_service_init(MemorySegment service, MemorySegment node, MemorySegment type_support, MemorySegment service_name, MemorySegment qos_profile) {
        var mh$ = rclc_service_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_service_init", service, node, type_support, service_name, qos_profile);
            }
            return (int)mh$.invokeExact(service, node, type_support, service_name, qos_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_client_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_client_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_client_init_default(rclc_action_client_t *action_client, rcl_node_t *node, const rosidl_action_type_support_t *type_support, const char *action_name)
     * }
     */
    public static FunctionDescriptor rclc_action_client_init_default$descriptor() {
        return rclc_action_client_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_client_init_default(rclc_action_client_t *action_client, rcl_node_t *node, const rosidl_action_type_support_t *type_support, const char *action_name)
     * }
     */
    public static MethodHandle rclc_action_client_init_default$handle() {
        return rclc_action_client_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_client_init_default(rclc_action_client_t *action_client, rcl_node_t *node, const rosidl_action_type_support_t *type_support, const char *action_name)
     * }
     */
    public static int rclc_action_client_init_default(MemorySegment action_client, MemorySegment node, MemorySegment type_support, MemorySegment action_name) {
        var mh$ = rclc_action_client_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_client_init_default", action_client, node, type_support, action_name);
            }
            return (int)mh$.invokeExact(action_client, node, type_support, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_send_goal_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_send_goal_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_goal_request(rclc_action_client_t *action_client, void *ros_request, rclc_action_goal_handle_t **goal_handle)
     * }
     */
    public static FunctionDescriptor rclc_action_send_goal_request$descriptor() {
        return rclc_action_send_goal_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_goal_request(rclc_action_client_t *action_client, void *ros_request, rclc_action_goal_handle_t **goal_handle)
     * }
     */
    public static MethodHandle rclc_action_send_goal_request$handle() {
        return rclc_action_send_goal_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_goal_request(rclc_action_client_t *action_client, void *ros_request, rclc_action_goal_handle_t **goal_handle)
     * }
     */
    public static int rclc_action_send_goal_request(MemorySegment action_client, MemorySegment ros_request, MemorySegment goal_handle) {
        var mh$ = rclc_action_send_goal_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_send_goal_request", action_client, ros_request, goal_handle);
            }
            return (int)mh$.invokeExact(action_client, ros_request, goal_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_send_cancel_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_send_cancel_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_cancel_request(rclc_action_goal_handle_t *goal_handle)
     * }
     */
    public static FunctionDescriptor rclc_action_send_cancel_request$descriptor() {
        return rclc_action_send_cancel_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_cancel_request(rclc_action_goal_handle_t *goal_handle)
     * }
     */
    public static MethodHandle rclc_action_send_cancel_request$handle() {
        return rclc_action_send_cancel_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_cancel_request(rclc_action_goal_handle_t *goal_handle)
     * }
     */
    public static int rclc_action_send_cancel_request(MemorySegment goal_handle) {
        var mh$ = rclc_action_send_cancel_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_send_cancel_request", goal_handle);
            }
            return (int)mh$.invokeExact(goal_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_client_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_client_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_client_fini(rclc_action_client_t *action_client, rcl_node_t *node)
     * }
     */
    public static FunctionDescriptor rclc_action_client_fini$descriptor() {
        return rclc_action_client_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_client_fini(rclc_action_client_t *action_client, rcl_node_t *node)
     * }
     */
    public static MethodHandle rclc_action_client_fini$handle() {
        return rclc_action_client_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_client_fini(rclc_action_client_t *action_client, rcl_node_t *node)
     * }
     */
    public static int rclc_action_client_fini(MemorySegment action_client, MemorySegment node) {
        var mh$ = rclc_action_client_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_client_fini", action_client, node);
            }
            return (int)mh$.invokeExact(action_client, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_server_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_server_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_server_init_default(rclc_action_server_t *action_server, rcl_node_t *node, rclc_support_t *support, const rosidl_action_type_support_t *type_support, const char *action_name)
     * }
     */
    public static FunctionDescriptor rclc_action_server_init_default$descriptor() {
        return rclc_action_server_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_server_init_default(rclc_action_server_t *action_server, rcl_node_t *node, rclc_support_t *support, const rosidl_action_type_support_t *type_support, const char *action_name)
     * }
     */
    public static MethodHandle rclc_action_server_init_default$handle() {
        return rclc_action_server_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_server_init_default(rclc_action_server_t *action_server, rcl_node_t *node, rclc_support_t *support, const rosidl_action_type_support_t *type_support, const char *action_name)
     * }
     */
    public static int rclc_action_server_init_default(MemorySegment action_server, MemorySegment node, MemorySegment support, MemorySegment type_support, MemorySegment action_name) {
        var mh$ = rclc_action_server_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_server_init_default", action_server, node, support, type_support, action_name);
            }
            return (int)mh$.invokeExact(action_server, node, support, type_support, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_send_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_CHAR,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_send_result"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_result(rclc_action_goal_handle_t *goal_handle, rcl_action_goal_state_t status, void *ros_response)
     * }
     */
    public static FunctionDescriptor rclc_action_send_result$descriptor() {
        return rclc_action_send_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_result(rclc_action_goal_handle_t *goal_handle, rcl_action_goal_state_t status, void *ros_response)
     * }
     */
    public static MethodHandle rclc_action_send_result$handle() {
        return rclc_action_send_result.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_send_result(rclc_action_goal_handle_t *goal_handle, rcl_action_goal_state_t status, void *ros_response)
     * }
     */
    public static int rclc_action_send_result(MemorySegment goal_handle, byte status, MemorySegment ros_response) {
        var mh$ = rclc_action_send_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_send_result", goal_handle, status, ros_response);
            }
            return (int)mh$.invokeExact(goal_handle, status, ros_response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_publish_feedback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_publish_feedback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_publish_feedback(rclc_action_goal_handle_t *goal_handle, void *ros_feedback)
     * }
     */
    public static FunctionDescriptor rclc_action_publish_feedback$descriptor() {
        return rclc_action_publish_feedback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_publish_feedback(rclc_action_goal_handle_t *goal_handle, void *ros_feedback)
     * }
     */
    public static MethodHandle rclc_action_publish_feedback$handle() {
        return rclc_action_publish_feedback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_publish_feedback(rclc_action_goal_handle_t *goal_handle, void *ros_feedback)
     * }
     */
    public static int rclc_action_publish_feedback(MemorySegment goal_handle, MemorySegment ros_feedback) {
        var mh$ = rclc_action_publish_feedback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_publish_feedback", goal_handle, ros_feedback);
            }
            return (int)mh$.invokeExact(goal_handle, ros_feedback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_action_server_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_action_server_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_server_fini(rclc_action_server_t *action_server, rcl_node_t *node)
     * }
     */
    public static FunctionDescriptor rclc_action_server_fini$descriptor() {
        return rclc_action_server_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_server_fini(rclc_action_server_t *action_server, rcl_node_t *node)
     * }
     */
    public static MethodHandle rclc_action_server_fini$handle() {
        return rclc_action_server_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_action_server_fini(rclc_action_server_t *action_server, rcl_node_t *node)
     * }
     */
    public static int rclc_action_server_fini(MemorySegment action_server, MemorySegment node) {
        var mh$ = rclc_action_server_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_action_server_fini", action_server, node);
            }
            return (int)mh$.invokeExact(action_server, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RCLC_SUBSCRIPTION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_SUBSCRIPTION = 0
     * }
     */
    public static int RCLC_SUBSCRIPTION() {
        return RCLC_SUBSCRIPTION;
    }
    private static final int RCLC_SUBSCRIPTION_WITH_CONTEXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_SUBSCRIPTION_WITH_CONTEXT = 1
     * }
     */
    public static int RCLC_SUBSCRIPTION_WITH_CONTEXT() {
        return RCLC_SUBSCRIPTION_WITH_CONTEXT;
    }
    private static final int RCLC_TIMER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_TIMER = 2
     * }
     */
    public static int RCLC_TIMER() {
        return RCLC_TIMER;
    }
    private static final int RCLC_CLIENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_CLIENT = 3
     * }
     */
    public static int RCLC_CLIENT() {
        return RCLC_CLIENT;
    }
    private static final int RCLC_CLIENT_WITH_REQUEST_ID = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_CLIENT_WITH_REQUEST_ID = 4
     * }
     */
    public static int RCLC_CLIENT_WITH_REQUEST_ID() {
        return RCLC_CLIENT_WITH_REQUEST_ID;
    }
    private static final int RCLC_SERVICE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_SERVICE = 5
     * }
     */
    public static int RCLC_SERVICE() {
        return RCLC_SERVICE;
    }
    private static final int RCLC_SERVICE_WITH_REQUEST_ID = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_SERVICE_WITH_REQUEST_ID = 6
     * }
     */
    public static int RCLC_SERVICE_WITH_REQUEST_ID() {
        return RCLC_SERVICE_WITH_REQUEST_ID;
    }
    private static final int RCLC_SERVICE_WITH_CONTEXT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_SERVICE_WITH_CONTEXT = 7
     * }
     */
    public static int RCLC_SERVICE_WITH_CONTEXT() {
        return RCLC_SERVICE_WITH_CONTEXT;
    }
    private static final int RCLC_ACTION_CLIENT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_ACTION_CLIENT = 8
     * }
     */
    public static int RCLC_ACTION_CLIENT() {
        return RCLC_ACTION_CLIENT;
    }
    private static final int RCLC_ACTION_SERVER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_ACTION_SERVER = 9
     * }
     */
    public static int RCLC_ACTION_SERVER() {
        return RCLC_ACTION_SERVER;
    }
    private static final int RCLC_GUARD_CONDITION = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_GUARD_CONDITION = 10
     * }
     */
    public static int RCLC_GUARD_CONDITION() {
        return RCLC_GUARD_CONDITION;
    }
    private static final int RCLC_NONE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLC_NONE = 11
     * }
     */
    public static int RCLC_NONE() {
        return RCLC_NONE;
    }
    private static final int ON_NEW_DATA = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ON_NEW_DATA = 0
     * }
     */
    public static int ON_NEW_DATA() {
        return ON_NEW_DATA;
    }
    private static final int ALWAYS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ALWAYS = 1
     * }
     */
    public static int ALWAYS() {
        return ALWAYS;
    }

    private static class rclc_executor_handle_counters_zero_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_handle_counters_zero_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_counters_zero_init(rclc_executor_handle_counters_t *handle_counters)
     * }
     */
    public static FunctionDescriptor rclc_executor_handle_counters_zero_init$descriptor() {
        return rclc_executor_handle_counters_zero_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_counters_zero_init(rclc_executor_handle_counters_t *handle_counters)
     * }
     */
    public static MethodHandle rclc_executor_handle_counters_zero_init$handle() {
        return rclc_executor_handle_counters_zero_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_counters_zero_init(rclc_executor_handle_counters_t *handle_counters)
     * }
     */
    public static int rclc_executor_handle_counters_zero_init(MemorySegment handle_counters) {
        var mh$ = rclc_executor_handle_counters_zero_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_handle_counters_zero_init", handle_counters);
            }
            return (int)mh$.invokeExact(handle_counters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_handle_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_handle_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_init(rclc_executor_handle_t *handle, size_t max_handles)
     * }
     */
    public static FunctionDescriptor rclc_executor_handle_init$descriptor() {
        return rclc_executor_handle_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_init(rclc_executor_handle_t *handle, size_t max_handles)
     * }
     */
    public static MethodHandle rclc_executor_handle_init$handle() {
        return rclc_executor_handle_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_init(rclc_executor_handle_t *handle, size_t max_handles)
     * }
     */
    public static int rclc_executor_handle_init(MemorySegment handle, long max_handles) {
        var mh$ = rclc_executor_handle_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_handle_init", handle, max_handles);
            }
            return (int)mh$.invokeExact(handle, max_handles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_handle_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_handle_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_clear(rclc_executor_handle_t *handle, size_t max_handles)
     * }
     */
    public static FunctionDescriptor rclc_executor_handle_clear$descriptor() {
        return rclc_executor_handle_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_clear(rclc_executor_handle_t *handle, size_t max_handles)
     * }
     */
    public static MethodHandle rclc_executor_handle_clear$handle() {
        return rclc_executor_handle_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_clear(rclc_executor_handle_t *handle, size_t max_handles)
     * }
     */
    public static int rclc_executor_handle_clear(MemorySegment handle, long max_handles) {
        var mh$ = rclc_executor_handle_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_handle_clear", handle, max_handles);
            }
            return (int)mh$.invokeExact(handle, max_handles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_handle_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_handle_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_print(rclc_executor_handle_t *handle)
     * }
     */
    public static FunctionDescriptor rclc_executor_handle_print$descriptor() {
        return rclc_executor_handle_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_print(rclc_executor_handle_t *handle)
     * }
     */
    public static MethodHandle rclc_executor_handle_print$handle() {
        return rclc_executor_handle_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_handle_print(rclc_executor_handle_t *handle)
     * }
     */
    public static int rclc_executor_handle_print(MemorySegment handle) {
        var mh$ = rclc_executor_handle_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_handle_print", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_handle_get_ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_handle_get_ptr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *rclc_executor_handle_get_ptr(rclc_executor_handle_t *handle)
     * }
     */
    public static FunctionDescriptor rclc_executor_handle_get_ptr$descriptor() {
        return rclc_executor_handle_get_ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *rclc_executor_handle_get_ptr(rclc_executor_handle_t *handle)
     * }
     */
    public static MethodHandle rclc_executor_handle_get_ptr$handle() {
        return rclc_executor_handle_get_ptr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void *rclc_executor_handle_get_ptr(rclc_executor_handle_t *handle)
     * }
     */
    public static MemorySegment rclc_executor_handle_get_ptr(MemorySegment handle) {
        var mh$ = rclc_executor_handle_get_ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_handle_get_ptr", handle);
            }
            return (MemorySegment)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_sleep_ms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_sleep_ms"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rclc_sleep_ms(unsigned int ms)
     * }
     */
    public static FunctionDescriptor rclc_sleep_ms$descriptor() {
        return rclc_sleep_ms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rclc_sleep_ms(unsigned int ms)
     * }
     */
    public static MethodHandle rclc_sleep_ms$handle() {
        return rclc_sleep_ms.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rclc_sleep_ms(unsigned int ms)
     * }
     */
    public static void rclc_sleep_ms(int ms) {
        var mh$ = rclc_sleep_ms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_sleep_ms", ms);
            }
            mh$.invokeExact(ms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RCLCPP_EXECUTOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RCLCPP_EXECUTOR = 0
     * }
     */
    public static int RCLCPP_EXECUTOR() {
        return RCLCPP_EXECUTOR;
    }
    private static final int LET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LET = 1
     * }
     */
    public static int LET() {
        return LET;
    }

    private static class rclc_executor_get_zero_initialized_executor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rclc_executor_t.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_get_zero_initialized_executor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rclc_executor_t rclc_executor_get_zero_initialized_executor()
     * }
     */
    public static FunctionDescriptor rclc_executor_get_zero_initialized_executor$descriptor() {
        return rclc_executor_get_zero_initialized_executor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rclc_executor_t rclc_executor_get_zero_initialized_executor()
     * }
     */
    public static MethodHandle rclc_executor_get_zero_initialized_executor$handle() {
        return rclc_executor_get_zero_initialized_executor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rclc_executor_t rclc_executor_get_zero_initialized_executor()
     * }
     */
    public static MemorySegment rclc_executor_get_zero_initialized_executor(SegmentAllocator allocator) {
        var mh$ = rclc_executor_get_zero_initialized_executor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_get_zero_initialized_executor", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_init(rclc_executor_t *executor, rcl_context_t *context, const size_t number_of_handles, const rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rclc_executor_init$descriptor() {
        return rclc_executor_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_init(rclc_executor_t *executor, rcl_context_t *context, const size_t number_of_handles, const rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rclc_executor_init$handle() {
        return rclc_executor_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_init(rclc_executor_t *executor, rcl_context_t *context, const size_t number_of_handles, const rcl_allocator_t *allocator)
     * }
     */
    public static int rclc_executor_init(MemorySegment executor, MemorySegment context, long number_of_handles, MemorySegment allocator) {
        var mh$ = rclc_executor_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_init", executor, context, number_of_handles, allocator);
            }
            return (int)mh$.invokeExact(executor, context, number_of_handles, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_set_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_set_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_timeout(rclc_executor_t *executor, const uint64_t timeout_ns)
     * }
     */
    public static FunctionDescriptor rclc_executor_set_timeout$descriptor() {
        return rclc_executor_set_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_timeout(rclc_executor_t *executor, const uint64_t timeout_ns)
     * }
     */
    public static MethodHandle rclc_executor_set_timeout$handle() {
        return rclc_executor_set_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_timeout(rclc_executor_t *executor, const uint64_t timeout_ns)
     * }
     */
    public static int rclc_executor_set_timeout(MemorySegment executor, long timeout_ns) {
        var mh$ = rclc_executor_set_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_set_timeout", executor, timeout_ns);
            }
            return (int)mh$.invokeExact(executor, timeout_ns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_set_semantics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_set_semantics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_semantics(rclc_executor_t *executor, rclc_executor_semantics_t semantics)
     * }
     */
    public static FunctionDescriptor rclc_executor_set_semantics$descriptor() {
        return rclc_executor_set_semantics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_semantics(rclc_executor_t *executor, rclc_executor_semantics_t semantics)
     * }
     */
    public static MethodHandle rclc_executor_set_semantics$handle() {
        return rclc_executor_set_semantics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_semantics(rclc_executor_t *executor, rclc_executor_semantics_t semantics)
     * }
     */
    public static int rclc_executor_set_semantics(MemorySegment executor, int semantics) {
        var mh$ = rclc_executor_set_semantics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_set_semantics", executor, semantics);
            }
            return (int)mh$.invokeExact(executor, semantics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_fini(rclc_executor_t *executor)
     * }
     */
    public static FunctionDescriptor rclc_executor_fini$descriptor() {
        return rclc_executor_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_fini(rclc_executor_t *executor)
     * }
     */
    public static MethodHandle rclc_executor_fini$handle() {
        return rclc_executor_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_fini(rclc_executor_t *executor)
     * }
     */
    public static int rclc_executor_fini(MemorySegment executor) {
        var mh$ = rclc_executor_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_fini", executor);
            }
            return (int)mh$.invokeExact(executor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_subscription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_subscription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_subscription(rclc_executor_t *executor, rcl_subscription_t *subscription, void *msg, rclc_subscription_callback_t callback, rclc_executor_handle_invocation_t invocation)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_subscription$descriptor() {
        return rclc_executor_add_subscription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_subscription(rclc_executor_t *executor, rcl_subscription_t *subscription, void *msg, rclc_subscription_callback_t callback, rclc_executor_handle_invocation_t invocation)
     * }
     */
    public static MethodHandle rclc_executor_add_subscription$handle() {
        return rclc_executor_add_subscription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_subscription(rclc_executor_t *executor, rcl_subscription_t *subscription, void *msg, rclc_subscription_callback_t callback, rclc_executor_handle_invocation_t invocation)
     * }
     */
    public static int rclc_executor_add_subscription(MemorySegment executor, MemorySegment subscription, MemorySegment msg, MemorySegment callback, int invocation) {
        var mh$ = rclc_executor_add_subscription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_subscription", executor, subscription, msg, callback, invocation);
            }
            return (int)mh$.invokeExact(executor, subscription, msg, callback, invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_subscription_with_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_subscription_with_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_subscription_with_context(rclc_executor_t *executor, rcl_subscription_t *subscription, void *msg, rclc_subscription_callback_with_context_t callback, void *context, rclc_executor_handle_invocation_t invocation)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_subscription_with_context$descriptor() {
        return rclc_executor_add_subscription_with_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_subscription_with_context(rclc_executor_t *executor, rcl_subscription_t *subscription, void *msg, rclc_subscription_callback_with_context_t callback, void *context, rclc_executor_handle_invocation_t invocation)
     * }
     */
    public static MethodHandle rclc_executor_add_subscription_with_context$handle() {
        return rclc_executor_add_subscription_with_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_subscription_with_context(rclc_executor_t *executor, rcl_subscription_t *subscription, void *msg, rclc_subscription_callback_with_context_t callback, void *context, rclc_executor_handle_invocation_t invocation)
     * }
     */
    public static int rclc_executor_add_subscription_with_context(MemorySegment executor, MemorySegment subscription, MemorySegment msg, MemorySegment callback, MemorySegment context, int invocation) {
        var mh$ = rclc_executor_add_subscription_with_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_subscription_with_context", executor, subscription, msg, callback, context, invocation);
            }
            return (int)mh$.invokeExact(executor, subscription, msg, callback, context, invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_timer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_timer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_timer(rclc_executor_t *executor, rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_timer$descriptor() {
        return rclc_executor_add_timer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_timer(rclc_executor_t *executor, rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rclc_executor_add_timer$handle() {
        return rclc_executor_add_timer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_timer(rclc_executor_t *executor, rcl_timer_t *timer)
     * }
     */
    public static int rclc_executor_add_timer(MemorySegment executor, MemorySegment timer) {
        var mh$ = rclc_executor_add_timer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_timer", executor, timer);
            }
            return (int)mh$.invokeExact(executor, timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_client(rclc_executor_t *executor, rcl_client_t *client, void *response_msg, rclc_client_callback_t callback)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_client$descriptor() {
        return rclc_executor_add_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_client(rclc_executor_t *executor, rcl_client_t *client, void *response_msg, rclc_client_callback_t callback)
     * }
     */
    public static MethodHandle rclc_executor_add_client$handle() {
        return rclc_executor_add_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_client(rclc_executor_t *executor, rcl_client_t *client, void *response_msg, rclc_client_callback_t callback)
     * }
     */
    public static int rclc_executor_add_client(MemorySegment executor, MemorySegment client, MemorySegment response_msg, MemorySegment callback) {
        var mh$ = rclc_executor_add_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_client", executor, client, response_msg, callback);
            }
            return (int)mh$.invokeExact(executor, client, response_msg, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_client_with_request_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_client_with_request_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_client_with_request_id(rclc_executor_t *executor, rcl_client_t *client, void *response_msg, rclc_client_callback_with_request_id_t callback)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_client_with_request_id$descriptor() {
        return rclc_executor_add_client_with_request_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_client_with_request_id(rclc_executor_t *executor, rcl_client_t *client, void *response_msg, rclc_client_callback_with_request_id_t callback)
     * }
     */
    public static MethodHandle rclc_executor_add_client_with_request_id$handle() {
        return rclc_executor_add_client_with_request_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_client_with_request_id(rclc_executor_t *executor, rcl_client_t *client, void *response_msg, rclc_client_callback_with_request_id_t callback)
     * }
     */
    public static int rclc_executor_add_client_with_request_id(MemorySegment executor, MemorySegment client, MemorySegment response_msg, MemorySegment callback) {
        var mh$ = rclc_executor_add_client_with_request_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_client_with_request_id", executor, client, response_msg, callback);
            }
            return (int)mh$.invokeExact(executor, client, response_msg, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_t callback)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_service$descriptor() {
        return rclc_executor_add_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_t callback)
     * }
     */
    public static MethodHandle rclc_executor_add_service$handle() {
        return rclc_executor_add_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_t callback)
     * }
     */
    public static int rclc_executor_add_service(MemorySegment executor, MemorySegment service, MemorySegment request_msg, MemorySegment response_msg, MemorySegment callback) {
        var mh$ = rclc_executor_add_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_service", executor, service, request_msg, response_msg, callback);
            }
            return (int)mh$.invokeExact(executor, service, request_msg, response_msg, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_action_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_action_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_action_client(rclc_executor_t *executor, rclc_action_client_t *action_client, size_t handles_number, void *ros_result_response, void *ros_feedback, rclc_action_client_goal_callback_t goal_callback, rclc_action_client_feedback_callback_t feedback_callback, rclc_action_client_result_callback_t result_callback, rclc_action_client_cancel_callback_t cancel_callback, void *context)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_action_client$descriptor() {
        return rclc_executor_add_action_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_action_client(rclc_executor_t *executor, rclc_action_client_t *action_client, size_t handles_number, void *ros_result_response, void *ros_feedback, rclc_action_client_goal_callback_t goal_callback, rclc_action_client_feedback_callback_t feedback_callback, rclc_action_client_result_callback_t result_callback, rclc_action_client_cancel_callback_t cancel_callback, void *context)
     * }
     */
    public static MethodHandle rclc_executor_add_action_client$handle() {
        return rclc_executor_add_action_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_action_client(rclc_executor_t *executor, rclc_action_client_t *action_client, size_t handles_number, void *ros_result_response, void *ros_feedback, rclc_action_client_goal_callback_t goal_callback, rclc_action_client_feedback_callback_t feedback_callback, rclc_action_client_result_callback_t result_callback, rclc_action_client_cancel_callback_t cancel_callback, void *context)
     * }
     */
    public static int rclc_executor_add_action_client(MemorySegment executor, MemorySegment action_client, long handles_number, MemorySegment ros_result_response, MemorySegment ros_feedback, MemorySegment goal_callback, MemorySegment feedback_callback, MemorySegment result_callback, MemorySegment cancel_callback, MemorySegment context) {
        var mh$ = rclc_executor_add_action_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_action_client", executor, action_client, handles_number, ros_result_response, ros_feedback, goal_callback, feedback_callback, result_callback, cancel_callback, context);
            }
            return (int)mh$.invokeExact(executor, action_client, handles_number, ros_result_response, ros_feedback, goal_callback, feedback_callback, result_callback, cancel_callback, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_action_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_action_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_action_server(rclc_executor_t *executor, rclc_action_server_t *action_server, size_t handles_number, void *ros_goal_request, size_t ros_goal_request_size, rclc_action_server_handle_goal_callback_t goal_callback, rclc_action_server_handle_cancel_callback_t cancel_callback, void *context)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_action_server$descriptor() {
        return rclc_executor_add_action_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_action_server(rclc_executor_t *executor, rclc_action_server_t *action_server, size_t handles_number, void *ros_goal_request, size_t ros_goal_request_size, rclc_action_server_handle_goal_callback_t goal_callback, rclc_action_server_handle_cancel_callback_t cancel_callback, void *context)
     * }
     */
    public static MethodHandle rclc_executor_add_action_server$handle() {
        return rclc_executor_add_action_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_action_server(rclc_executor_t *executor, rclc_action_server_t *action_server, size_t handles_number, void *ros_goal_request, size_t ros_goal_request_size, rclc_action_server_handle_goal_callback_t goal_callback, rclc_action_server_handle_cancel_callback_t cancel_callback, void *context)
     * }
     */
    public static int rclc_executor_add_action_server(MemorySegment executor, MemorySegment action_server, long handles_number, MemorySegment ros_goal_request, long ros_goal_request_size, MemorySegment goal_callback, MemorySegment cancel_callback, MemorySegment context) {
        var mh$ = rclc_executor_add_action_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_action_server", executor, action_server, handles_number, ros_goal_request, ros_goal_request_size, goal_callback, cancel_callback, context);
            }
            return (int)mh$.invokeExact(executor, action_server, handles_number, ros_goal_request, ros_goal_request_size, goal_callback, cancel_callback, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_service_with_request_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_service_with_request_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service_with_request_id(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_with_request_id_t callback)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_service_with_request_id$descriptor() {
        return rclc_executor_add_service_with_request_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service_with_request_id(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_with_request_id_t callback)
     * }
     */
    public static MethodHandle rclc_executor_add_service_with_request_id$handle() {
        return rclc_executor_add_service_with_request_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service_with_request_id(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_with_request_id_t callback)
     * }
     */
    public static int rclc_executor_add_service_with_request_id(MemorySegment executor, MemorySegment service, MemorySegment request_msg, MemorySegment response_msg, MemorySegment callback) {
        var mh$ = rclc_executor_add_service_with_request_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_service_with_request_id", executor, service, request_msg, response_msg, callback);
            }
            return (int)mh$.invokeExact(executor, service, request_msg, response_msg, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_service_with_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_service_with_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service_with_context(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_with_context_t callback, void *context)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_service_with_context$descriptor() {
        return rclc_executor_add_service_with_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service_with_context(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_with_context_t callback, void *context)
     * }
     */
    public static MethodHandle rclc_executor_add_service_with_context$handle() {
        return rclc_executor_add_service_with_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_service_with_context(rclc_executor_t *executor, rcl_service_t *service, void *request_msg, void *response_msg, rclc_service_callback_with_context_t callback, void *context)
     * }
     */
    public static int rclc_executor_add_service_with_context(MemorySegment executor, MemorySegment service, MemorySegment request_msg, MemorySegment response_msg, MemorySegment callback, MemorySegment context) {
        var mh$ = rclc_executor_add_service_with_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_service_with_context", executor, service, request_msg, response_msg, callback, context);
            }
            return (int)mh$.invokeExact(executor, service, request_msg, response_msg, callback, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_guard_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_guard_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_guard_condition(rclc_executor_t *executor, rcl_guard_condition_t *gc, rclc_gc_callback_t callback)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_guard_condition$descriptor() {
        return rclc_executor_add_guard_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_guard_condition(rclc_executor_t *executor, rcl_guard_condition_t *gc, rclc_gc_callback_t callback)
     * }
     */
    public static MethodHandle rclc_executor_add_guard_condition$handle() {
        return rclc_executor_add_guard_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_guard_condition(rclc_executor_t *executor, rcl_guard_condition_t *gc, rclc_gc_callback_t callback)
     * }
     */
    public static int rclc_executor_add_guard_condition(MemorySegment executor, MemorySegment gc, MemorySegment callback) {
        var mh$ = rclc_executor_add_guard_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_guard_condition", executor, gc, callback);
            }
            return (int)mh$.invokeExact(executor, gc, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_remove_subscription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_remove_subscription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_subscription(rclc_executor_t *executor, const rcl_subscription_t *subscription)
     * }
     */
    public static FunctionDescriptor rclc_executor_remove_subscription$descriptor() {
        return rclc_executor_remove_subscription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_subscription(rclc_executor_t *executor, const rcl_subscription_t *subscription)
     * }
     */
    public static MethodHandle rclc_executor_remove_subscription$handle() {
        return rclc_executor_remove_subscription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_subscription(rclc_executor_t *executor, const rcl_subscription_t *subscription)
     * }
     */
    public static int rclc_executor_remove_subscription(MemorySegment executor, MemorySegment subscription) {
        var mh$ = rclc_executor_remove_subscription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_remove_subscription", executor, subscription);
            }
            return (int)mh$.invokeExact(executor, subscription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_remove_timer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_remove_timer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_timer(rclc_executor_t *executor, const rcl_timer_t *timer)
     * }
     */
    public static FunctionDescriptor rclc_executor_remove_timer$descriptor() {
        return rclc_executor_remove_timer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_timer(rclc_executor_t *executor, const rcl_timer_t *timer)
     * }
     */
    public static MethodHandle rclc_executor_remove_timer$handle() {
        return rclc_executor_remove_timer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_timer(rclc_executor_t *executor, const rcl_timer_t *timer)
     * }
     */
    public static int rclc_executor_remove_timer(MemorySegment executor, MemorySegment timer) {
        var mh$ = rclc_executor_remove_timer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_remove_timer", executor, timer);
            }
            return (int)mh$.invokeExact(executor, timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_remove_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_remove_client"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_client(rclc_executor_t *executor, const rcl_client_t *client)
     * }
     */
    public static FunctionDescriptor rclc_executor_remove_client$descriptor() {
        return rclc_executor_remove_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_client(rclc_executor_t *executor, const rcl_client_t *client)
     * }
     */
    public static MethodHandle rclc_executor_remove_client$handle() {
        return rclc_executor_remove_client.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_client(rclc_executor_t *executor, const rcl_client_t *client)
     * }
     */
    public static int rclc_executor_remove_client(MemorySegment executor, MemorySegment client) {
        var mh$ = rclc_executor_remove_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_remove_client", executor, client);
            }
            return (int)mh$.invokeExact(executor, client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_remove_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_remove_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_service(rclc_executor_t *executor, const rcl_service_t *service)
     * }
     */
    public static FunctionDescriptor rclc_executor_remove_service$descriptor() {
        return rclc_executor_remove_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_service(rclc_executor_t *executor, const rcl_service_t *service)
     * }
     */
    public static MethodHandle rclc_executor_remove_service$handle() {
        return rclc_executor_remove_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_service(rclc_executor_t *executor, const rcl_service_t *service)
     * }
     */
    public static int rclc_executor_remove_service(MemorySegment executor, MemorySegment service) {
        var mh$ = rclc_executor_remove_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_remove_service", executor, service);
            }
            return (int)mh$.invokeExact(executor, service);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_remove_guard_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_remove_guard_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_guard_condition(rclc_executor_t *executor, const rcl_guard_condition_t *guard_condition)
     * }
     */
    public static FunctionDescriptor rclc_executor_remove_guard_condition$descriptor() {
        return rclc_executor_remove_guard_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_guard_condition(rclc_executor_t *executor, const rcl_guard_condition_t *guard_condition)
     * }
     */
    public static MethodHandle rclc_executor_remove_guard_condition$handle() {
        return rclc_executor_remove_guard_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_remove_guard_condition(rclc_executor_t *executor, const rcl_guard_condition_t *guard_condition)
     * }
     */
    public static int rclc_executor_remove_guard_condition(MemorySegment executor, MemorySegment guard_condition) {
        var mh$ = rclc_executor_remove_guard_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_remove_guard_condition", executor, guard_condition);
            }
            return (int)mh$.invokeExact(executor, guard_condition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_prepare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_prepare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_prepare(rclc_executor_t *executor)
     * }
     */
    public static FunctionDescriptor rclc_executor_prepare$descriptor() {
        return rclc_executor_prepare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_prepare(rclc_executor_t *executor)
     * }
     */
    public static MethodHandle rclc_executor_prepare$handle() {
        return rclc_executor_prepare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_prepare(rclc_executor_t *executor)
     * }
     */
    public static int rclc_executor_prepare(MemorySegment executor) {
        var mh$ = rclc_executor_prepare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_prepare", executor);
            }
            return (int)mh$.invokeExact(executor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_spin_some {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_spin_some"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_some(rclc_executor_t *executor, const uint64_t timeout_ns)
     * }
     */
    public static FunctionDescriptor rclc_executor_spin_some$descriptor() {
        return rclc_executor_spin_some.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_some(rclc_executor_t *executor, const uint64_t timeout_ns)
     * }
     */
    public static MethodHandle rclc_executor_spin_some$handle() {
        return rclc_executor_spin_some.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_some(rclc_executor_t *executor, const uint64_t timeout_ns)
     * }
     */
    public static int rclc_executor_spin_some(MemorySegment executor, long timeout_ns) {
        var mh$ = rclc_executor_spin_some.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_spin_some", executor, timeout_ns);
            }
            return (int)mh$.invokeExact(executor, timeout_ns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_spin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_spin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin(rclc_executor_t *executor)
     * }
     */
    public static FunctionDescriptor rclc_executor_spin$descriptor() {
        return rclc_executor_spin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin(rclc_executor_t *executor)
     * }
     */
    public static MethodHandle rclc_executor_spin$handle() {
        return rclc_executor_spin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin(rclc_executor_t *executor)
     * }
     */
    public static int rclc_executor_spin(MemorySegment executor) {
        var mh$ = rclc_executor_spin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_spin", executor);
            }
            return (int)mh$.invokeExact(executor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_spin_period {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_spin_period"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_period(rclc_executor_t *executor, const uint64_t period)
     * }
     */
    public static FunctionDescriptor rclc_executor_spin_period$descriptor() {
        return rclc_executor_spin_period.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_period(rclc_executor_t *executor, const uint64_t period)
     * }
     */
    public static MethodHandle rclc_executor_spin_period$handle() {
        return rclc_executor_spin_period.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_period(rclc_executor_t *executor, const uint64_t period)
     * }
     */
    public static int rclc_executor_spin_period(MemorySegment executor, long period) {
        var mh$ = rclc_executor_spin_period.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_spin_period", executor, period);
            }
            return (int)mh$.invokeExact(executor, period);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_spin_one_period {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_spin_one_period"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_one_period(rclc_executor_t *executor, const uint64_t period)
     * }
     */
    public static FunctionDescriptor rclc_executor_spin_one_period$descriptor() {
        return rclc_executor_spin_one_period.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_one_period(rclc_executor_t *executor, const uint64_t period)
     * }
     */
    public static MethodHandle rclc_executor_spin_one_period$handle() {
        return rclc_executor_spin_one_period.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_spin_one_period(rclc_executor_t *executor, const uint64_t period)
     * }
     */
    public static int rclc_executor_spin_one_period(MemorySegment executor, long period) {
        var mh$ = rclc_executor_spin_one_period.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_spin_one_period", executor, period);
            }
            return (int)mh$.invokeExact(executor, period);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_set_trigger {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_set_trigger"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_trigger(rclc_executor_t *executor, rclc_executor_trigger_t trigger_function, void *trigger_object)
     * }
     */
    public static FunctionDescriptor rclc_executor_set_trigger$descriptor() {
        return rclc_executor_set_trigger.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_trigger(rclc_executor_t *executor, rclc_executor_trigger_t trigger_function, void *trigger_object)
     * }
     */
    public static MethodHandle rclc_executor_set_trigger$handle() {
        return rclc_executor_set_trigger.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_set_trigger(rclc_executor_t *executor, rclc_executor_trigger_t trigger_function, void *trigger_object)
     * }
     */
    public static int rclc_executor_set_trigger(MemorySegment executor, MemorySegment trigger_function, MemorySegment trigger_object) {
        var mh$ = rclc_executor_set_trigger.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_set_trigger", executor, trigger_function, trigger_object);
            }
            return (int)mh$.invokeExact(executor, trigger_function, trigger_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_trigger_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_trigger_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_all(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static FunctionDescriptor rclc_executor_trigger_all$descriptor() {
        return rclc_executor_trigger_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_all(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static MethodHandle rclc_executor_trigger_all$handle() {
        return rclc_executor_trigger_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rclc_executor_trigger_all(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static boolean rclc_executor_trigger_all(MemorySegment handles, int size, MemorySegment obj) {
        var mh$ = rclc_executor_trigger_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_trigger_all", handles, size, obj);
            }
            return (boolean)mh$.invokeExact(handles, size, obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_trigger_any {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_trigger_any"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_any(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static FunctionDescriptor rclc_executor_trigger_any$descriptor() {
        return rclc_executor_trigger_any.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_any(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static MethodHandle rclc_executor_trigger_any$handle() {
        return rclc_executor_trigger_any.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rclc_executor_trigger_any(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static boolean rclc_executor_trigger_any(MemorySegment handles, int size, MemorySegment obj) {
        var mh$ = rclc_executor_trigger_any.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_trigger_any", handles, size, obj);
            }
            return (boolean)mh$.invokeExact(handles, size, obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_trigger_always {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_trigger_always"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_always(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static FunctionDescriptor rclc_executor_trigger_always$descriptor() {
        return rclc_executor_trigger_always.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_always(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static MethodHandle rclc_executor_trigger_always$handle() {
        return rclc_executor_trigger_always.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rclc_executor_trigger_always(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static boolean rclc_executor_trigger_always(MemorySegment handles, int size, MemorySegment obj) {
        var mh$ = rclc_executor_trigger_always.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_trigger_always", handles, size, obj);
            }
            return (boolean)mh$.invokeExact(handles, size, obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_trigger_one {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_trigger_one"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_one(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static FunctionDescriptor rclc_executor_trigger_one$descriptor() {
        return rclc_executor_trigger_one.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rclc_executor_trigger_one(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static MethodHandle rclc_executor_trigger_one$handle() {
        return rclc_executor_trigger_one.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rclc_executor_trigger_one(rclc_executor_handle_t *handles, unsigned int size, void *obj)
     * }
     */
    public static boolean rclc_executor_trigger_one(MemorySegment handles, int size, MemorySegment obj) {
        var mh$ = rclc_executor_trigger_one.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_trigger_one", handles, size, obj);
            }
            return (boolean)mh$.invokeExact(handles, size, obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__init(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__init$descriptor() {
        return rcl_interfaces__msg__Parameter__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__init(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__init$handle() {
        return rcl_interfaces__msg__Parameter__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__init(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static boolean rcl_interfaces__msg__Parameter__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__Parameter__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__fini(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__fini$descriptor() {
        return rcl_interfaces__msg__Parameter__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__fini(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__fini$handle() {
        return rcl_interfaces__msg__Parameter__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__fini(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static void rcl_interfaces__msg__Parameter__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__Parameter__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter *rcl_interfaces__msg__Parameter__create()
     * }
     */
    public static class rcl_interfaces__msg__Parameter__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__msg__Parameter__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__msg__Parameter__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__msg__Parameter *rcl_interfaces__msg__Parameter__create()
         * }
         */
        public static rcl_interfaces__msg__Parameter__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__msg__Parameter__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__msg__Parameter__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__Parameter__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__destroy(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__destroy$descriptor() {
        return rcl_interfaces__msg__Parameter__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__destroy(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__destroy$handle() {
        return rcl_interfaces__msg__Parameter__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__destroy(rcl_interfaces__msg__Parameter *msg)
     * }
     */
    public static void rcl_interfaces__msg__Parameter__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__Parameter__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__are_equal(const rcl_interfaces__msg__Parameter *lhs, const rcl_interfaces__msg__Parameter *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__are_equal$descriptor() {
        return rcl_interfaces__msg__Parameter__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__are_equal(const rcl_interfaces__msg__Parameter *lhs, const rcl_interfaces__msg__Parameter *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__are_equal$handle() {
        return rcl_interfaces__msg__Parameter__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__are_equal(const rcl_interfaces__msg__Parameter *lhs, const rcl_interfaces__msg__Parameter *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__Parameter__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__Parameter__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__copy(const rcl_interfaces__msg__Parameter *input, rcl_interfaces__msg__Parameter *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__copy$descriptor() {
        return rcl_interfaces__msg__Parameter__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__copy(const rcl_interfaces__msg__Parameter *input, rcl_interfaces__msg__Parameter *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__copy$handle() {
        return rcl_interfaces__msg__Parameter__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__copy(const rcl_interfaces__msg__Parameter *input, rcl_interfaces__msg__Parameter *output)
     * }
     */
    public static boolean rcl_interfaces__msg__Parameter__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__Parameter__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__init(rcl_interfaces__msg__Parameter__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__Sequence__init$descriptor() {
        return rcl_interfaces__msg__Parameter__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__init(rcl_interfaces__msg__Parameter__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__Sequence__init$handle() {
        return rcl_interfaces__msg__Parameter__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__init(rcl_interfaces__msg__Parameter__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__msg__Parameter__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__msg__Parameter__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__Sequence__fini(rcl_interfaces__msg__Parameter__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__Sequence__fini$descriptor() {
        return rcl_interfaces__msg__Parameter__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__Sequence__fini(rcl_interfaces__msg__Parameter__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__Sequence__fini$handle() {
        return rcl_interfaces__msg__Parameter__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__Sequence__fini(rcl_interfaces__msg__Parameter__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__Parameter__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__Parameter__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence *rcl_interfaces__msg__Parameter__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__Sequence__create$descriptor() {
        return rcl_interfaces__msg__Parameter__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence *rcl_interfaces__msg__Parameter__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__Sequence__create$handle() {
        return rcl_interfaces__msg__Parameter__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__msg__Parameter__Sequence *rcl_interfaces__msg__Parameter__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__msg__Parameter__Sequence__create(long size) {
        var mh$ = rcl_interfaces__msg__Parameter__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__Sequence__destroy(rcl_interfaces__msg__Parameter__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__Sequence__destroy$descriptor() {
        return rcl_interfaces__msg__Parameter__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__Sequence__destroy(rcl_interfaces__msg__Parameter__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__Sequence__destroy$handle() {
        return rcl_interfaces__msg__Parameter__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__Parameter__Sequence__destroy(rcl_interfaces__msg__Parameter__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__Parameter__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__Parameter__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__are_equal(const rcl_interfaces__msg__Parameter__Sequence *lhs, const rcl_interfaces__msg__Parameter__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__Sequence__are_equal$descriptor() {
        return rcl_interfaces__msg__Parameter__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__are_equal(const rcl_interfaces__msg__Parameter__Sequence *lhs, const rcl_interfaces__msg__Parameter__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__Sequence__are_equal$handle() {
        return rcl_interfaces__msg__Parameter__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__are_equal(const rcl_interfaces__msg__Parameter__Sequence *lhs, const rcl_interfaces__msg__Parameter__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__Parameter__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__Parameter__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__Parameter__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__Parameter__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__copy(const rcl_interfaces__msg__Parameter__Sequence *input, rcl_interfaces__msg__Parameter__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__Parameter__Sequence__copy$descriptor() {
        return rcl_interfaces__msg__Parameter__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__copy(const rcl_interfaces__msg__Parameter__Sequence *input, rcl_interfaces__msg__Parameter__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__Parameter__Sequence__copy$handle() {
        return rcl_interfaces__msg__Parameter__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__Parameter__Sequence__copy(const rcl_interfaces__msg__Parameter__Sequence *input, rcl_interfaces__msg__Parameter__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__msg__Parameter__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__Parameter__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__Parameter__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__init(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__init$descriptor() {
        return rcl_interfaces__msg__ParameterValue__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__init(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__init$handle() {
        return rcl_interfaces__msg__ParameterValue__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__init(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterValue__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterValue__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__fini(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__fini$descriptor() {
        return rcl_interfaces__msg__ParameterValue__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__fini(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__fini$handle() {
        return rcl_interfaces__msg__ParameterValue__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__fini(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static void rcl_interfaces__msg__ParameterValue__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterValue__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterValue *rcl_interfaces__msg__ParameterValue__create()
     * }
     */
    public static class rcl_interfaces__msg__ParameterValue__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__msg__ParameterValue__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__msg__ParameterValue *rcl_interfaces__msg__ParameterValue__create()
         * }
         */
        public static rcl_interfaces__msg__ParameterValue__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__msg__ParameterValue__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__msg__ParameterValue__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__destroy(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__destroy$descriptor() {
        return rcl_interfaces__msg__ParameterValue__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__destroy(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__destroy$handle() {
        return rcl_interfaces__msg__ParameterValue__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__destroy(rcl_interfaces__msg__ParameterValue *msg)
     * }
     */
    public static void rcl_interfaces__msg__ParameterValue__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterValue__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__are_equal(const rcl_interfaces__msg__ParameterValue *lhs, const rcl_interfaces__msg__ParameterValue *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__are_equal$descriptor() {
        return rcl_interfaces__msg__ParameterValue__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__are_equal(const rcl_interfaces__msg__ParameterValue *lhs, const rcl_interfaces__msg__ParameterValue *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__are_equal$handle() {
        return rcl_interfaces__msg__ParameterValue__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__are_equal(const rcl_interfaces__msg__ParameterValue *lhs, const rcl_interfaces__msg__ParameterValue *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterValue__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__ParameterValue__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__copy(const rcl_interfaces__msg__ParameterValue *input, rcl_interfaces__msg__ParameterValue *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__copy$descriptor() {
        return rcl_interfaces__msg__ParameterValue__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__copy(const rcl_interfaces__msg__ParameterValue *input, rcl_interfaces__msg__ParameterValue *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__copy$handle() {
        return rcl_interfaces__msg__ParameterValue__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__copy(const rcl_interfaces__msg__ParameterValue *input, rcl_interfaces__msg__ParameterValue *output)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterValue__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__ParameterValue__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__init(rcl_interfaces__msg__ParameterValue__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__Sequence__init$descriptor() {
        return rcl_interfaces__msg__ParameterValue__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__init(rcl_interfaces__msg__ParameterValue__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__Sequence__init$handle() {
        return rcl_interfaces__msg__ParameterValue__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__init(rcl_interfaces__msg__ParameterValue__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterValue__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__msg__ParameterValue__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__Sequence__fini(rcl_interfaces__msg__ParameterValue__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__Sequence__fini$descriptor() {
        return rcl_interfaces__msg__ParameterValue__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__Sequence__fini(rcl_interfaces__msg__ParameterValue__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__Sequence__fini$handle() {
        return rcl_interfaces__msg__ParameterValue__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__Sequence__fini(rcl_interfaces__msg__ParameterValue__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__ParameterValue__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__ParameterValue__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterValue__Sequence *rcl_interfaces__msg__ParameterValue__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__Sequence__create$descriptor() {
        return rcl_interfaces__msg__ParameterValue__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterValue__Sequence *rcl_interfaces__msg__ParameterValue__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__Sequence__create$handle() {
        return rcl_interfaces__msg__ParameterValue__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterValue__Sequence *rcl_interfaces__msg__ParameterValue__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__msg__ParameterValue__Sequence__create(long size) {
        var mh$ = rcl_interfaces__msg__ParameterValue__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__Sequence__destroy(rcl_interfaces__msg__ParameterValue__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__Sequence__destroy$descriptor() {
        return rcl_interfaces__msg__ParameterValue__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__Sequence__destroy(rcl_interfaces__msg__ParameterValue__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__Sequence__destroy$handle() {
        return rcl_interfaces__msg__ParameterValue__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterValue__Sequence__destroy(rcl_interfaces__msg__ParameterValue__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__ParameterValue__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__ParameterValue__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__are_equal(const rcl_interfaces__msg__ParameterValue__Sequence *lhs, const rcl_interfaces__msg__ParameterValue__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__Sequence__are_equal$descriptor() {
        return rcl_interfaces__msg__ParameterValue__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__are_equal(const rcl_interfaces__msg__ParameterValue__Sequence *lhs, const rcl_interfaces__msg__ParameterValue__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__Sequence__are_equal$handle() {
        return rcl_interfaces__msg__ParameterValue__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__are_equal(const rcl_interfaces__msg__ParameterValue__Sequence *lhs, const rcl_interfaces__msg__ParameterValue__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterValue__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__ParameterValue__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterValue__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterValue__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__copy(const rcl_interfaces__msg__ParameterValue__Sequence *input, rcl_interfaces__msg__ParameterValue__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterValue__Sequence__copy$descriptor() {
        return rcl_interfaces__msg__ParameterValue__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__copy(const rcl_interfaces__msg__ParameterValue__Sequence *input, rcl_interfaces__msg__ParameterValue__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterValue__Sequence__copy$handle() {
        return rcl_interfaces__msg__ParameterValue__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterValue__Sequence__copy(const rcl_interfaces__msg__ParameterValue__Sequence *input, rcl_interfaces__msg__ParameterValue__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterValue__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__ParameterValue__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterValue__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__init(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__init$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__init(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__init$handle() {
        return rcl_interfaces__msg__ParameterEvent__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__init(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterEvent__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__fini(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__fini$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__fini(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__fini$handle() {
        return rcl_interfaces__msg__ParameterEvent__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__fini(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static void rcl_interfaces__msg__ParameterEvent__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterEvent *rcl_interfaces__msg__ParameterEvent__create()
     * }
     */
    public static class rcl_interfaces__msg__ParameterEvent__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__msg__ParameterEvent__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__msg__ParameterEvent *rcl_interfaces__msg__ParameterEvent__create()
         * }
         */
        public static rcl_interfaces__msg__ParameterEvent__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__msg__ParameterEvent__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__msg__ParameterEvent__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__destroy(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__destroy$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__destroy(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__destroy$handle() {
        return rcl_interfaces__msg__ParameterEvent__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__destroy(rcl_interfaces__msg__ParameterEvent *msg)
     * }
     */
    public static void rcl_interfaces__msg__ParameterEvent__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__are_equal(const rcl_interfaces__msg__ParameterEvent *lhs, const rcl_interfaces__msg__ParameterEvent *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__are_equal$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__are_equal(const rcl_interfaces__msg__ParameterEvent *lhs, const rcl_interfaces__msg__ParameterEvent *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__are_equal$handle() {
        return rcl_interfaces__msg__ParameterEvent__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__are_equal(const rcl_interfaces__msg__ParameterEvent *lhs, const rcl_interfaces__msg__ParameterEvent *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterEvent__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__copy(const rcl_interfaces__msg__ParameterEvent *input, rcl_interfaces__msg__ParameterEvent *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__copy$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__copy(const rcl_interfaces__msg__ParameterEvent *input, rcl_interfaces__msg__ParameterEvent *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__copy$handle() {
        return rcl_interfaces__msg__ParameterEvent__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__copy(const rcl_interfaces__msg__ParameterEvent *input, rcl_interfaces__msg__ParameterEvent *output)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterEvent__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__init(rcl_interfaces__msg__ParameterEvent__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__Sequence__init$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__init(rcl_interfaces__msg__ParameterEvent__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__Sequence__init$handle() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__init(rcl_interfaces__msg__ParameterEvent__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterEvent__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__Sequence__fini(rcl_interfaces__msg__ParameterEvent__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__Sequence__fini$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__Sequence__fini(rcl_interfaces__msg__ParameterEvent__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__Sequence__fini$handle() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__Sequence__fini(rcl_interfaces__msg__ParameterEvent__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__ParameterEvent__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterEvent__Sequence *rcl_interfaces__msg__ParameterEvent__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__Sequence__create$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterEvent__Sequence *rcl_interfaces__msg__ParameterEvent__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__Sequence__create$handle() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterEvent__Sequence *rcl_interfaces__msg__ParameterEvent__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__msg__ParameterEvent__Sequence__create(long size) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__Sequence__destroy(rcl_interfaces__msg__ParameterEvent__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__Sequence__destroy$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__Sequence__destroy(rcl_interfaces__msg__ParameterEvent__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__Sequence__destroy$handle() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterEvent__Sequence__destroy(rcl_interfaces__msg__ParameterEvent__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__ParameterEvent__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__are_equal(const rcl_interfaces__msg__ParameterEvent__Sequence *lhs, const rcl_interfaces__msg__ParameterEvent__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__Sequence__are_equal$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__are_equal(const rcl_interfaces__msg__ParameterEvent__Sequence *lhs, const rcl_interfaces__msg__ParameterEvent__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__Sequence__are_equal$handle() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__are_equal(const rcl_interfaces__msg__ParameterEvent__Sequence *lhs, const rcl_interfaces__msg__ParameterEvent__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterEvent__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterEvent__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterEvent__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__copy(const rcl_interfaces__msg__ParameterEvent__Sequence *input, rcl_interfaces__msg__ParameterEvent__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterEvent__Sequence__copy$descriptor() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__copy(const rcl_interfaces__msg__ParameterEvent__Sequence *input, rcl_interfaces__msg__ParameterEvent__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterEvent__Sequence__copy$handle() {
        return rcl_interfaces__msg__ParameterEvent__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterEvent__Sequence__copy(const rcl_interfaces__msg__ParameterEvent__Sequence *input, rcl_interfaces__msg__ParameterEvent__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterEvent__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__ParameterEvent__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterEvent__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__init(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__init$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__init(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__init$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__init(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Request__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__fini(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__fini$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__fini(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__fini$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__fini(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Request__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Request *rcl_interfaces__srv__GetParameterTypes_Request__create()
     * }
     */
    public static class rcl_interfaces__srv__GetParameterTypes_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__GetParameterTypes_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__GetParameterTypes_Request *rcl_interfaces__srv__GetParameterTypes_Request__create()
         * }
         */
        public static rcl_interfaces__srv__GetParameterTypes_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__GetParameterTypes_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__destroy(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__destroy(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__destroy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__destroy(rcl_interfaces__srv__GetParameterTypes_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Request__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__are_equal(const rcl_interfaces__srv__GetParameterTypes_Request *lhs, const rcl_interfaces__srv__GetParameterTypes_Request *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__are_equal(const rcl_interfaces__srv__GetParameterTypes_Request *lhs, const rcl_interfaces__srv__GetParameterTypes_Request *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__are_equal$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__are_equal(const rcl_interfaces__srv__GetParameterTypes_Request *lhs, const rcl_interfaces__srv__GetParameterTypes_Request *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__copy(const rcl_interfaces__srv__GetParameterTypes_Request *input, rcl_interfaces__srv__GetParameterTypes_Request *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__copy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__copy(const rcl_interfaces__srv__GetParameterTypes_Request *input, rcl_interfaces__srv__GetParameterTypes_Request *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__copy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__copy(const rcl_interfaces__srv__GetParameterTypes_Request *input, rcl_interfaces__srv__GetParameterTypes_Request *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Request__Sequence *rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Request__Sequence *rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Request__Sequence *rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy(rcl_interfaces__srv__GetParameterTypes_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal(const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *lhs, const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal(const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *lhs, const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal(const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *lhs, const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy(const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *input, rcl_interfaces__srv__GetParameterTypes_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy(const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *input, rcl_interfaces__srv__GetParameterTypes_Request__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy(const rcl_interfaces__srv__GetParameterTypes_Request__Sequence *input, rcl_interfaces__srv__GetParameterTypes_Request__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__init(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__init$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__init(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__init$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__init(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Response__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__fini(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__fini$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__fini(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__fini$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__fini(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Response__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Response *rcl_interfaces__srv__GetParameterTypes_Response__create()
     * }
     */
    public static class rcl_interfaces__srv__GetParameterTypes_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__GetParameterTypes_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__GetParameterTypes_Response *rcl_interfaces__srv__GetParameterTypes_Response__create()
         * }
         */
        public static rcl_interfaces__srv__GetParameterTypes_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__GetParameterTypes_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__destroy(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__destroy(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__destroy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__destroy(rcl_interfaces__srv__GetParameterTypes_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Response__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__are_equal(const rcl_interfaces__srv__GetParameterTypes_Response *lhs, const rcl_interfaces__srv__GetParameterTypes_Response *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__are_equal(const rcl_interfaces__srv__GetParameterTypes_Response *lhs, const rcl_interfaces__srv__GetParameterTypes_Response *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__are_equal$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__are_equal(const rcl_interfaces__srv__GetParameterTypes_Response *lhs, const rcl_interfaces__srv__GetParameterTypes_Response *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__copy(const rcl_interfaces__srv__GetParameterTypes_Response *input, rcl_interfaces__srv__GetParameterTypes_Response *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__copy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__copy(const rcl_interfaces__srv__GetParameterTypes_Response *input, rcl_interfaces__srv__GetParameterTypes_Response *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__copy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__copy(const rcl_interfaces__srv__GetParameterTypes_Response *input, rcl_interfaces__srv__GetParameterTypes_Response *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Response__Sequence *rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Response__Sequence *rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameterTypes_Response__Sequence *rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy(rcl_interfaces__srv__GetParameterTypes_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal(const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *lhs, const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal(const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *lhs, const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal(const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *lhs, const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy(const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *input, rcl_interfaces__srv__GetParameterTypes_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy(const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *input, rcl_interfaces__srv__GetParameterTypes_Response__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy$handle() {
        return rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy(const rcl_interfaces__srv__GetParameterTypes_Response__Sequence *input, rcl_interfaces__srv__GetParameterTypes_Response__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameterTypes_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__init(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__init$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__init(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__init$handle() {
        return rcl_interfaces__srv__GetParameters_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__init(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Request__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__fini(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__fini$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__fini(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__fini$handle() {
        return rcl_interfaces__srv__GetParameters_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__fini(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Request__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Request *rcl_interfaces__srv__GetParameters_Request__create()
     * }
     */
    public static class rcl_interfaces__srv__GetParameters_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__GetParameters_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__GetParameters_Request *rcl_interfaces__srv__GetParameters_Request__create()
         * }
         */
        public static rcl_interfaces__srv__GetParameters_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__GetParameters_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__GetParameters_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__destroy(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__destroy(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__destroy$handle() {
        return rcl_interfaces__srv__GetParameters_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__destroy(rcl_interfaces__srv__GetParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Request__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__are_equal(const rcl_interfaces__srv__GetParameters_Request *lhs, const rcl_interfaces__srv__GetParameters_Request *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__are_equal(const rcl_interfaces__srv__GetParameters_Request *lhs, const rcl_interfaces__srv__GetParameters_Request *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__are_equal$handle() {
        return rcl_interfaces__srv__GetParameters_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__are_equal(const rcl_interfaces__srv__GetParameters_Request *lhs, const rcl_interfaces__srv__GetParameters_Request *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__copy(const rcl_interfaces__srv__GetParameters_Request *input, rcl_interfaces__srv__GetParameters_Request *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__copy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__copy(const rcl_interfaces__srv__GetParameters_Request *input, rcl_interfaces__srv__GetParameters_Request *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__copy$handle() {
        return rcl_interfaces__srv__GetParameters_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__copy(const rcl_interfaces__srv__GetParameters_Request *input, rcl_interfaces__srv__GetParameters_Request *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__init(rcl_interfaces__srv__GetParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__Sequence__init$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__init(rcl_interfaces__srv__GetParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__Sequence__init$handle() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__init(rcl_interfaces__srv__GetParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__Sequence__fini(rcl_interfaces__srv__GetParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__Sequence__fini(rcl_interfaces__srv__GetParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__Sequence__fini$handle() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__Sequence__fini(rcl_interfaces__srv__GetParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Request__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Request__Sequence *rcl_interfaces__srv__GetParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__Sequence__create$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Request__Sequence *rcl_interfaces__srv__GetParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__Sequence__create$handle() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Request__Sequence *rcl_interfaces__srv__GetParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__GetParameters_Request__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__Sequence__destroy(rcl_interfaces__srv__GetParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__Sequence__destroy(rcl_interfaces__srv__GetParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__Sequence__destroy$handle() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Request__Sequence__destroy(rcl_interfaces__srv__GetParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__GetParameters_Request__Sequence *lhs, const rcl_interfaces__srv__GetParameters_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__GetParameters_Request__Sequence *lhs, const rcl_interfaces__srv__GetParameters_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__GetParameters_Request__Sequence *lhs, const rcl_interfaces__srv__GetParameters_Request__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__copy(const rcl_interfaces__srv__GetParameters_Request__Sequence *input, rcl_interfaces__srv__GetParameters_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Request__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__copy(const rcl_interfaces__srv__GetParameters_Request__Sequence *input, rcl_interfaces__srv__GetParameters_Request__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Request__Sequence__copy$handle() {
        return rcl_interfaces__srv__GetParameters_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Request__Sequence__copy(const rcl_interfaces__srv__GetParameters_Request__Sequence *input, rcl_interfaces__srv__GetParameters_Request__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameters_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__init(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__init$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__init(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__init$handle() {
        return rcl_interfaces__srv__GetParameters_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__init(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Response__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__fini(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__fini$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__fini(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__fini$handle() {
        return rcl_interfaces__srv__GetParameters_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__fini(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Response__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Response *rcl_interfaces__srv__GetParameters_Response__create()
     * }
     */
    public static class rcl_interfaces__srv__GetParameters_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__GetParameters_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__GetParameters_Response *rcl_interfaces__srv__GetParameters_Response__create()
         * }
         */
        public static rcl_interfaces__srv__GetParameters_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__GetParameters_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__GetParameters_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__destroy(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__destroy(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__destroy$handle() {
        return rcl_interfaces__srv__GetParameters_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__destroy(rcl_interfaces__srv__GetParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Response__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__are_equal(const rcl_interfaces__srv__GetParameters_Response *lhs, const rcl_interfaces__srv__GetParameters_Response *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__are_equal(const rcl_interfaces__srv__GetParameters_Response *lhs, const rcl_interfaces__srv__GetParameters_Response *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__are_equal$handle() {
        return rcl_interfaces__srv__GetParameters_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__are_equal(const rcl_interfaces__srv__GetParameters_Response *lhs, const rcl_interfaces__srv__GetParameters_Response *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__copy(const rcl_interfaces__srv__GetParameters_Response *input, rcl_interfaces__srv__GetParameters_Response *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__copy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__copy(const rcl_interfaces__srv__GetParameters_Response *input, rcl_interfaces__srv__GetParameters_Response *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__copy$handle() {
        return rcl_interfaces__srv__GetParameters_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__copy(const rcl_interfaces__srv__GetParameters_Response *input, rcl_interfaces__srv__GetParameters_Response *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__init(rcl_interfaces__srv__GetParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__Sequence__init$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__init(rcl_interfaces__srv__GetParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__Sequence__init$handle() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__init(rcl_interfaces__srv__GetParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__Sequence__fini(rcl_interfaces__srv__GetParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__Sequence__fini(rcl_interfaces__srv__GetParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__Sequence__fini$handle() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__Sequence__fini(rcl_interfaces__srv__GetParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Response__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Response__Sequence *rcl_interfaces__srv__GetParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__Sequence__create$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Response__Sequence *rcl_interfaces__srv__GetParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__Sequence__create$handle() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__GetParameters_Response__Sequence *rcl_interfaces__srv__GetParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__GetParameters_Response__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__Sequence__destroy(rcl_interfaces__srv__GetParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__Sequence__destroy(rcl_interfaces__srv__GetParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__Sequence__destroy$handle() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__GetParameters_Response__Sequence__destroy(rcl_interfaces__srv__GetParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__GetParameters_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__GetParameters_Response__Sequence *lhs, const rcl_interfaces__srv__GetParameters_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__GetParameters_Response__Sequence *lhs, const rcl_interfaces__srv__GetParameters_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__GetParameters_Response__Sequence *lhs, const rcl_interfaces__srv__GetParameters_Response__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__GetParameters_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__GetParameters_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__copy(const rcl_interfaces__srv__GetParameters_Response__Sequence *input, rcl_interfaces__srv__GetParameters_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__GetParameters_Response__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__copy(const rcl_interfaces__srv__GetParameters_Response__Sequence *input, rcl_interfaces__srv__GetParameters_Response__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__GetParameters_Response__Sequence__copy$handle() {
        return rcl_interfaces__srv__GetParameters_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__GetParameters_Response__Sequence__copy(const rcl_interfaces__srv__GetParameters_Response__Sequence *input, rcl_interfaces__srv__GetParameters_Response__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__GetParameters_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__GetParameters_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__GetParameters_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__init(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__init$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__init(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__init$handle() {
        return rcl_interfaces__msg__SetParametersResult__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__init(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static boolean rcl_interfaces__msg__SetParametersResult__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__fini(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__fini$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__fini(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__fini$handle() {
        return rcl_interfaces__msg__SetParametersResult__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__fini(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static void rcl_interfaces__msg__SetParametersResult__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__SetParametersResult *rcl_interfaces__msg__SetParametersResult__create()
     * }
     */
    public static class rcl_interfaces__msg__SetParametersResult__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__msg__SetParametersResult__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__msg__SetParametersResult *rcl_interfaces__msg__SetParametersResult__create()
         * }
         */
        public static rcl_interfaces__msg__SetParametersResult__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__msg__SetParametersResult__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__msg__SetParametersResult__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__destroy(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__destroy$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__destroy(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__destroy$handle() {
        return rcl_interfaces__msg__SetParametersResult__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__destroy(rcl_interfaces__msg__SetParametersResult *msg)
     * }
     */
    public static void rcl_interfaces__msg__SetParametersResult__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__are_equal(const rcl_interfaces__msg__SetParametersResult *lhs, const rcl_interfaces__msg__SetParametersResult *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__are_equal$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__are_equal(const rcl_interfaces__msg__SetParametersResult *lhs, const rcl_interfaces__msg__SetParametersResult *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__are_equal$handle() {
        return rcl_interfaces__msg__SetParametersResult__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__are_equal(const rcl_interfaces__msg__SetParametersResult *lhs, const rcl_interfaces__msg__SetParametersResult *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__SetParametersResult__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__copy(const rcl_interfaces__msg__SetParametersResult *input, rcl_interfaces__msg__SetParametersResult *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__copy$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__copy(const rcl_interfaces__msg__SetParametersResult *input, rcl_interfaces__msg__SetParametersResult *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__copy$handle() {
        return rcl_interfaces__msg__SetParametersResult__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__copy(const rcl_interfaces__msg__SetParametersResult *input, rcl_interfaces__msg__SetParametersResult *output)
     * }
     */
    public static boolean rcl_interfaces__msg__SetParametersResult__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__init(rcl_interfaces__msg__SetParametersResult__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__Sequence__init$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__init(rcl_interfaces__msg__SetParametersResult__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__Sequence__init$handle() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__init(rcl_interfaces__msg__SetParametersResult__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__msg__SetParametersResult__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__Sequence__fini(rcl_interfaces__msg__SetParametersResult__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__Sequence__fini$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__Sequence__fini(rcl_interfaces__msg__SetParametersResult__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__Sequence__fini$handle() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__Sequence__fini(rcl_interfaces__msg__SetParametersResult__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__SetParametersResult__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__SetParametersResult__Sequence *rcl_interfaces__msg__SetParametersResult__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__Sequence__create$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__SetParametersResult__Sequence *rcl_interfaces__msg__SetParametersResult__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__Sequence__create$handle() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__msg__SetParametersResult__Sequence *rcl_interfaces__msg__SetParametersResult__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__msg__SetParametersResult__Sequence__create(long size) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__Sequence__destroy(rcl_interfaces__msg__SetParametersResult__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__Sequence__destroy$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__Sequence__destroy(rcl_interfaces__msg__SetParametersResult__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__Sequence__destroy$handle() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__SetParametersResult__Sequence__destroy(rcl_interfaces__msg__SetParametersResult__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__SetParametersResult__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__are_equal(const rcl_interfaces__msg__SetParametersResult__Sequence *lhs, const rcl_interfaces__msg__SetParametersResult__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__Sequence__are_equal$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__are_equal(const rcl_interfaces__msg__SetParametersResult__Sequence *lhs, const rcl_interfaces__msg__SetParametersResult__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__Sequence__are_equal$handle() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__are_equal(const rcl_interfaces__msg__SetParametersResult__Sequence *lhs, const rcl_interfaces__msg__SetParametersResult__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__SetParametersResult__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__SetParametersResult__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__SetParametersResult__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__copy(const rcl_interfaces__msg__SetParametersResult__Sequence *input, rcl_interfaces__msg__SetParametersResult__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__SetParametersResult__Sequence__copy$descriptor() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__copy(const rcl_interfaces__msg__SetParametersResult__Sequence *input, rcl_interfaces__msg__SetParametersResult__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__SetParametersResult__Sequence__copy$handle() {
        return rcl_interfaces__msg__SetParametersResult__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__SetParametersResult__Sequence__copy(const rcl_interfaces__msg__SetParametersResult__Sequence *input, rcl_interfaces__msg__SetParametersResult__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__msg__SetParametersResult__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__SetParametersResult__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__SetParametersResult__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int rcl_interfaces__srv__ListParameters_Request__DEPTH_RECURSIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.rcl_interfaces__srv__ListParameters_Request__DEPTH_RECURSIVE = 0
     * }
     */
    public static int rcl_interfaces__srv__ListParameters_Request__DEPTH_RECURSIVE() {
        return rcl_interfaces__srv__ListParameters_Request__DEPTH_RECURSIVE;
    }

    private static class rcl_interfaces__srv__ListParameters_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__init(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__init$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__init(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__init$handle() {
        return rcl_interfaces__srv__ListParameters_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__init(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Request__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__fini(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__fini$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__fini(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__fini$handle() {
        return rcl_interfaces__srv__ListParameters_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__fini(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Request__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Request *rcl_interfaces__srv__ListParameters_Request__create()
     * }
     */
    public static class rcl_interfaces__srv__ListParameters_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__ListParameters_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__ListParameters_Request *rcl_interfaces__srv__ListParameters_Request__create()
         * }
         */
        public static rcl_interfaces__srv__ListParameters_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__ListParameters_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__ListParameters_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__destroy(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__destroy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__destroy(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__destroy$handle() {
        return rcl_interfaces__srv__ListParameters_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__destroy(rcl_interfaces__srv__ListParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Request__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__are_equal(const rcl_interfaces__srv__ListParameters_Request *lhs, const rcl_interfaces__srv__ListParameters_Request *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__are_equal$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__are_equal(const rcl_interfaces__srv__ListParameters_Request *lhs, const rcl_interfaces__srv__ListParameters_Request *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__are_equal$handle() {
        return rcl_interfaces__srv__ListParameters_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__are_equal(const rcl_interfaces__srv__ListParameters_Request *lhs, const rcl_interfaces__srv__ListParameters_Request *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__copy(const rcl_interfaces__srv__ListParameters_Request *input, rcl_interfaces__srv__ListParameters_Request *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__copy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__copy(const rcl_interfaces__srv__ListParameters_Request *input, rcl_interfaces__srv__ListParameters_Request *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__copy$handle() {
        return rcl_interfaces__srv__ListParameters_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__copy(const rcl_interfaces__srv__ListParameters_Request *input, rcl_interfaces__srv__ListParameters_Request *output)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__init(rcl_interfaces__srv__ListParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__Sequence__init$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__init(rcl_interfaces__srv__ListParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__Sequence__init$handle() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__init(rcl_interfaces__srv__ListParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__Sequence__fini(rcl_interfaces__srv__ListParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__Sequence__fini(rcl_interfaces__srv__ListParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__Sequence__fini$handle() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__Sequence__fini(rcl_interfaces__srv__ListParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Request__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Request__Sequence *rcl_interfaces__srv__ListParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__Sequence__create$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Request__Sequence *rcl_interfaces__srv__ListParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__Sequence__create$handle() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Request__Sequence *rcl_interfaces__srv__ListParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__ListParameters_Request__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__Sequence__destroy(rcl_interfaces__srv__ListParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__Sequence__destroy(rcl_interfaces__srv__ListParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__Sequence__destroy$handle() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Request__Sequence__destroy(rcl_interfaces__srv__ListParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__ListParameters_Request__Sequence *lhs, const rcl_interfaces__srv__ListParameters_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__ListParameters_Request__Sequence *lhs, const rcl_interfaces__srv__ListParameters_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__ListParameters_Request__Sequence *lhs, const rcl_interfaces__srv__ListParameters_Request__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__copy(const rcl_interfaces__srv__ListParameters_Request__Sequence *input, rcl_interfaces__srv__ListParameters_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Request__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__copy(const rcl_interfaces__srv__ListParameters_Request__Sequence *input, rcl_interfaces__srv__ListParameters_Request__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Request__Sequence__copy$handle() {
        return rcl_interfaces__srv__ListParameters_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Request__Sequence__copy(const rcl_interfaces__srv__ListParameters_Request__Sequence *input, rcl_interfaces__srv__ListParameters_Request__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__ListParameters_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__init(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__init$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__init(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__init$handle() {
        return rcl_interfaces__srv__ListParameters_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__init(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Response__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__fini(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__fini$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__fini(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__fini$handle() {
        return rcl_interfaces__srv__ListParameters_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__fini(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Response__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Response *rcl_interfaces__srv__ListParameters_Response__create()
     * }
     */
    public static class rcl_interfaces__srv__ListParameters_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__ListParameters_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__ListParameters_Response *rcl_interfaces__srv__ListParameters_Response__create()
         * }
         */
        public static rcl_interfaces__srv__ListParameters_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__ListParameters_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__ListParameters_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__destroy(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__destroy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__destroy(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__destroy$handle() {
        return rcl_interfaces__srv__ListParameters_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__destroy(rcl_interfaces__srv__ListParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Response__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__are_equal(const rcl_interfaces__srv__ListParameters_Response *lhs, const rcl_interfaces__srv__ListParameters_Response *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__are_equal$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__are_equal(const rcl_interfaces__srv__ListParameters_Response *lhs, const rcl_interfaces__srv__ListParameters_Response *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__are_equal$handle() {
        return rcl_interfaces__srv__ListParameters_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__are_equal(const rcl_interfaces__srv__ListParameters_Response *lhs, const rcl_interfaces__srv__ListParameters_Response *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__copy(const rcl_interfaces__srv__ListParameters_Response *input, rcl_interfaces__srv__ListParameters_Response *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__copy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__copy(const rcl_interfaces__srv__ListParameters_Response *input, rcl_interfaces__srv__ListParameters_Response *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__copy$handle() {
        return rcl_interfaces__srv__ListParameters_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__copy(const rcl_interfaces__srv__ListParameters_Response *input, rcl_interfaces__srv__ListParameters_Response *output)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__init(rcl_interfaces__srv__ListParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__Sequence__init$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__init(rcl_interfaces__srv__ListParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__Sequence__init$handle() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__init(rcl_interfaces__srv__ListParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__Sequence__fini(rcl_interfaces__srv__ListParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__Sequence__fini(rcl_interfaces__srv__ListParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__Sequence__fini$handle() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__Sequence__fini(rcl_interfaces__srv__ListParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Response__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Response__Sequence *rcl_interfaces__srv__ListParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__Sequence__create$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Response__Sequence *rcl_interfaces__srv__ListParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__Sequence__create$handle() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__ListParameters_Response__Sequence *rcl_interfaces__srv__ListParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__ListParameters_Response__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__Sequence__destroy(rcl_interfaces__srv__ListParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__Sequence__destroy(rcl_interfaces__srv__ListParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__Sequence__destroy$handle() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__ListParameters_Response__Sequence__destroy(rcl_interfaces__srv__ListParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__ListParameters_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__ListParameters_Response__Sequence *lhs, const rcl_interfaces__srv__ListParameters_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__ListParameters_Response__Sequence *lhs, const rcl_interfaces__srv__ListParameters_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__ListParameters_Response__Sequence *lhs, const rcl_interfaces__srv__ListParameters_Response__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__ListParameters_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__ListParameters_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__copy(const rcl_interfaces__srv__ListParameters_Response__Sequence *input, rcl_interfaces__srv__ListParameters_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__ListParameters_Response__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__copy(const rcl_interfaces__srv__ListParameters_Response__Sequence *input, rcl_interfaces__srv__ListParameters_Response__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__ListParameters_Response__Sequence__copy$handle() {
        return rcl_interfaces__srv__ListParameters_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__ListParameters_Response__Sequence__copy(const rcl_interfaces__srv__ListParameters_Response__Sequence *input, rcl_interfaces__srv__ListParameters_Response__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__ListParameters_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__ListParameters_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__ListParameters_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__init(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__init$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__init(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__init$handle() {
        return rcl_interfaces__srv__SetParameters_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__init(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Request__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__fini(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__fini$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__fini(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__fini$handle() {
        return rcl_interfaces__srv__SetParameters_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__fini(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Request__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Request *rcl_interfaces__srv__SetParameters_Request__create()
     * }
     */
    public static class rcl_interfaces__srv__SetParameters_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__SetParameters_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__SetParameters_Request *rcl_interfaces__srv__SetParameters_Request__create()
         * }
         */
        public static rcl_interfaces__srv__SetParameters_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__SetParameters_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__SetParameters_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__destroy(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__destroy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__destroy(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__destroy$handle() {
        return rcl_interfaces__srv__SetParameters_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__destroy(rcl_interfaces__srv__SetParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Request__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__are_equal(const rcl_interfaces__srv__SetParameters_Request *lhs, const rcl_interfaces__srv__SetParameters_Request *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__are_equal$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__are_equal(const rcl_interfaces__srv__SetParameters_Request *lhs, const rcl_interfaces__srv__SetParameters_Request *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__are_equal$handle() {
        return rcl_interfaces__srv__SetParameters_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__are_equal(const rcl_interfaces__srv__SetParameters_Request *lhs, const rcl_interfaces__srv__SetParameters_Request *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__copy(const rcl_interfaces__srv__SetParameters_Request *input, rcl_interfaces__srv__SetParameters_Request *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__copy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__copy(const rcl_interfaces__srv__SetParameters_Request *input, rcl_interfaces__srv__SetParameters_Request *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__copy$handle() {
        return rcl_interfaces__srv__SetParameters_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__copy(const rcl_interfaces__srv__SetParameters_Request *input, rcl_interfaces__srv__SetParameters_Request *output)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__init(rcl_interfaces__srv__SetParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__Sequence__init$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__init(rcl_interfaces__srv__SetParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__Sequence__init$handle() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__init(rcl_interfaces__srv__SetParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__Sequence__fini(rcl_interfaces__srv__SetParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__Sequence__fini(rcl_interfaces__srv__SetParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__Sequence__fini$handle() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__Sequence__fini(rcl_interfaces__srv__SetParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Request__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Request__Sequence *rcl_interfaces__srv__SetParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__Sequence__create$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Request__Sequence *rcl_interfaces__srv__SetParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__Sequence__create$handle() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Request__Sequence *rcl_interfaces__srv__SetParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__SetParameters_Request__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__Sequence__destroy(rcl_interfaces__srv__SetParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__Sequence__destroy(rcl_interfaces__srv__SetParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__Sequence__destroy$handle() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Request__Sequence__destroy(rcl_interfaces__srv__SetParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__SetParameters_Request__Sequence *lhs, const rcl_interfaces__srv__SetParameters_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__SetParameters_Request__Sequence *lhs, const rcl_interfaces__srv__SetParameters_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__SetParameters_Request__Sequence *lhs, const rcl_interfaces__srv__SetParameters_Request__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__copy(const rcl_interfaces__srv__SetParameters_Request__Sequence *input, rcl_interfaces__srv__SetParameters_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Request__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__copy(const rcl_interfaces__srv__SetParameters_Request__Sequence *input, rcl_interfaces__srv__SetParameters_Request__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Request__Sequence__copy$handle() {
        return rcl_interfaces__srv__SetParameters_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Request__Sequence__copy(const rcl_interfaces__srv__SetParameters_Request__Sequence *input, rcl_interfaces__srv__SetParameters_Request__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__SetParameters_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__init(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__init$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__init(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__init$handle() {
        return rcl_interfaces__srv__SetParameters_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__init(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Response__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__fini(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__fini$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__fini(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__fini$handle() {
        return rcl_interfaces__srv__SetParameters_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__fini(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Response__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Response *rcl_interfaces__srv__SetParameters_Response__create()
     * }
     */
    public static class rcl_interfaces__srv__SetParameters_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__SetParameters_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__SetParameters_Response *rcl_interfaces__srv__SetParameters_Response__create()
         * }
         */
        public static rcl_interfaces__srv__SetParameters_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__SetParameters_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__SetParameters_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__destroy(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__destroy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__destroy(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__destroy$handle() {
        return rcl_interfaces__srv__SetParameters_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__destroy(rcl_interfaces__srv__SetParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Response__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__are_equal(const rcl_interfaces__srv__SetParameters_Response *lhs, const rcl_interfaces__srv__SetParameters_Response *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__are_equal$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__are_equal(const rcl_interfaces__srv__SetParameters_Response *lhs, const rcl_interfaces__srv__SetParameters_Response *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__are_equal$handle() {
        return rcl_interfaces__srv__SetParameters_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__are_equal(const rcl_interfaces__srv__SetParameters_Response *lhs, const rcl_interfaces__srv__SetParameters_Response *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__copy(const rcl_interfaces__srv__SetParameters_Response *input, rcl_interfaces__srv__SetParameters_Response *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__copy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__copy(const rcl_interfaces__srv__SetParameters_Response *input, rcl_interfaces__srv__SetParameters_Response *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__copy$handle() {
        return rcl_interfaces__srv__SetParameters_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__copy(const rcl_interfaces__srv__SetParameters_Response *input, rcl_interfaces__srv__SetParameters_Response *output)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__init(rcl_interfaces__srv__SetParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__Sequence__init$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__init(rcl_interfaces__srv__SetParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__Sequence__init$handle() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__init(rcl_interfaces__srv__SetParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__Sequence__fini(rcl_interfaces__srv__SetParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__Sequence__fini(rcl_interfaces__srv__SetParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__Sequence__fini$handle() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__Sequence__fini(rcl_interfaces__srv__SetParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Response__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Response__Sequence *rcl_interfaces__srv__SetParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__Sequence__create$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Response__Sequence *rcl_interfaces__srv__SetParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__Sequence__create$handle() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__SetParameters_Response__Sequence *rcl_interfaces__srv__SetParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__SetParameters_Response__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__Sequence__destroy(rcl_interfaces__srv__SetParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__Sequence__destroy(rcl_interfaces__srv__SetParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__Sequence__destroy$handle() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__SetParameters_Response__Sequence__destroy(rcl_interfaces__srv__SetParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__SetParameters_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__SetParameters_Response__Sequence *lhs, const rcl_interfaces__srv__SetParameters_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__SetParameters_Response__Sequence *lhs, const rcl_interfaces__srv__SetParameters_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__SetParameters_Response__Sequence *lhs, const rcl_interfaces__srv__SetParameters_Response__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__SetParameters_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__SetParameters_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__copy(const rcl_interfaces__srv__SetParameters_Response__Sequence *input, rcl_interfaces__srv__SetParameters_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__SetParameters_Response__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__copy(const rcl_interfaces__srv__SetParameters_Response__Sequence *input, rcl_interfaces__srv__SetParameters_Response__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__SetParameters_Response__Sequence__copy$handle() {
        return rcl_interfaces__srv__SetParameters_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__SetParameters_Response__Sequence__copy(const rcl_interfaces__srv__SetParameters_Response__Sequence *input, rcl_interfaces__srv__SetParameters_Response__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__SetParameters_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__SetParameters_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__SetParameters_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int rcl_interfaces__msg__ParameterDescriptor__floating_point_range__MAX_SIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.rcl_interfaces__msg__ParameterDescriptor__floating_point_range__MAX_SIZE = 1
     * }
     */
    public static int rcl_interfaces__msg__ParameterDescriptor__floating_point_range__MAX_SIZE() {
        return rcl_interfaces__msg__ParameterDescriptor__floating_point_range__MAX_SIZE;
    }
    private static final int rcl_interfaces__msg__ParameterDescriptor__integer_range__MAX_SIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.rcl_interfaces__msg__ParameterDescriptor__integer_range__MAX_SIZE = 1
     * }
     */
    public static int rcl_interfaces__msg__ParameterDescriptor__integer_range__MAX_SIZE() {
        return rcl_interfaces__msg__ParameterDescriptor__integer_range__MAX_SIZE;
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__init(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__init$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__init(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__init$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__init(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Request__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__fini(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__fini$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__fini(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__fini$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__fini(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Request__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Request *rcl_interfaces__srv__DescribeParameters_Request__create()
     * }
     */
    public static class rcl_interfaces__srv__DescribeParameters_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__DescribeParameters_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__DescribeParameters_Request *rcl_interfaces__srv__DescribeParameters_Request__create()
         * }
         */
        public static rcl_interfaces__srv__DescribeParameters_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__DescribeParameters_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__destroy(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__destroy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__destroy(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__destroy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__destroy(rcl_interfaces__srv__DescribeParameters_Request *msg)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Request__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__are_equal(const rcl_interfaces__srv__DescribeParameters_Request *lhs, const rcl_interfaces__srv__DescribeParameters_Request *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__are_equal$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__are_equal(const rcl_interfaces__srv__DescribeParameters_Request *lhs, const rcl_interfaces__srv__DescribeParameters_Request *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__are_equal$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__are_equal(const rcl_interfaces__srv__DescribeParameters_Request *lhs, const rcl_interfaces__srv__DescribeParameters_Request *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__copy(const rcl_interfaces__srv__DescribeParameters_Request *input, rcl_interfaces__srv__DescribeParameters_Request *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__copy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__copy(const rcl_interfaces__srv__DescribeParameters_Request *input, rcl_interfaces__srv__DescribeParameters_Request *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__copy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__copy(const rcl_interfaces__srv__DescribeParameters_Request *input, rcl_interfaces__srv__DescribeParameters_Request *output)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__init(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__Sequence__init$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__init(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__Sequence__init$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__init(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Request__Sequence *rcl_interfaces__srv__DescribeParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__Sequence__create$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Request__Sequence *rcl_interfaces__srv__DescribeParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__Sequence__create$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Request__Sequence *rcl_interfaces__srv__DescribeParameters_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__DescribeParameters_Request__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy(rcl_interfaces__srv__DescribeParameters_Request__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__DescribeParameters_Request__Sequence *lhs, const rcl_interfaces__srv__DescribeParameters_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__DescribeParameters_Request__Sequence *lhs, const rcl_interfaces__srv__DescribeParameters_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal(const rcl_interfaces__srv__DescribeParameters_Request__Sequence *lhs, const rcl_interfaces__srv__DescribeParameters_Request__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy(const rcl_interfaces__srv__DescribeParameters_Request__Sequence *input, rcl_interfaces__srv__DescribeParameters_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy(const rcl_interfaces__srv__DescribeParameters_Request__Sequence *input, rcl_interfaces__srv__DescribeParameters_Request__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy(const rcl_interfaces__srv__DescribeParameters_Request__Sequence *input, rcl_interfaces__srv__DescribeParameters_Request__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__init(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__init$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__init(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__init$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__init(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Response__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__fini(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__fini$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__fini(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__fini$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__fini(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Response__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Response *rcl_interfaces__srv__DescribeParameters_Response__create()
     * }
     */
    public static class rcl_interfaces__srv__DescribeParameters_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__srv__DescribeParameters_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__srv__DescribeParameters_Response *rcl_interfaces__srv__DescribeParameters_Response__create()
         * }
         */
        public static rcl_interfaces__srv__DescribeParameters_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__srv__DescribeParameters_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__destroy(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__destroy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__destroy(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__destroy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__destroy(rcl_interfaces__srv__DescribeParameters_Response *msg)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Response__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__are_equal(const rcl_interfaces__srv__DescribeParameters_Response *lhs, const rcl_interfaces__srv__DescribeParameters_Response *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__are_equal$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__are_equal(const rcl_interfaces__srv__DescribeParameters_Response *lhs, const rcl_interfaces__srv__DescribeParameters_Response *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__are_equal$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__are_equal(const rcl_interfaces__srv__DescribeParameters_Response *lhs, const rcl_interfaces__srv__DescribeParameters_Response *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__copy(const rcl_interfaces__srv__DescribeParameters_Response *input, rcl_interfaces__srv__DescribeParameters_Response *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__copy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__copy(const rcl_interfaces__srv__DescribeParameters_Response *input, rcl_interfaces__srv__DescribeParameters_Response *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__copy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__copy(const rcl_interfaces__srv__DescribeParameters_Response *input, rcl_interfaces__srv__DescribeParameters_Response *output)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__init(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__Sequence__init$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__init(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__Sequence__init$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__init(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Response__Sequence *rcl_interfaces__srv__DescribeParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__Sequence__create$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Response__Sequence *rcl_interfaces__srv__DescribeParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__Sequence__create$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__srv__DescribeParameters_Response__Sequence *rcl_interfaces__srv__DescribeParameters_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__srv__DescribeParameters_Response__Sequence__create(long size) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy(rcl_interfaces__srv__DescribeParameters_Response__Sequence *array)
     * }
     */
    public static void rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__DescribeParameters_Response__Sequence *lhs, const rcl_interfaces__srv__DescribeParameters_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__DescribeParameters_Response__Sequence *lhs, const rcl_interfaces__srv__DescribeParameters_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal(const rcl_interfaces__srv__DescribeParameters_Response__Sequence *lhs, const rcl_interfaces__srv__DescribeParameters_Response__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy(const rcl_interfaces__srv__DescribeParameters_Response__Sequence *input, rcl_interfaces__srv__DescribeParameters_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy$descriptor() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy(const rcl_interfaces__srv__DescribeParameters_Response__Sequence *input, rcl_interfaces__srv__DescribeParameters_Response__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy$handle() {
        return rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy(const rcl_interfaces__srv__DescribeParameters_Response__Sequence *input, rcl_interfaces__srv__DescribeParameters_Response__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__srv__DescribeParameters_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__init(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__init$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__init(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__init$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__init(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterDescriptor__init(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__fini(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__fini$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__fini(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__fini$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__fini(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static void rcl_interfaces__msg__ParameterDescriptor__fini(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterDescriptor *rcl_interfaces__msg__ParameterDescriptor__create()
     * }
     */
    public static class rcl_interfaces__msg__ParameterDescriptor__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rcl_interfaces__msg__ParameterDescriptor__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * rcl_interfaces__msg__ParameterDescriptor *rcl_interfaces__msg__ParameterDescriptor__create()
         * }
         */
        public static rcl_interfaces__msg__ParameterDescriptor__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rcl_interfaces__msg__ParameterDescriptor__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rcl_interfaces__msg__ParameterDescriptor__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__destroy(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__destroy$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__destroy(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__destroy$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__destroy(rcl_interfaces__msg__ParameterDescriptor *msg)
     * }
     */
    public static void rcl_interfaces__msg__ParameterDescriptor__destroy(MemorySegment msg) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__are_equal(const rcl_interfaces__msg__ParameterDescriptor *lhs, const rcl_interfaces__msg__ParameterDescriptor *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__are_equal$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__are_equal(const rcl_interfaces__msg__ParameterDescriptor *lhs, const rcl_interfaces__msg__ParameterDescriptor *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__are_equal$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__are_equal(const rcl_interfaces__msg__ParameterDescriptor *lhs, const rcl_interfaces__msg__ParameterDescriptor *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterDescriptor__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__copy(const rcl_interfaces__msg__ParameterDescriptor *input, rcl_interfaces__msg__ParameterDescriptor *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__copy$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__copy(const rcl_interfaces__msg__ParameterDescriptor *input, rcl_interfaces__msg__ParameterDescriptor *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__copy$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__copy(const rcl_interfaces__msg__ParameterDescriptor *input, rcl_interfaces__msg__ParameterDescriptor *output)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterDescriptor__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__init(rcl_interfaces__msg__ParameterDescriptor__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__Sequence__init$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__init(rcl_interfaces__msg__ParameterDescriptor__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__Sequence__init$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__init(rcl_interfaces__msg__ParameterDescriptor__Sequence *array, size_t size)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterDescriptor__Sequence__init(MemorySegment array, long size) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__Sequence__fini(rcl_interfaces__msg__ParameterDescriptor__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__Sequence__fini$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__Sequence__fini(rcl_interfaces__msg__ParameterDescriptor__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__Sequence__fini$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__Sequence__fini(rcl_interfaces__msg__ParameterDescriptor__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__ParameterDescriptor__Sequence__fini(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterDescriptor__Sequence *rcl_interfaces__msg__ParameterDescriptor__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__Sequence__create$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterDescriptor__Sequence *rcl_interfaces__msg__ParameterDescriptor__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__Sequence__create$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_interfaces__msg__ParameterDescriptor__Sequence *rcl_interfaces__msg__ParameterDescriptor__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rcl_interfaces__msg__ParameterDescriptor__Sequence__create(long size) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy(rcl_interfaces__msg__ParameterDescriptor__Sequence *array)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy(rcl_interfaces__msg__ParameterDescriptor__Sequence *array)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy(rcl_interfaces__msg__ParameterDescriptor__Sequence *array)
     * }
     */
    public static void rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy(MemorySegment array) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal(const rcl_interfaces__msg__ParameterDescriptor__Sequence *lhs, const rcl_interfaces__msg__ParameterDescriptor__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal(const rcl_interfaces__msg__ParameterDescriptor__Sequence *lhs, const rcl_interfaces__msg__ParameterDescriptor__Sequence *rhs)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal(const rcl_interfaces__msg__ParameterDescriptor__Sequence *lhs, const rcl_interfaces__msg__ParameterDescriptor__Sequence *rhs)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rcl_interfaces__msg__ParameterDescriptor__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rcl_interfaces__msg__ParameterDescriptor__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__copy(const rcl_interfaces__msg__ParameterDescriptor__Sequence *input, rcl_interfaces__msg__ParameterDescriptor__Sequence *output)
     * }
     */
    public static FunctionDescriptor rcl_interfaces__msg__ParameterDescriptor__Sequence__copy$descriptor() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__copy(const rcl_interfaces__msg__ParameterDescriptor__Sequence *input, rcl_interfaces__msg__ParameterDescriptor__Sequence *output)
     * }
     */
    public static MethodHandle rcl_interfaces__msg__ParameterDescriptor__Sequence__copy$handle() {
        return rcl_interfaces__msg__ParameterDescriptor__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rcl_interfaces__msg__ParameterDescriptor__Sequence__copy(const rcl_interfaces__msg__ParameterDescriptor__Sequence *input, rcl_interfaces__msg__ParameterDescriptor__Sequence *output)
     * }
     */
    public static boolean rcl_interfaces__msg__ParameterDescriptor__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rcl_interfaces__msg__ParameterDescriptor__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rcl_interfaces__msg__ParameterDescriptor__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rosidl_runtime_c__String__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__init(rosidl_runtime_c__String *str)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__init$descriptor() {
        return rosidl_runtime_c__String__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__init(rosidl_runtime_c__String *str)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__init$handle() {
        return rosidl_runtime_c__String__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__init(rosidl_runtime_c__String *str)
     * }
     */
    public static boolean rosidl_runtime_c__String__init(MemorySegment str) {
        var mh$ = rosidl_runtime_c__String__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__init", str);
            }
            return (boolean)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__fini(rosidl_runtime_c__String *str)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__fini$descriptor() {
        return rosidl_runtime_c__String__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__fini(rosidl_runtime_c__String *str)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__fini$handle() {
        return rosidl_runtime_c__String__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__fini(rosidl_runtime_c__String *str)
     * }
     */
    public static void rosidl_runtime_c__String__fini(MemorySegment str) {
        var mh$ = rosidl_runtime_c__String__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__fini", str);
            }
            mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__copy(const rosidl_runtime_c__String *input, rosidl_runtime_c__String *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__copy$descriptor() {
        return rosidl_runtime_c__String__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__copy(const rosidl_runtime_c__String *input, rosidl_runtime_c__String *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__copy$handle() {
        return rosidl_runtime_c__String__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__copy(const rosidl_runtime_c__String *input, rosidl_runtime_c__String *output)
     * }
     */
    public static boolean rosidl_runtime_c__String__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__String__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__are_equal(const rosidl_runtime_c__String *lhs, const rosidl_runtime_c__String *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__are_equal$descriptor() {
        return rosidl_runtime_c__String__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__are_equal(const rosidl_runtime_c__String *lhs, const rosidl_runtime_c__String *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__are_equal$handle() {
        return rosidl_runtime_c__String__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__are_equal(const rosidl_runtime_c__String *lhs, const rosidl_runtime_c__String *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__String__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__String__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__assignn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__assignn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__assignn(rosidl_runtime_c__String *str, const char *value, size_t n)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__assignn$descriptor() {
        return rosidl_runtime_c__String__assignn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__assignn(rosidl_runtime_c__String *str, const char *value, size_t n)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__assignn$handle() {
        return rosidl_runtime_c__String__assignn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__assignn(rosidl_runtime_c__String *str, const char *value, size_t n)
     * }
     */
    public static boolean rosidl_runtime_c__String__assignn(MemorySegment str, MemorySegment value, long n) {
        var mh$ = rosidl_runtime_c__String__assignn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__assignn", str, value, n);
            }
            return (boolean)mh$.invokeExact(str, value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__assign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__assign(rosidl_runtime_c__String *str, const char *value)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__assign$descriptor() {
        return rosidl_runtime_c__String__assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__assign(rosidl_runtime_c__String *str, const char *value)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__assign$handle() {
        return rosidl_runtime_c__String__assign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__assign(rosidl_runtime_c__String *str, const char *value)
     * }
     */
    public static boolean rosidl_runtime_c__String__assign(MemorySegment str, MemorySegment value) {
        var mh$ = rosidl_runtime_c__String__assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__assign", str, value);
            }
            return (boolean)mh$.invokeExact(str, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__init(rosidl_runtime_c__String__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__Sequence__init$descriptor() {
        return rosidl_runtime_c__String__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__init(rosidl_runtime_c__String__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__Sequence__init$handle() {
        return rosidl_runtime_c__String__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__init(rosidl_runtime_c__String__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__String__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__String__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__Sequence__fini(rosidl_runtime_c__String__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__Sequence__fini$descriptor() {
        return rosidl_runtime_c__String__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__Sequence__fini(rosidl_runtime_c__String__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__Sequence__fini$handle() {
        return rosidl_runtime_c__String__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__Sequence__fini(rosidl_runtime_c__String__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__String__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__String__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__are_equal(const rosidl_runtime_c__String__Sequence *lhs, const rosidl_runtime_c__String__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__String__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__are_equal(const rosidl_runtime_c__String__Sequence *lhs, const rosidl_runtime_c__String__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__Sequence__are_equal$handle() {
        return rosidl_runtime_c__String__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__are_equal(const rosidl_runtime_c__String__Sequence *lhs, const rosidl_runtime_c__String__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__String__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__String__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__copy(const rosidl_runtime_c__String__Sequence *input, rosidl_runtime_c__String__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__Sequence__copy$descriptor() {
        return rosidl_runtime_c__String__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__copy(const rosidl_runtime_c__String__Sequence *input, rosidl_runtime_c__String__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__Sequence__copy$handle() {
        return rosidl_runtime_c__String__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__String__Sequence__copy(const rosidl_runtime_c__String__Sequence *input, rosidl_runtime_c__String__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__String__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__String__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rosidl_runtime_c__String__Sequence *rosidl_runtime_c__String__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__Sequence__create$descriptor() {
        return rosidl_runtime_c__String__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rosidl_runtime_c__String__Sequence *rosidl_runtime_c__String__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__Sequence__create$handle() {
        return rosidl_runtime_c__String__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rosidl_runtime_c__String__Sequence *rosidl_runtime_c__String__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment rosidl_runtime_c__String__Sequence__create(long size) {
        var mh$ = rosidl_runtime_c__String__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__String__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__String__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__Sequence__destroy(rosidl_runtime_c__String__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__String__Sequence__destroy$descriptor() {
        return rosidl_runtime_c__String__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__Sequence__destroy(rosidl_runtime_c__String__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__String__Sequence__destroy$handle() {
        return rosidl_runtime_c__String__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__String__Sequence__destroy(rosidl_runtime_c__String__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__String__Sequence__destroy(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__String__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__String__Sequence__destroy", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__init(rosidl_runtime_c__float__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float__Sequence__init$descriptor() {
        return rosidl_runtime_c__float__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__init(rosidl_runtime_c__float__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float__Sequence__init$handle() {
        return rosidl_runtime_c__float__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__init(rosidl_runtime_c__float__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__float__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__float__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__float__Sequence__fini(rosidl_runtime_c__float__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float__Sequence__fini$descriptor() {
        return rosidl_runtime_c__float__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__float__Sequence__fini(rosidl_runtime_c__float__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float__Sequence__fini$handle() {
        return rosidl_runtime_c__float__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__float__Sequence__fini(rosidl_runtime_c__float__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__float__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__float__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__are_equal(const rosidl_runtime_c__float__Sequence *lhs, const rosidl_runtime_c__float__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__float__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__are_equal(const rosidl_runtime_c__float__Sequence *lhs, const rosidl_runtime_c__float__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float__Sequence__are_equal$handle() {
        return rosidl_runtime_c__float__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__are_equal(const rosidl_runtime_c__float__Sequence *lhs, const rosidl_runtime_c__float__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__float__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__float__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__copy(const rosidl_runtime_c__float__Sequence *input, rosidl_runtime_c__float__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float__Sequence__copy$descriptor() {
        return rosidl_runtime_c__float__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__copy(const rosidl_runtime_c__float__Sequence *input, rosidl_runtime_c__float__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float__Sequence__copy$handle() {
        return rosidl_runtime_c__float__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float__Sequence__copy(const rosidl_runtime_c__float__Sequence *input, rosidl_runtime_c__float__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__float__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__float__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__double__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__double__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__init(rosidl_runtime_c__double__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__double__Sequence__init$descriptor() {
        return rosidl_runtime_c__double__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__init(rosidl_runtime_c__double__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__double__Sequence__init$handle() {
        return rosidl_runtime_c__double__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__init(rosidl_runtime_c__double__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__double__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__double__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__double__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__double__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__double__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__double__Sequence__fini(rosidl_runtime_c__double__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__double__Sequence__fini$descriptor() {
        return rosidl_runtime_c__double__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__double__Sequence__fini(rosidl_runtime_c__double__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__double__Sequence__fini$handle() {
        return rosidl_runtime_c__double__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__double__Sequence__fini(rosidl_runtime_c__double__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__double__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__double__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__double__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__double__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__double__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__are_equal(const rosidl_runtime_c__double__Sequence *lhs, const rosidl_runtime_c__double__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__double__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__double__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__are_equal(const rosidl_runtime_c__double__Sequence *lhs, const rosidl_runtime_c__double__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__double__Sequence__are_equal$handle() {
        return rosidl_runtime_c__double__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__are_equal(const rosidl_runtime_c__double__Sequence *lhs, const rosidl_runtime_c__double__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__double__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__double__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__double__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__double__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__double__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__copy(const rosidl_runtime_c__double__Sequence *input, rosidl_runtime_c__double__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__double__Sequence__copy$descriptor() {
        return rosidl_runtime_c__double__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__copy(const rosidl_runtime_c__double__Sequence *input, rosidl_runtime_c__double__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__double__Sequence__copy$handle() {
        return rosidl_runtime_c__double__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__double__Sequence__copy(const rosidl_runtime_c__double__Sequence *input, rosidl_runtime_c__double__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__double__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__double__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__double__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__long_double__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__long_double__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__init(rosidl_runtime_c__long_double__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__long_double__Sequence__init$descriptor() {
        return rosidl_runtime_c__long_double__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__init(rosidl_runtime_c__long_double__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__long_double__Sequence__init$handle() {
        return rosidl_runtime_c__long_double__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__init(rosidl_runtime_c__long_double__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__long_double__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__long_double__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__long_double__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__long_double__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__long_double__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__long_double__Sequence__fini(rosidl_runtime_c__long_double__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__long_double__Sequence__fini$descriptor() {
        return rosidl_runtime_c__long_double__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__long_double__Sequence__fini(rosidl_runtime_c__long_double__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__long_double__Sequence__fini$handle() {
        return rosidl_runtime_c__long_double__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__long_double__Sequence__fini(rosidl_runtime_c__long_double__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__long_double__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__long_double__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__long_double__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__long_double__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__long_double__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__are_equal(const rosidl_runtime_c__long_double__Sequence *lhs, const rosidl_runtime_c__long_double__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__long_double__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__long_double__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__are_equal(const rosidl_runtime_c__long_double__Sequence *lhs, const rosidl_runtime_c__long_double__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__long_double__Sequence__are_equal$handle() {
        return rosidl_runtime_c__long_double__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__are_equal(const rosidl_runtime_c__long_double__Sequence *lhs, const rosidl_runtime_c__long_double__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__long_double__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__long_double__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__long_double__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__long_double__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__long_double__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__copy(const rosidl_runtime_c__long_double__Sequence *input, rosidl_runtime_c__long_double__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__long_double__Sequence__copy$descriptor() {
        return rosidl_runtime_c__long_double__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__copy(const rosidl_runtime_c__long_double__Sequence *input, rosidl_runtime_c__long_double__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__long_double__Sequence__copy$handle() {
        return rosidl_runtime_c__long_double__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__long_double__Sequence__copy(const rosidl_runtime_c__long_double__Sequence *input, rosidl_runtime_c__long_double__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__long_double__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__long_double__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__long_double__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__char__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__char__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__init(rosidl_runtime_c__char__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__char__Sequence__init$descriptor() {
        return rosidl_runtime_c__char__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__init(rosidl_runtime_c__char__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__char__Sequence__init$handle() {
        return rosidl_runtime_c__char__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__init(rosidl_runtime_c__char__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__char__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__char__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__char__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__char__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__char__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__char__Sequence__fini(rosidl_runtime_c__char__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__char__Sequence__fini$descriptor() {
        return rosidl_runtime_c__char__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__char__Sequence__fini(rosidl_runtime_c__char__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__char__Sequence__fini$handle() {
        return rosidl_runtime_c__char__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__char__Sequence__fini(rosidl_runtime_c__char__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__char__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__char__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__char__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__char__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__char__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__are_equal(const rosidl_runtime_c__char__Sequence *lhs, const rosidl_runtime_c__char__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__char__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__char__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__are_equal(const rosidl_runtime_c__char__Sequence *lhs, const rosidl_runtime_c__char__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__char__Sequence__are_equal$handle() {
        return rosidl_runtime_c__char__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__are_equal(const rosidl_runtime_c__char__Sequence *lhs, const rosidl_runtime_c__char__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__char__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__char__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__char__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__char__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__char__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__copy(const rosidl_runtime_c__char__Sequence *input, rosidl_runtime_c__char__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__char__Sequence__copy$descriptor() {
        return rosidl_runtime_c__char__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__copy(const rosidl_runtime_c__char__Sequence *input, rosidl_runtime_c__char__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__char__Sequence__copy$handle() {
        return rosidl_runtime_c__char__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__char__Sequence__copy(const rosidl_runtime_c__char__Sequence *input, rosidl_runtime_c__char__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__char__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__char__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__char__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__wchar__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__wchar__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__init(rosidl_runtime_c__wchar__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__wchar__Sequence__init$descriptor() {
        return rosidl_runtime_c__wchar__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__init(rosidl_runtime_c__wchar__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__wchar__Sequence__init$handle() {
        return rosidl_runtime_c__wchar__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__init(rosidl_runtime_c__wchar__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__wchar__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__wchar__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__wchar__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__wchar__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__wchar__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__wchar__Sequence__fini(rosidl_runtime_c__wchar__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__wchar__Sequence__fini$descriptor() {
        return rosidl_runtime_c__wchar__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__wchar__Sequence__fini(rosidl_runtime_c__wchar__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__wchar__Sequence__fini$handle() {
        return rosidl_runtime_c__wchar__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__wchar__Sequence__fini(rosidl_runtime_c__wchar__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__wchar__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__wchar__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__wchar__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__wchar__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__wchar__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__are_equal(const rosidl_runtime_c__wchar__Sequence *lhs, const rosidl_runtime_c__wchar__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__wchar__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__wchar__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__are_equal(const rosidl_runtime_c__wchar__Sequence *lhs, const rosidl_runtime_c__wchar__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__wchar__Sequence__are_equal$handle() {
        return rosidl_runtime_c__wchar__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__are_equal(const rosidl_runtime_c__wchar__Sequence *lhs, const rosidl_runtime_c__wchar__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__wchar__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__wchar__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__wchar__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__wchar__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__wchar__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__copy(const rosidl_runtime_c__wchar__Sequence *input, rosidl_runtime_c__wchar__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__wchar__Sequence__copy$descriptor() {
        return rosidl_runtime_c__wchar__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__copy(const rosidl_runtime_c__wchar__Sequence *input, rosidl_runtime_c__wchar__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__wchar__Sequence__copy$handle() {
        return rosidl_runtime_c__wchar__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__wchar__Sequence__copy(const rosidl_runtime_c__wchar__Sequence *input, rosidl_runtime_c__wchar__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__wchar__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__wchar__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__wchar__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__boolean__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__boolean__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__init(rosidl_runtime_c__boolean__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__boolean__Sequence__init$descriptor() {
        return rosidl_runtime_c__boolean__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__init(rosidl_runtime_c__boolean__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__boolean__Sequence__init$handle() {
        return rosidl_runtime_c__boolean__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__init(rosidl_runtime_c__boolean__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__boolean__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__boolean__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__boolean__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__boolean__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__boolean__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__boolean__Sequence__fini(rosidl_runtime_c__boolean__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__boolean__Sequence__fini$descriptor() {
        return rosidl_runtime_c__boolean__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__boolean__Sequence__fini(rosidl_runtime_c__boolean__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__boolean__Sequence__fini$handle() {
        return rosidl_runtime_c__boolean__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__boolean__Sequence__fini(rosidl_runtime_c__boolean__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__boolean__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__boolean__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__boolean__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__boolean__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__boolean__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__are_equal(const rosidl_runtime_c__boolean__Sequence *lhs, const rosidl_runtime_c__boolean__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__boolean__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__boolean__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__are_equal(const rosidl_runtime_c__boolean__Sequence *lhs, const rosidl_runtime_c__boolean__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__boolean__Sequence__are_equal$handle() {
        return rosidl_runtime_c__boolean__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__are_equal(const rosidl_runtime_c__boolean__Sequence *lhs, const rosidl_runtime_c__boolean__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__boolean__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__boolean__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__boolean__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__boolean__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__boolean__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__copy(const rosidl_runtime_c__boolean__Sequence *input, rosidl_runtime_c__boolean__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__boolean__Sequence__copy$descriptor() {
        return rosidl_runtime_c__boolean__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__copy(const rosidl_runtime_c__boolean__Sequence *input, rosidl_runtime_c__boolean__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__boolean__Sequence__copy$handle() {
        return rosidl_runtime_c__boolean__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__boolean__Sequence__copy(const rosidl_runtime_c__boolean__Sequence *input, rosidl_runtime_c__boolean__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__boolean__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__boolean__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__boolean__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__octet__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__octet__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__init(rosidl_runtime_c__octet__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__octet__Sequence__init$descriptor() {
        return rosidl_runtime_c__octet__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__init(rosidl_runtime_c__octet__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__octet__Sequence__init$handle() {
        return rosidl_runtime_c__octet__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__init(rosidl_runtime_c__octet__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__octet__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__octet__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__octet__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__octet__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__octet__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__octet__Sequence__fini(rosidl_runtime_c__octet__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__octet__Sequence__fini$descriptor() {
        return rosidl_runtime_c__octet__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__octet__Sequence__fini(rosidl_runtime_c__octet__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__octet__Sequence__fini$handle() {
        return rosidl_runtime_c__octet__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__octet__Sequence__fini(rosidl_runtime_c__octet__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__octet__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__octet__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__octet__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__octet__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__octet__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__are_equal(const rosidl_runtime_c__octet__Sequence *lhs, const rosidl_runtime_c__octet__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__octet__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__octet__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__are_equal(const rosidl_runtime_c__octet__Sequence *lhs, const rosidl_runtime_c__octet__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__octet__Sequence__are_equal$handle() {
        return rosidl_runtime_c__octet__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__are_equal(const rosidl_runtime_c__octet__Sequence *lhs, const rosidl_runtime_c__octet__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__octet__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__octet__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__octet__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__octet__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__octet__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__copy(const rosidl_runtime_c__octet__Sequence *input, rosidl_runtime_c__octet__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__octet__Sequence__copy$descriptor() {
        return rosidl_runtime_c__octet__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__copy(const rosidl_runtime_c__octet__Sequence *input, rosidl_runtime_c__octet__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__octet__Sequence__copy$handle() {
        return rosidl_runtime_c__octet__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__octet__Sequence__copy(const rosidl_runtime_c__octet__Sequence *input, rosidl_runtime_c__octet__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__octet__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__octet__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__octet__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint8__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint8__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__init(rosidl_runtime_c__uint8__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint8__Sequence__init$descriptor() {
        return rosidl_runtime_c__uint8__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__init(rosidl_runtime_c__uint8__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint8__Sequence__init$handle() {
        return rosidl_runtime_c__uint8__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__init(rosidl_runtime_c__uint8__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__uint8__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__uint8__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint8__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint8__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint8__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint8__Sequence__fini(rosidl_runtime_c__uint8__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint8__Sequence__fini$descriptor() {
        return rosidl_runtime_c__uint8__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint8__Sequence__fini(rosidl_runtime_c__uint8__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint8__Sequence__fini$handle() {
        return rosidl_runtime_c__uint8__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint8__Sequence__fini(rosidl_runtime_c__uint8__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__uint8__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__uint8__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint8__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint8__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint8__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__are_equal(const rosidl_runtime_c__uint8__Sequence *lhs, const rosidl_runtime_c__uint8__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint8__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__uint8__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__are_equal(const rosidl_runtime_c__uint8__Sequence *lhs, const rosidl_runtime_c__uint8__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint8__Sequence__are_equal$handle() {
        return rosidl_runtime_c__uint8__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__are_equal(const rosidl_runtime_c__uint8__Sequence *lhs, const rosidl_runtime_c__uint8__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__uint8__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__uint8__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint8__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint8__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint8__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__copy(const rosidl_runtime_c__uint8__Sequence *input, rosidl_runtime_c__uint8__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint8__Sequence__copy$descriptor() {
        return rosidl_runtime_c__uint8__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__copy(const rosidl_runtime_c__uint8__Sequence *input, rosidl_runtime_c__uint8__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint8__Sequence__copy$handle() {
        return rosidl_runtime_c__uint8__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint8__Sequence__copy(const rosidl_runtime_c__uint8__Sequence *input, rosidl_runtime_c__uint8__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__uint8__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__uint8__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint8__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int8__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int8__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__init(rosidl_runtime_c__int8__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int8__Sequence__init$descriptor() {
        return rosidl_runtime_c__int8__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__init(rosidl_runtime_c__int8__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int8__Sequence__init$handle() {
        return rosidl_runtime_c__int8__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__init(rosidl_runtime_c__int8__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__int8__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__int8__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int8__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int8__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int8__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int8__Sequence__fini(rosidl_runtime_c__int8__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int8__Sequence__fini$descriptor() {
        return rosidl_runtime_c__int8__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int8__Sequence__fini(rosidl_runtime_c__int8__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int8__Sequence__fini$handle() {
        return rosidl_runtime_c__int8__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__int8__Sequence__fini(rosidl_runtime_c__int8__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__int8__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__int8__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int8__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int8__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int8__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__are_equal(const rosidl_runtime_c__int8__Sequence *lhs, const rosidl_runtime_c__int8__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int8__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__int8__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__are_equal(const rosidl_runtime_c__int8__Sequence *lhs, const rosidl_runtime_c__int8__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int8__Sequence__are_equal$handle() {
        return rosidl_runtime_c__int8__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__are_equal(const rosidl_runtime_c__int8__Sequence *lhs, const rosidl_runtime_c__int8__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__int8__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__int8__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int8__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int8__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int8__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__copy(const rosidl_runtime_c__int8__Sequence *input, rosidl_runtime_c__int8__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int8__Sequence__copy$descriptor() {
        return rosidl_runtime_c__int8__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__copy(const rosidl_runtime_c__int8__Sequence *input, rosidl_runtime_c__int8__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int8__Sequence__copy$handle() {
        return rosidl_runtime_c__int8__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int8__Sequence__copy(const rosidl_runtime_c__int8__Sequence *input, rosidl_runtime_c__int8__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__int8__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__int8__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int8__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint16__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint16__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__init(rosidl_runtime_c__uint16__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint16__Sequence__init$descriptor() {
        return rosidl_runtime_c__uint16__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__init(rosidl_runtime_c__uint16__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint16__Sequence__init$handle() {
        return rosidl_runtime_c__uint16__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__init(rosidl_runtime_c__uint16__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__uint16__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__uint16__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint16__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint16__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint16__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint16__Sequence__fini(rosidl_runtime_c__uint16__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint16__Sequence__fini$descriptor() {
        return rosidl_runtime_c__uint16__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint16__Sequence__fini(rosidl_runtime_c__uint16__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint16__Sequence__fini$handle() {
        return rosidl_runtime_c__uint16__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint16__Sequence__fini(rosidl_runtime_c__uint16__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__uint16__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__uint16__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint16__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint16__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint16__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__are_equal(const rosidl_runtime_c__uint16__Sequence *lhs, const rosidl_runtime_c__uint16__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint16__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__uint16__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__are_equal(const rosidl_runtime_c__uint16__Sequence *lhs, const rosidl_runtime_c__uint16__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint16__Sequence__are_equal$handle() {
        return rosidl_runtime_c__uint16__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__are_equal(const rosidl_runtime_c__uint16__Sequence *lhs, const rosidl_runtime_c__uint16__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__uint16__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__uint16__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint16__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint16__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint16__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__copy(const rosidl_runtime_c__uint16__Sequence *input, rosidl_runtime_c__uint16__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint16__Sequence__copy$descriptor() {
        return rosidl_runtime_c__uint16__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__copy(const rosidl_runtime_c__uint16__Sequence *input, rosidl_runtime_c__uint16__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint16__Sequence__copy$handle() {
        return rosidl_runtime_c__uint16__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint16__Sequence__copy(const rosidl_runtime_c__uint16__Sequence *input, rosidl_runtime_c__uint16__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__uint16__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__uint16__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint16__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int16__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int16__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__init(rosidl_runtime_c__int16__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int16__Sequence__init$descriptor() {
        return rosidl_runtime_c__int16__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__init(rosidl_runtime_c__int16__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int16__Sequence__init$handle() {
        return rosidl_runtime_c__int16__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__init(rosidl_runtime_c__int16__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__int16__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__int16__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int16__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int16__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int16__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int16__Sequence__fini(rosidl_runtime_c__int16__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int16__Sequence__fini$descriptor() {
        return rosidl_runtime_c__int16__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int16__Sequence__fini(rosidl_runtime_c__int16__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int16__Sequence__fini$handle() {
        return rosidl_runtime_c__int16__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__int16__Sequence__fini(rosidl_runtime_c__int16__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__int16__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__int16__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int16__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int16__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int16__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__are_equal(const rosidl_runtime_c__int16__Sequence *lhs, const rosidl_runtime_c__int16__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int16__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__int16__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__are_equal(const rosidl_runtime_c__int16__Sequence *lhs, const rosidl_runtime_c__int16__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int16__Sequence__are_equal$handle() {
        return rosidl_runtime_c__int16__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__are_equal(const rosidl_runtime_c__int16__Sequence *lhs, const rosidl_runtime_c__int16__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__int16__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__int16__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int16__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int16__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int16__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__copy(const rosidl_runtime_c__int16__Sequence *input, rosidl_runtime_c__int16__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int16__Sequence__copy$descriptor() {
        return rosidl_runtime_c__int16__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__copy(const rosidl_runtime_c__int16__Sequence *input, rosidl_runtime_c__int16__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int16__Sequence__copy$handle() {
        return rosidl_runtime_c__int16__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int16__Sequence__copy(const rosidl_runtime_c__int16__Sequence *input, rosidl_runtime_c__int16__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__int16__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__int16__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int16__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint32__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint32__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__init(rosidl_runtime_c__uint32__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint32__Sequence__init$descriptor() {
        return rosidl_runtime_c__uint32__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__init(rosidl_runtime_c__uint32__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint32__Sequence__init$handle() {
        return rosidl_runtime_c__uint32__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__init(rosidl_runtime_c__uint32__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__uint32__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__uint32__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint32__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint32__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint32__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint32__Sequence__fini(rosidl_runtime_c__uint32__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint32__Sequence__fini$descriptor() {
        return rosidl_runtime_c__uint32__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint32__Sequence__fini(rosidl_runtime_c__uint32__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint32__Sequence__fini$handle() {
        return rosidl_runtime_c__uint32__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint32__Sequence__fini(rosidl_runtime_c__uint32__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__uint32__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__uint32__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint32__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint32__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint32__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__are_equal(const rosidl_runtime_c__uint32__Sequence *lhs, const rosidl_runtime_c__uint32__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint32__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__uint32__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__are_equal(const rosidl_runtime_c__uint32__Sequence *lhs, const rosidl_runtime_c__uint32__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint32__Sequence__are_equal$handle() {
        return rosidl_runtime_c__uint32__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__are_equal(const rosidl_runtime_c__uint32__Sequence *lhs, const rosidl_runtime_c__uint32__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__uint32__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__uint32__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint32__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint32__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint32__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__copy(const rosidl_runtime_c__uint32__Sequence *input, rosidl_runtime_c__uint32__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint32__Sequence__copy$descriptor() {
        return rosidl_runtime_c__uint32__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__copy(const rosidl_runtime_c__uint32__Sequence *input, rosidl_runtime_c__uint32__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint32__Sequence__copy$handle() {
        return rosidl_runtime_c__uint32__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint32__Sequence__copy(const rosidl_runtime_c__uint32__Sequence *input, rosidl_runtime_c__uint32__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__uint32__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__uint32__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint32__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int32__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int32__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__init(rosidl_runtime_c__int32__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int32__Sequence__init$descriptor() {
        return rosidl_runtime_c__int32__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__init(rosidl_runtime_c__int32__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int32__Sequence__init$handle() {
        return rosidl_runtime_c__int32__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__init(rosidl_runtime_c__int32__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__int32__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__int32__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int32__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int32__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int32__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int32__Sequence__fini(rosidl_runtime_c__int32__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int32__Sequence__fini$descriptor() {
        return rosidl_runtime_c__int32__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int32__Sequence__fini(rosidl_runtime_c__int32__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int32__Sequence__fini$handle() {
        return rosidl_runtime_c__int32__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__int32__Sequence__fini(rosidl_runtime_c__int32__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__int32__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__int32__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int32__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int32__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int32__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__are_equal(const rosidl_runtime_c__int32__Sequence *lhs, const rosidl_runtime_c__int32__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int32__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__int32__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__are_equal(const rosidl_runtime_c__int32__Sequence *lhs, const rosidl_runtime_c__int32__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int32__Sequence__are_equal$handle() {
        return rosidl_runtime_c__int32__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__are_equal(const rosidl_runtime_c__int32__Sequence *lhs, const rosidl_runtime_c__int32__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__int32__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__int32__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int32__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int32__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int32__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__copy(const rosidl_runtime_c__int32__Sequence *input, rosidl_runtime_c__int32__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int32__Sequence__copy$descriptor() {
        return rosidl_runtime_c__int32__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__copy(const rosidl_runtime_c__int32__Sequence *input, rosidl_runtime_c__int32__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int32__Sequence__copy$handle() {
        return rosidl_runtime_c__int32__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int32__Sequence__copy(const rosidl_runtime_c__int32__Sequence *input, rosidl_runtime_c__int32__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__int32__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__int32__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int32__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint64__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint64__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__init(rosidl_runtime_c__uint64__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint64__Sequence__init$descriptor() {
        return rosidl_runtime_c__uint64__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__init(rosidl_runtime_c__uint64__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint64__Sequence__init$handle() {
        return rosidl_runtime_c__uint64__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__init(rosidl_runtime_c__uint64__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__uint64__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__uint64__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint64__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint64__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint64__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint64__Sequence__fini(rosidl_runtime_c__uint64__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint64__Sequence__fini$descriptor() {
        return rosidl_runtime_c__uint64__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint64__Sequence__fini(rosidl_runtime_c__uint64__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint64__Sequence__fini$handle() {
        return rosidl_runtime_c__uint64__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__uint64__Sequence__fini(rosidl_runtime_c__uint64__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__uint64__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__uint64__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint64__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint64__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint64__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__are_equal(const rosidl_runtime_c__uint64__Sequence *lhs, const rosidl_runtime_c__uint64__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint64__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__uint64__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__are_equal(const rosidl_runtime_c__uint64__Sequence *lhs, const rosidl_runtime_c__uint64__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint64__Sequence__are_equal$handle() {
        return rosidl_runtime_c__uint64__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__are_equal(const rosidl_runtime_c__uint64__Sequence *lhs, const rosidl_runtime_c__uint64__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__uint64__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__uint64__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint64__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__uint64__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__uint64__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__copy(const rosidl_runtime_c__uint64__Sequence *input, rosidl_runtime_c__uint64__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__uint64__Sequence__copy$descriptor() {
        return rosidl_runtime_c__uint64__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__copy(const rosidl_runtime_c__uint64__Sequence *input, rosidl_runtime_c__uint64__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__uint64__Sequence__copy$handle() {
        return rosidl_runtime_c__uint64__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__uint64__Sequence__copy(const rosidl_runtime_c__uint64__Sequence *input, rosidl_runtime_c__uint64__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__uint64__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__uint64__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__uint64__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int64__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int64__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__init(rosidl_runtime_c__int64__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int64__Sequence__init$descriptor() {
        return rosidl_runtime_c__int64__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__init(rosidl_runtime_c__int64__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int64__Sequence__init$handle() {
        return rosidl_runtime_c__int64__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__init(rosidl_runtime_c__int64__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__int64__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__int64__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int64__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int64__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int64__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int64__Sequence__fini(rosidl_runtime_c__int64__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int64__Sequence__fini$descriptor() {
        return rosidl_runtime_c__int64__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__int64__Sequence__fini(rosidl_runtime_c__int64__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int64__Sequence__fini$handle() {
        return rosidl_runtime_c__int64__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__int64__Sequence__fini(rosidl_runtime_c__int64__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__int64__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__int64__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int64__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int64__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int64__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__are_equal(const rosidl_runtime_c__int64__Sequence *lhs, const rosidl_runtime_c__int64__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int64__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__int64__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__are_equal(const rosidl_runtime_c__int64__Sequence *lhs, const rosidl_runtime_c__int64__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int64__Sequence__are_equal$handle() {
        return rosidl_runtime_c__int64__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__are_equal(const rosidl_runtime_c__int64__Sequence *lhs, const rosidl_runtime_c__int64__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__int64__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__int64__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int64__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__int64__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__int64__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__copy(const rosidl_runtime_c__int64__Sequence *input, rosidl_runtime_c__int64__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__int64__Sequence__copy$descriptor() {
        return rosidl_runtime_c__int64__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__copy(const rosidl_runtime_c__int64__Sequence *input, rosidl_runtime_c__int64__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__int64__Sequence__copy$handle() {
        return rosidl_runtime_c__int64__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__int64__Sequence__copy(const rosidl_runtime_c__int64__Sequence *input, rosidl_runtime_c__int64__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__int64__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__int64__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__int64__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__bool__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__bool__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__init(rosidl_runtime_c__boolean__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__bool__Sequence__init$descriptor() {
        return rosidl_runtime_c__bool__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__init(rosidl_runtime_c__boolean__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__bool__Sequence__init$handle() {
        return rosidl_runtime_c__bool__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__init(rosidl_runtime_c__boolean__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__bool__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__bool__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__bool__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__bool__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__bool__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__bool__Sequence__fini(rosidl_runtime_c__boolean__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__bool__Sequence__fini$descriptor() {
        return rosidl_runtime_c__bool__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__bool__Sequence__fini(rosidl_runtime_c__boolean__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__bool__Sequence__fini$handle() {
        return rosidl_runtime_c__bool__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__bool__Sequence__fini(rosidl_runtime_c__boolean__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__bool__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__bool__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__bool__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__bool__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__bool__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__are_equal(const rosidl_runtime_c__boolean__Sequence *lhs, const rosidl_runtime_c__boolean__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__bool__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__bool__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__are_equal(const rosidl_runtime_c__boolean__Sequence *lhs, const rosidl_runtime_c__boolean__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__bool__Sequence__are_equal$handle() {
        return rosidl_runtime_c__bool__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__are_equal(const rosidl_runtime_c__boolean__Sequence *lhs, const rosidl_runtime_c__boolean__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__bool__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__bool__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__bool__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__bool__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__bool__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__copy(const rosidl_runtime_c__boolean__Sequence *input, rosidl_runtime_c__boolean__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__bool__Sequence__copy$descriptor() {
        return rosidl_runtime_c__bool__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__copy(const rosidl_runtime_c__boolean__Sequence *input, rosidl_runtime_c__boolean__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__bool__Sequence__copy$handle() {
        return rosidl_runtime_c__bool__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__bool__Sequence__copy(const rosidl_runtime_c__boolean__Sequence *input, rosidl_runtime_c__boolean__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__bool__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__bool__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__bool__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__byte__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__byte__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__init(rosidl_runtime_c__octet__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__byte__Sequence__init$descriptor() {
        return rosidl_runtime_c__byte__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__init(rosidl_runtime_c__octet__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__byte__Sequence__init$handle() {
        return rosidl_runtime_c__byte__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__init(rosidl_runtime_c__octet__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__byte__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__byte__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__byte__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__byte__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__byte__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__byte__Sequence__fini(rosidl_runtime_c__octet__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__byte__Sequence__fini$descriptor() {
        return rosidl_runtime_c__byte__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__byte__Sequence__fini(rosidl_runtime_c__octet__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__byte__Sequence__fini$handle() {
        return rosidl_runtime_c__byte__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__byte__Sequence__fini(rosidl_runtime_c__octet__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__byte__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__byte__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__byte__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__byte__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__byte__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__are_equal(const rosidl_runtime_c__octet__Sequence *lhs, const rosidl_runtime_c__octet__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__byte__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__byte__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__are_equal(const rosidl_runtime_c__octet__Sequence *lhs, const rosidl_runtime_c__octet__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__byte__Sequence__are_equal$handle() {
        return rosidl_runtime_c__byte__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__are_equal(const rosidl_runtime_c__octet__Sequence *lhs, const rosidl_runtime_c__octet__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__byte__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__byte__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__byte__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__byte__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__byte__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__copy(const rosidl_runtime_c__octet__Sequence *input, rosidl_runtime_c__octet__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__byte__Sequence__copy$descriptor() {
        return rosidl_runtime_c__byte__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__copy(const rosidl_runtime_c__octet__Sequence *input, rosidl_runtime_c__octet__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__byte__Sequence__copy$handle() {
        return rosidl_runtime_c__byte__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__byte__Sequence__copy(const rosidl_runtime_c__octet__Sequence *input, rosidl_runtime_c__octet__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__byte__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__byte__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__byte__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float32__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float32__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__init(rosidl_runtime_c__float__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float32__Sequence__init$descriptor() {
        return rosidl_runtime_c__float32__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__init(rosidl_runtime_c__float__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float32__Sequence__init$handle() {
        return rosidl_runtime_c__float32__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__init(rosidl_runtime_c__float__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__float32__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__float32__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float32__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float32__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float32__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__float32__Sequence__fini(rosidl_runtime_c__float__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float32__Sequence__fini$descriptor() {
        return rosidl_runtime_c__float32__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__float32__Sequence__fini(rosidl_runtime_c__float__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float32__Sequence__fini$handle() {
        return rosidl_runtime_c__float32__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__float32__Sequence__fini(rosidl_runtime_c__float__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__float32__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__float32__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float32__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float32__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float32__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__are_equal(const rosidl_runtime_c__float__Sequence *lhs, const rosidl_runtime_c__float__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float32__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__float32__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__are_equal(const rosidl_runtime_c__float__Sequence *lhs, const rosidl_runtime_c__float__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float32__Sequence__are_equal$handle() {
        return rosidl_runtime_c__float32__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__are_equal(const rosidl_runtime_c__float__Sequence *lhs, const rosidl_runtime_c__float__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__float32__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__float32__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float32__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float32__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float32__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__copy(const rosidl_runtime_c__float__Sequence *input, rosidl_runtime_c__float__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float32__Sequence__copy$descriptor() {
        return rosidl_runtime_c__float32__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__copy(const rosidl_runtime_c__float__Sequence *input, rosidl_runtime_c__float__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float32__Sequence__copy$handle() {
        return rosidl_runtime_c__float32__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float32__Sequence__copy(const rosidl_runtime_c__float__Sequence *input, rosidl_runtime_c__float__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__float32__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__float32__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float32__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float64__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float64__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__init(rosidl_runtime_c__double__Sequence *sequence, size_t size)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float64__Sequence__init$descriptor() {
        return rosidl_runtime_c__float64__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__init(rosidl_runtime_c__double__Sequence *sequence, size_t size)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float64__Sequence__init$handle() {
        return rosidl_runtime_c__float64__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__init(rosidl_runtime_c__double__Sequence *sequence, size_t size)
     * }
     */
    public static boolean rosidl_runtime_c__float64__Sequence__init(MemorySegment sequence, long size) {
        var mh$ = rosidl_runtime_c__float64__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float64__Sequence__init", sequence, size);
            }
            return (boolean)mh$.invokeExact(sequence, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float64__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float64__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__float64__Sequence__fini(rosidl_runtime_c__double__Sequence *sequence)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float64__Sequence__fini$descriptor() {
        return rosidl_runtime_c__float64__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rosidl_runtime_c__float64__Sequence__fini(rosidl_runtime_c__double__Sequence *sequence)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float64__Sequence__fini$handle() {
        return rosidl_runtime_c__float64__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rosidl_runtime_c__float64__Sequence__fini(rosidl_runtime_c__double__Sequence *sequence)
     * }
     */
    public static void rosidl_runtime_c__float64__Sequence__fini(MemorySegment sequence) {
        var mh$ = rosidl_runtime_c__float64__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float64__Sequence__fini", sequence);
            }
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float64__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float64__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__are_equal(const rosidl_runtime_c__double__Sequence *lhs, const rosidl_runtime_c__double__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float64__Sequence__are_equal$descriptor() {
        return rosidl_runtime_c__float64__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__are_equal(const rosidl_runtime_c__double__Sequence *lhs, const rosidl_runtime_c__double__Sequence *rhs)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float64__Sequence__are_equal$handle() {
        return rosidl_runtime_c__float64__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__are_equal(const rosidl_runtime_c__double__Sequence *lhs, const rosidl_runtime_c__double__Sequence *rhs)
     * }
     */
    public static boolean rosidl_runtime_c__float64__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = rosidl_runtime_c__float64__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float64__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rosidl_runtime_c__float64__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rosidl_runtime_c__float64__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__copy(const rosidl_runtime_c__double__Sequence *input, rosidl_runtime_c__double__Sequence *output)
     * }
     */
    public static FunctionDescriptor rosidl_runtime_c__float64__Sequence__copy$descriptor() {
        return rosidl_runtime_c__float64__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__copy(const rosidl_runtime_c__double__Sequence *input, rosidl_runtime_c__double__Sequence *output)
     * }
     */
    public static MethodHandle rosidl_runtime_c__float64__Sequence__copy$handle() {
        return rosidl_runtime_c__float64__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool rosidl_runtime_c__float64__Sequence__copy(const rosidl_runtime_c__double__Sequence *input, rosidl_runtime_c__double__Sequence *output)
     * }
     */
    public static boolean rosidl_runtime_c__float64__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = rosidl_runtime_c__float64__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rosidl_runtime_c__float64__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RCLC_PARAMETER_NOT_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum rclc_parameter_type_t.RCLC_PARAMETER_NOT_SET = 0
     * }
     */
    public static int RCLC_PARAMETER_NOT_SET() {
        return RCLC_PARAMETER_NOT_SET;
    }
    private static final int RCLC_PARAMETER_BOOL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum rclc_parameter_type_t.RCLC_PARAMETER_BOOL = 1
     * }
     */
    public static int RCLC_PARAMETER_BOOL() {
        return RCLC_PARAMETER_BOOL;
    }
    private static final int RCLC_PARAMETER_INT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum rclc_parameter_type_t.RCLC_PARAMETER_INT = 2
     * }
     */
    public static int RCLC_PARAMETER_INT() {
        return RCLC_PARAMETER_INT;
    }
    private static final int RCLC_PARAMETER_DOUBLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum rclc_parameter_type_t.RCLC_PARAMETER_DOUBLE = 3
     * }
     */
    public static int RCLC_PARAMETER_DOUBLE() {
        return RCLC_PARAMETER_DOUBLE;
    }

    private static class rclc_parameter_server_init_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_server_init_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_init_default(rclc_parameter_server_t *parameter_server, rcl_node_t *node)
     * }
     */
    public static FunctionDescriptor rclc_parameter_server_init_default$descriptor() {
        return rclc_parameter_server_init_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_init_default(rclc_parameter_server_t *parameter_server, rcl_node_t *node)
     * }
     */
    public static MethodHandle rclc_parameter_server_init_default$handle() {
        return rclc_parameter_server_init_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_init_default(rclc_parameter_server_t *parameter_server, rcl_node_t *node)
     * }
     */
    public static int rclc_parameter_server_init_default(MemorySegment parameter_server, MemorySegment node) {
        var mh$ = rclc_parameter_server_init_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_server_init_default", parameter_server, node);
            }
            return (int)mh$.invokeExact(parameter_server, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_server_init_with_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_server_init_with_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_init_with_option(rclc_parameter_server_t *parameter_server, rcl_node_t *node, const rclc_parameter_options_t *options)
     * }
     */
    public static FunctionDescriptor rclc_parameter_server_init_with_option$descriptor() {
        return rclc_parameter_server_init_with_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_init_with_option(rclc_parameter_server_t *parameter_server, rcl_node_t *node, const rclc_parameter_options_t *options)
     * }
     */
    public static MethodHandle rclc_parameter_server_init_with_option$handle() {
        return rclc_parameter_server_init_with_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_init_with_option(rclc_parameter_server_t *parameter_server, rcl_node_t *node, const rclc_parameter_options_t *options)
     * }
     */
    public static int rclc_parameter_server_init_with_option(MemorySegment parameter_server, MemorySegment node, MemorySegment options) {
        var mh$ = rclc_parameter_server_init_with_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_server_init_with_option", parameter_server, node, options);
            }
            return (int)mh$.invokeExact(parameter_server, node, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_server_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_server_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_fini(rclc_parameter_server_t *parameter_server, rcl_node_t *node)
     * }
     */
    public static FunctionDescriptor rclc_parameter_server_fini$descriptor() {
        return rclc_parameter_server_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_fini(rclc_parameter_server_t *parameter_server, rcl_node_t *node)
     * }
     */
    public static MethodHandle rclc_parameter_server_fini$handle() {
        return rclc_parameter_server_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_server_fini(rclc_parameter_server_t *parameter_server, rcl_node_t *node)
     * }
     */
    public static int rclc_parameter_server_fini(MemorySegment parameter_server, MemorySegment node) {
        var mh$ = rclc_parameter_server_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_server_fini", parameter_server, node);
            }
            return (int)mh$.invokeExact(parameter_server, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_parameter_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_parameter_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_parameter_server(rclc_executor_t *executor, rclc_parameter_server_t *parameter_server, rclc_parameter_callback_t on_modification)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_parameter_server$descriptor() {
        return rclc_executor_add_parameter_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_parameter_server(rclc_executor_t *executor, rclc_parameter_server_t *parameter_server, rclc_parameter_callback_t on_modification)
     * }
     */
    public static MethodHandle rclc_executor_add_parameter_server$handle() {
        return rclc_executor_add_parameter_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_parameter_server(rclc_executor_t *executor, rclc_parameter_server_t *parameter_server, rclc_parameter_callback_t on_modification)
     * }
     */
    public static int rclc_executor_add_parameter_server(MemorySegment executor, MemorySegment parameter_server, MemorySegment on_modification) {
        var mh$ = rclc_executor_add_parameter_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_parameter_server", executor, parameter_server, on_modification);
            }
            return (int)mh$.invokeExact(executor, parameter_server, on_modification);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_executor_add_parameter_server_with_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_executor_add_parameter_server_with_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_parameter_server_with_context(rclc_executor_t *executor, rclc_parameter_server_t *parameter_server, rclc_parameter_callback_t on_modification, void *context)
     * }
     */
    public static FunctionDescriptor rclc_executor_add_parameter_server_with_context$descriptor() {
        return rclc_executor_add_parameter_server_with_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_parameter_server_with_context(rclc_executor_t *executor, rclc_parameter_server_t *parameter_server, rclc_parameter_callback_t on_modification, void *context)
     * }
     */
    public static MethodHandle rclc_executor_add_parameter_server_with_context$handle() {
        return rclc_executor_add_parameter_server_with_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_executor_add_parameter_server_with_context(rclc_executor_t *executor, rclc_parameter_server_t *parameter_server, rclc_parameter_callback_t on_modification, void *context)
     * }
     */
    public static int rclc_executor_add_parameter_server_with_context(MemorySegment executor, MemorySegment parameter_server, MemorySegment on_modification, MemorySegment context) {
        var mh$ = rclc_executor_add_parameter_server_with_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_executor_add_parameter_server_with_context", executor, parameter_server, on_modification, context);
            }
            return (int)mh$.invokeExact(executor, parameter_server, on_modification, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_add_parameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_add_parameter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter(rclc_parameter_server_t *parameter_server, const char *parameter_name, rclc_parameter_type_t type)
     * }
     */
    public static FunctionDescriptor rclc_add_parameter$descriptor() {
        return rclc_add_parameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter(rclc_parameter_server_t *parameter_server, const char *parameter_name, rclc_parameter_type_t type)
     * }
     */
    public static MethodHandle rclc_add_parameter$handle() {
        return rclc_add_parameter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter(rclc_parameter_server_t *parameter_server, const char *parameter_name, rclc_parameter_type_t type)
     * }
     */
    public static int rclc_add_parameter(MemorySegment parameter_server, MemorySegment parameter_name, int type) {
        var mh$ = rclc_add_parameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_add_parameter", parameter_server, parameter_name, type);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_delete_parameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_delete_parameter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_delete_parameter(rclc_parameter_server_t *parameter_server, const char *parameter_name)
     * }
     */
    public static FunctionDescriptor rclc_delete_parameter$descriptor() {
        return rclc_delete_parameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_delete_parameter(rclc_parameter_server_t *parameter_server, const char *parameter_name)
     * }
     */
    public static MethodHandle rclc_delete_parameter$handle() {
        return rclc_delete_parameter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_delete_parameter(rclc_parameter_server_t *parameter_server, const char *parameter_name)
     * }
     */
    public static int rclc_delete_parameter(MemorySegment parameter_server, MemorySegment parameter_name) {
        var mh$ = rclc_delete_parameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_delete_parameter", parameter_server, parameter_name);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_set_bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_set_bool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_bool(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool value)
     * }
     */
    public static FunctionDescriptor rclc_parameter_set_bool$descriptor() {
        return rclc_parameter_set_bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_bool(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool value)
     * }
     */
    public static MethodHandle rclc_parameter_set_bool$handle() {
        return rclc_parameter_set_bool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_bool(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool value)
     * }
     */
    public static int rclc_parameter_set_bool(MemorySegment parameter_server, MemorySegment parameter_name, boolean value) {
        var mh$ = rclc_parameter_set_bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_set_bool", parameter_server, parameter_name, value);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_set_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_set_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_int(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t value)
     * }
     */
    public static FunctionDescriptor rclc_parameter_set_int$descriptor() {
        return rclc_parameter_set_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_int(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t value)
     * }
     */
    public static MethodHandle rclc_parameter_set_int$handle() {
        return rclc_parameter_set_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_int(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t value)
     * }
     */
    public static int rclc_parameter_set_int(MemorySegment parameter_server, MemorySegment parameter_name, long value) {
        var mh$ = rclc_parameter_set_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_set_int", parameter_server, parameter_name, value);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_set_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double value)
     * }
     */
    public static FunctionDescriptor rclc_parameter_set_double$descriptor() {
        return rclc_parameter_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double value)
     * }
     */
    public static MethodHandle rclc_parameter_set_double$handle() {
        return rclc_parameter_set_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_set_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double value)
     * }
     */
    public static int rclc_parameter_set_double(MemorySegment parameter_server, MemorySegment parameter_name, double value) {
        var mh$ = rclc_parameter_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_set_double", parameter_server, parameter_name, value);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_get_bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_get_bool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_bool(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool *output)
     * }
     */
    public static FunctionDescriptor rclc_parameter_get_bool$descriptor() {
        return rclc_parameter_get_bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_bool(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool *output)
     * }
     */
    public static MethodHandle rclc_parameter_get_bool$handle() {
        return rclc_parameter_get_bool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_bool(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool *output)
     * }
     */
    public static int rclc_parameter_get_bool(MemorySegment parameter_server, MemorySegment parameter_name, MemorySegment output) {
        var mh$ = rclc_parameter_get_bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_get_bool", parameter_server, parameter_name, output);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_get_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_get_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_int(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t *output)
     * }
     */
    public static FunctionDescriptor rclc_parameter_get_int$descriptor() {
        return rclc_parameter_get_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_int(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t *output)
     * }
     */
    public static MethodHandle rclc_parameter_get_int$handle() {
        return rclc_parameter_get_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_int(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t *output)
     * }
     */
    public static int rclc_parameter_get_int(MemorySegment parameter_server, MemorySegment parameter_name, MemorySegment output) {
        var mh$ = rclc_parameter_get_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_get_int", parameter_server, parameter_name, output);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_parameter_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_parameter_get_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double *output)
     * }
     */
    public static FunctionDescriptor rclc_parameter_get_double$descriptor() {
        return rclc_parameter_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double *output)
     * }
     */
    public static MethodHandle rclc_parameter_get_double$handle() {
        return rclc_parameter_get_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_parameter_get_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double *output)
     * }
     */
    public static int rclc_parameter_get_double(MemorySegment parameter_server, MemorySegment parameter_name, MemorySegment output) {
        var mh$ = rclc_parameter_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_parameter_get_double", parameter_server, parameter_name, output);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_add_parameter_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_add_parameter_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_description(rclc_parameter_server_t *parameter_server, const char *parameter_name, const char *parameter_description, const char *additional_constraints)
     * }
     */
    public static FunctionDescriptor rclc_add_parameter_description$descriptor() {
        return rclc_add_parameter_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_description(rclc_parameter_server_t *parameter_server, const char *parameter_name, const char *parameter_description, const char *additional_constraints)
     * }
     */
    public static MethodHandle rclc_add_parameter_description$handle() {
        return rclc_add_parameter_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_description(rclc_parameter_server_t *parameter_server, const char *parameter_name, const char *parameter_description, const char *additional_constraints)
     * }
     */
    public static int rclc_add_parameter_description(MemorySegment parameter_server, MemorySegment parameter_name, MemorySegment parameter_description, MemorySegment additional_constraints) {
        var mh$ = rclc_add_parameter_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_add_parameter_description", parameter_server, parameter_name, parameter_description, additional_constraints);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, parameter_description, additional_constraints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_set_parameter_read_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_set_parameter_read_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_set_parameter_read_only(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool read_only)
     * }
     */
    public static FunctionDescriptor rclc_set_parameter_read_only$descriptor() {
        return rclc_set_parameter_read_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_set_parameter_read_only(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool read_only)
     * }
     */
    public static MethodHandle rclc_set_parameter_read_only$handle() {
        return rclc_set_parameter_read_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_set_parameter_read_only(rclc_parameter_server_t *parameter_server, const char *parameter_name, bool read_only)
     * }
     */
    public static int rclc_set_parameter_read_only(MemorySegment parameter_server, MemorySegment parameter_name, boolean read_only) {
        var mh$ = rclc_set_parameter_read_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_set_parameter_read_only", parameter_server, parameter_name, read_only);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, read_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_add_parameter_constraint_integer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_LONG,
            gen_h.C_LONG,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_add_parameter_constraint_integer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_constraint_integer(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t from_value, int64_t to_value, uint64_t step)
     * }
     */
    public static FunctionDescriptor rclc_add_parameter_constraint_integer$descriptor() {
        return rclc_add_parameter_constraint_integer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_constraint_integer(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t from_value, int64_t to_value, uint64_t step)
     * }
     */
    public static MethodHandle rclc_add_parameter_constraint_integer$handle() {
        return rclc_add_parameter_constraint_integer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_constraint_integer(rclc_parameter_server_t *parameter_server, const char *parameter_name, int64_t from_value, int64_t to_value, uint64_t step)
     * }
     */
    public static int rclc_add_parameter_constraint_integer(MemorySegment parameter_server, MemorySegment parameter_name, long from_value, long to_value, long step) {
        var mh$ = rclc_add_parameter_constraint_integer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_add_parameter_constraint_integer", parameter_server, parameter_name, from_value, to_value, step);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, from_value, to_value, step);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_add_parameter_constraint_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_DOUBLE,
            gen_h.C_DOUBLE,
            gen_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_add_parameter_constraint_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_constraint_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double from_value, double to_value, double step)
     * }
     */
    public static FunctionDescriptor rclc_add_parameter_constraint_double$descriptor() {
        return rclc_add_parameter_constraint_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_constraint_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double from_value, double to_value, double step)
     * }
     */
    public static MethodHandle rclc_add_parameter_constraint_double$handle() {
        return rclc_add_parameter_constraint_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_add_parameter_constraint_double(rclc_parameter_server_t *parameter_server, const char *parameter_name, double from_value, double to_value, double step)
     * }
     */
    public static int rclc_add_parameter_constraint_double(MemorySegment parameter_server, MemorySegment parameter_name, double from_value, double to_value, double step) {
        var mh$ = rclc_add_parameter_constraint_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_add_parameter_constraint_double", parameter_server, parameter_name, from_value, to_value, step);
            }
            return (int)mh$.invokeExact(parameter_server, parameter_name, from_value, to_value, step);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__init(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__init$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__init(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__init$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__init(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Request__init(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__fini(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__fini$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__fini(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__fini$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__fini(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Request__fini(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request *lifecycle_msgs__srv__ChangeState_Request__create()
     * }
     */
    public static class lifecycle_msgs__srv__ChangeState_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private lifecycle_msgs__srv__ChangeState_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * lifecycle_msgs__srv__ChangeState_Request *lifecycle_msgs__srv__ChangeState_Request__create()
         * }
         */
        public static lifecycle_msgs__srv__ChangeState_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new lifecycle_msgs__srv__ChangeState_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("lifecycle_msgs__srv__ChangeState_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__destroy(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__destroy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__destroy(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__destroy$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__destroy(lifecycle_msgs__srv__ChangeState_Request *msg)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Request__destroy(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__are_equal(const lifecycle_msgs__srv__ChangeState_Request *lhs, const lifecycle_msgs__srv__ChangeState_Request *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__are_equal$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__are_equal(const lifecycle_msgs__srv__ChangeState_Request *lhs, const lifecycle_msgs__srv__ChangeState_Request *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__are_equal$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__are_equal(const lifecycle_msgs__srv__ChangeState_Request *lhs, const lifecycle_msgs__srv__ChangeState_Request *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__copy(const lifecycle_msgs__srv__ChangeState_Request *input, lifecycle_msgs__srv__ChangeState_Request *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__copy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__copy(const lifecycle_msgs__srv__ChangeState_Request *input, lifecycle_msgs__srv__ChangeState_Request *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__copy$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__copy(const lifecycle_msgs__srv__ChangeState_Request *input, lifecycle_msgs__srv__ChangeState_Request *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__init(lifecycle_msgs__srv__ChangeState_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__Sequence__init$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__init(lifecycle_msgs__srv__ChangeState_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__Sequence__init$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__init(lifecycle_msgs__srv__ChangeState_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__Sequence__fini(lifecycle_msgs__srv__ChangeState_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__Sequence__fini$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__Sequence__fini(lifecycle_msgs__srv__ChangeState_Request__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__Sequence__fini$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__Sequence__fini(lifecycle_msgs__srv__ChangeState_Request__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Request__Sequence__fini(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request__Sequence *lifecycle_msgs__srv__ChangeState_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__Sequence__create$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request__Sequence *lifecycle_msgs__srv__ChangeState_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__Sequence__create$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Request__Sequence *lifecycle_msgs__srv__ChangeState_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment lifecycle_msgs__srv__ChangeState_Request__Sequence__create(long size) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy(lifecycle_msgs__srv__ChangeState_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy(lifecycle_msgs__srv__ChangeState_Request__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy(lifecycle_msgs__srv__ChangeState_Request__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal(const lifecycle_msgs__srv__ChangeState_Request__Sequence *lhs, const lifecycle_msgs__srv__ChangeState_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal(const lifecycle_msgs__srv__ChangeState_Request__Sequence *lhs, const lifecycle_msgs__srv__ChangeState_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal(const lifecycle_msgs__srv__ChangeState_Request__Sequence *lhs, const lifecycle_msgs__srv__ChangeState_Request__Sequence *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__copy(const lifecycle_msgs__srv__ChangeState_Request__Sequence *input, lifecycle_msgs__srv__ChangeState_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Request__Sequence__copy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__copy(const lifecycle_msgs__srv__ChangeState_Request__Sequence *input, lifecycle_msgs__srv__ChangeState_Request__Sequence *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Request__Sequence__copy$handle() {
        return lifecycle_msgs__srv__ChangeState_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Request__Sequence__copy(const lifecycle_msgs__srv__ChangeState_Request__Sequence *input, lifecycle_msgs__srv__ChangeState_Request__Sequence *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__init(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__init$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__init(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__init$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__init(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Response__init(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__fini(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__fini$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__fini(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__fini$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__fini(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Response__fini(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response *lifecycle_msgs__srv__ChangeState_Response__create()
     * }
     */
    public static class lifecycle_msgs__srv__ChangeState_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private lifecycle_msgs__srv__ChangeState_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * lifecycle_msgs__srv__ChangeState_Response *lifecycle_msgs__srv__ChangeState_Response__create()
         * }
         */
        public static lifecycle_msgs__srv__ChangeState_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new lifecycle_msgs__srv__ChangeState_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("lifecycle_msgs__srv__ChangeState_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__destroy(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__destroy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__destroy(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__destroy$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__destroy(lifecycle_msgs__srv__ChangeState_Response *msg)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Response__destroy(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__are_equal(const lifecycle_msgs__srv__ChangeState_Response *lhs, const lifecycle_msgs__srv__ChangeState_Response *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__are_equal$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__are_equal(const lifecycle_msgs__srv__ChangeState_Response *lhs, const lifecycle_msgs__srv__ChangeState_Response *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__are_equal$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__are_equal(const lifecycle_msgs__srv__ChangeState_Response *lhs, const lifecycle_msgs__srv__ChangeState_Response *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__copy(const lifecycle_msgs__srv__ChangeState_Response *input, lifecycle_msgs__srv__ChangeState_Response *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__copy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__copy(const lifecycle_msgs__srv__ChangeState_Response *input, lifecycle_msgs__srv__ChangeState_Response *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__copy$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__copy(const lifecycle_msgs__srv__ChangeState_Response *input, lifecycle_msgs__srv__ChangeState_Response *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__init(lifecycle_msgs__srv__ChangeState_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__Sequence__init$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__init(lifecycle_msgs__srv__ChangeState_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__Sequence__init$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__init(lifecycle_msgs__srv__ChangeState_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__Sequence__fini(lifecycle_msgs__srv__ChangeState_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__Sequence__fini$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__Sequence__fini(lifecycle_msgs__srv__ChangeState_Response__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__Sequence__fini$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__Sequence__fini(lifecycle_msgs__srv__ChangeState_Response__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Response__Sequence__fini(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response__Sequence *lifecycle_msgs__srv__ChangeState_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__Sequence__create$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response__Sequence *lifecycle_msgs__srv__ChangeState_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__Sequence__create$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * lifecycle_msgs__srv__ChangeState_Response__Sequence *lifecycle_msgs__srv__ChangeState_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment lifecycle_msgs__srv__ChangeState_Response__Sequence__create(long size) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy(lifecycle_msgs__srv__ChangeState_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy(lifecycle_msgs__srv__ChangeState_Response__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy(lifecycle_msgs__srv__ChangeState_Response__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal(const lifecycle_msgs__srv__ChangeState_Response__Sequence *lhs, const lifecycle_msgs__srv__ChangeState_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal(const lifecycle_msgs__srv__ChangeState_Response__Sequence *lhs, const lifecycle_msgs__srv__ChangeState_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal(const lifecycle_msgs__srv__ChangeState_Response__Sequence *lhs, const lifecycle_msgs__srv__ChangeState_Response__Sequence *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__ChangeState_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__ChangeState_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__copy(const lifecycle_msgs__srv__ChangeState_Response__Sequence *input, lifecycle_msgs__srv__ChangeState_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__ChangeState_Response__Sequence__copy$descriptor() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__copy(const lifecycle_msgs__srv__ChangeState_Response__Sequence *input, lifecycle_msgs__srv__ChangeState_Response__Sequence *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__ChangeState_Response__Sequence__copy$handle() {
        return lifecycle_msgs__srv__ChangeState_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__ChangeState_Response__Sequence__copy(const lifecycle_msgs__srv__ChangeState_Response__Sequence *input, lifecycle_msgs__srv__ChangeState_Response__Sequence *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__ChangeState_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__ChangeState_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__ChangeState_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__ChangeState_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__init(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__init$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__init(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__init$handle() {
        return lifecycle_msgs__srv__GetState_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__init(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Request__init(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__fini(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__fini$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__fini(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__fini$handle() {
        return lifecycle_msgs__srv__GetState_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__fini(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Request__fini(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request *lifecycle_msgs__srv__GetState_Request__create()
     * }
     */
    public static class lifecycle_msgs__srv__GetState_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private lifecycle_msgs__srv__GetState_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * lifecycle_msgs__srv__GetState_Request *lifecycle_msgs__srv__GetState_Request__create()
         * }
         */
        public static lifecycle_msgs__srv__GetState_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new lifecycle_msgs__srv__GetState_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("lifecycle_msgs__srv__GetState_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__destroy(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__destroy$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__destroy(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__destroy$handle() {
        return lifecycle_msgs__srv__GetState_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__destroy(lifecycle_msgs__srv__GetState_Request *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Request__destroy(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__are_equal(const lifecycle_msgs__srv__GetState_Request *lhs, const lifecycle_msgs__srv__GetState_Request *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__are_equal(const lifecycle_msgs__srv__GetState_Request *lhs, const lifecycle_msgs__srv__GetState_Request *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__are_equal$handle() {
        return lifecycle_msgs__srv__GetState_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__are_equal(const lifecycle_msgs__srv__GetState_Request *lhs, const lifecycle_msgs__srv__GetState_Request *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__copy(const lifecycle_msgs__srv__GetState_Request *input, lifecycle_msgs__srv__GetState_Request *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__copy$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__copy(const lifecycle_msgs__srv__GetState_Request *input, lifecycle_msgs__srv__GetState_Request *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__copy$handle() {
        return lifecycle_msgs__srv__GetState_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__copy(const lifecycle_msgs__srv__GetState_Request *input, lifecycle_msgs__srv__GetState_Request *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__init(lifecycle_msgs__srv__GetState_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__Sequence__init$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__init(lifecycle_msgs__srv__GetState_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__Sequence__init$handle() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__init(lifecycle_msgs__srv__GetState_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__Sequence__fini(lifecycle_msgs__srv__GetState_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__Sequence__fini$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__Sequence__fini(lifecycle_msgs__srv__GetState_Request__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__Sequence__fini$handle() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__Sequence__fini(lifecycle_msgs__srv__GetState_Request__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Request__Sequence__fini(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request__Sequence *lifecycle_msgs__srv__GetState_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__Sequence__create$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request__Sequence *lifecycle_msgs__srv__GetState_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__Sequence__create$handle() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Request__Sequence *lifecycle_msgs__srv__GetState_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment lifecycle_msgs__srv__GetState_Request__Sequence__create(long size) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__Sequence__destroy(lifecycle_msgs__srv__GetState_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__Sequence__destroy$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__Sequence__destroy(lifecycle_msgs__srv__GetState_Request__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__Sequence__destroy$handle() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Request__Sequence__destroy(lifecycle_msgs__srv__GetState_Request__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__are_equal(const lifecycle_msgs__srv__GetState_Request__Sequence *lhs, const lifecycle_msgs__srv__GetState_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__Sequence__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__are_equal(const lifecycle_msgs__srv__GetState_Request__Sequence *lhs, const lifecycle_msgs__srv__GetState_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__Sequence__are_equal$handle() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__are_equal(const lifecycle_msgs__srv__GetState_Request__Sequence *lhs, const lifecycle_msgs__srv__GetState_Request__Sequence *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__copy(const lifecycle_msgs__srv__GetState_Request__Sequence *input, lifecycle_msgs__srv__GetState_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Request__Sequence__copy$descriptor() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__copy(const lifecycle_msgs__srv__GetState_Request__Sequence *input, lifecycle_msgs__srv__GetState_Request__Sequence *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Request__Sequence__copy$handle() {
        return lifecycle_msgs__srv__GetState_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Request__Sequence__copy(const lifecycle_msgs__srv__GetState_Request__Sequence *input, lifecycle_msgs__srv__GetState_Request__Sequence *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetState_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__init(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__init$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__init(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__init$handle() {
        return lifecycle_msgs__srv__GetState_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__init(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Response__init(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__fini(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__fini$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__fini(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__fini$handle() {
        return lifecycle_msgs__srv__GetState_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__fini(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Response__fini(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response *lifecycle_msgs__srv__GetState_Response__create()
     * }
     */
    public static class lifecycle_msgs__srv__GetState_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private lifecycle_msgs__srv__GetState_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * lifecycle_msgs__srv__GetState_Response *lifecycle_msgs__srv__GetState_Response__create()
         * }
         */
        public static lifecycle_msgs__srv__GetState_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new lifecycle_msgs__srv__GetState_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("lifecycle_msgs__srv__GetState_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__destroy(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__destroy$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__destroy(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__destroy$handle() {
        return lifecycle_msgs__srv__GetState_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__destroy(lifecycle_msgs__srv__GetState_Response *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Response__destroy(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__are_equal(const lifecycle_msgs__srv__GetState_Response *lhs, const lifecycle_msgs__srv__GetState_Response *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__are_equal(const lifecycle_msgs__srv__GetState_Response *lhs, const lifecycle_msgs__srv__GetState_Response *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__are_equal$handle() {
        return lifecycle_msgs__srv__GetState_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__are_equal(const lifecycle_msgs__srv__GetState_Response *lhs, const lifecycle_msgs__srv__GetState_Response *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__copy(const lifecycle_msgs__srv__GetState_Response *input, lifecycle_msgs__srv__GetState_Response *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__copy$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__copy(const lifecycle_msgs__srv__GetState_Response *input, lifecycle_msgs__srv__GetState_Response *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__copy$handle() {
        return lifecycle_msgs__srv__GetState_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__copy(const lifecycle_msgs__srv__GetState_Response *input, lifecycle_msgs__srv__GetState_Response *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__init(lifecycle_msgs__srv__GetState_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__Sequence__init$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__init(lifecycle_msgs__srv__GetState_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__Sequence__init$handle() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__init(lifecycle_msgs__srv__GetState_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__Sequence__fini(lifecycle_msgs__srv__GetState_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__Sequence__fini$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__Sequence__fini(lifecycle_msgs__srv__GetState_Response__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__Sequence__fini$handle() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__Sequence__fini(lifecycle_msgs__srv__GetState_Response__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Response__Sequence__fini(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response__Sequence *lifecycle_msgs__srv__GetState_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__Sequence__create$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response__Sequence *lifecycle_msgs__srv__GetState_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__Sequence__create$handle() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetState_Response__Sequence *lifecycle_msgs__srv__GetState_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment lifecycle_msgs__srv__GetState_Response__Sequence__create(long size) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__Sequence__destroy(lifecycle_msgs__srv__GetState_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__Sequence__destroy$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__Sequence__destroy(lifecycle_msgs__srv__GetState_Response__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__Sequence__destroy$handle() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetState_Response__Sequence__destroy(lifecycle_msgs__srv__GetState_Response__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetState_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__are_equal(const lifecycle_msgs__srv__GetState_Response__Sequence *lhs, const lifecycle_msgs__srv__GetState_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__Sequence__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__are_equal(const lifecycle_msgs__srv__GetState_Response__Sequence *lhs, const lifecycle_msgs__srv__GetState_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__Sequence__are_equal$handle() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__are_equal(const lifecycle_msgs__srv__GetState_Response__Sequence *lhs, const lifecycle_msgs__srv__GetState_Response__Sequence *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetState_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetState_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__copy(const lifecycle_msgs__srv__GetState_Response__Sequence *input, lifecycle_msgs__srv__GetState_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetState_Response__Sequence__copy$descriptor() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__copy(const lifecycle_msgs__srv__GetState_Response__Sequence *input, lifecycle_msgs__srv__GetState_Response__Sequence *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetState_Response__Sequence__copy$handle() {
        return lifecycle_msgs__srv__GetState_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetState_Response__Sequence__copy(const lifecycle_msgs__srv__GetState_Response__Sequence *input, lifecycle_msgs__srv__GetState_Response__Sequence *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetState_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetState_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetState_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__init(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__init$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__init(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__init$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__init(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Request__init(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__fini(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__fini$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__fini(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__fini$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__fini(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Request__fini(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request *lifecycle_msgs__srv__GetAvailableStates_Request__create()
     * }
     */
    public static class lifecycle_msgs__srv__GetAvailableStates_Request__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private lifecycle_msgs__srv__GetAvailableStates_Request__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * lifecycle_msgs__srv__GetAvailableStates_Request *lifecycle_msgs__srv__GetAvailableStates_Request__create()
         * }
         */
        public static lifecycle_msgs__srv__GetAvailableStates_Request__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new lifecycle_msgs__srv__GetAvailableStates_Request__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__destroy(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__destroy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__destroy(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__destroy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__destroy(lifecycle_msgs__srv__GetAvailableStates_Request *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Request__destroy(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Request *lhs, const lifecycle_msgs__srv__GetAvailableStates_Request *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Request *lhs, const lifecycle_msgs__srv__GetAvailableStates_Request *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__are_equal$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Request *lhs, const lifecycle_msgs__srv__GetAvailableStates_Request *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Request__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__copy(const lifecycle_msgs__srv__GetAvailableStates_Request *input, lifecycle_msgs__srv__GetAvailableStates_Request *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__copy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__copy(const lifecycle_msgs__srv__GetAvailableStates_Request *input, lifecycle_msgs__srv__GetAvailableStates_Request *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__copy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__copy(const lifecycle_msgs__srv__GetAvailableStates_Request *input, lifecycle_msgs__srv__GetAvailableStates_Request *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Request__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array, size_t size)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init(MemorySegment array, long size) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create(long size) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy(lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *lhs, const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *lhs, const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *lhs, const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy(const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *input, lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy(const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *input, lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy(const lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *input, lifecycle_msgs__srv__GetAvailableStates_Request__Sequence *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Request__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__init(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__init$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__init(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__init$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__init(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Response__init(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__init", msg);
            }
            return (boolean)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__fini(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__fini$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__fini(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__fini$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__fini(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Response__fini(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__fini", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response *lifecycle_msgs__srv__GetAvailableStates_Response__create()
     * }
     */
    public static class lifecycle_msgs__srv__GetAvailableStates_Response__create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private lifecycle_msgs__srv__GetAvailableStates_Response__create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * lifecycle_msgs__srv__GetAvailableStates_Response *lifecycle_msgs__srv__GetAvailableStates_Response__create()
         * }
         */
        public static lifecycle_msgs__srv__GetAvailableStates_Response__create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new lifecycle_msgs__srv__GetAvailableStates_Response__create(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__destroy(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__destroy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__destroy(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__destroy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__destroy(lifecycle_msgs__srv__GetAvailableStates_Response *msg)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Response__destroy(MemorySegment msg) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__destroy", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Response *lhs, const lifecycle_msgs__srv__GetAvailableStates_Response *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Response *lhs, const lifecycle_msgs__srv__GetAvailableStates_Response *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__are_equal$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Response *lhs, const lifecycle_msgs__srv__GetAvailableStates_Response *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Response__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__copy(const lifecycle_msgs__srv__GetAvailableStates_Response *input, lifecycle_msgs__srv__GetAvailableStates_Response *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__copy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__copy(const lifecycle_msgs__srv__GetAvailableStates_Response *input, lifecycle_msgs__srv__GetAvailableStates_Response *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__copy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__copy(const lifecycle_msgs__srv__GetAvailableStates_Response *input, lifecycle_msgs__srv__GetAvailableStates_Response *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Response__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array, size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array, size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array, size_t size)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init(MemorySegment array, long size) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__init", array, size);
            }
            return (boolean)mh$.invokeExact(array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__fini", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_POINTER,
            gen_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create(size_t size)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create(size_t size)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create(size_t size)
     * }
     */
    public static MemorySegment lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create(long size) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__create", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy(lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *array)
     * }
     */
    public static void lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy(MemorySegment array) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__destroy", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *lhs, const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *rhs)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *lhs, const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *rhs)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal(const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *lhs, const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *rhs)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__are_equal", lhs, rhs);
            }
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_BOOL,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy(const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *input, lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *output)
     * }
     */
    public static FunctionDescriptor lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy$descriptor() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy(const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *input, lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *output)
     * }
     */
    public static MethodHandle lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy$handle() {
        return lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy(const lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *input, lifecycle_msgs__srv__GetAvailableStates_Response__Sequence *output)
     * }
     */
    public static boolean lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy(MemorySegment input, MemorySegment output) {
        var mh$ = lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lifecycle_msgs__srv__GetAvailableStates_Response__Sequence__copy", input, output);
            }
            return (boolean)mh$.invokeExact(input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response()
     * }
     */
    public static class rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_message_type_support_t *rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response()
         * }
         */
        public static rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Response", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates()
     * }
     */
    public static class rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                gen_h.C_POINTER        );
        private static final MemorySegment ADDR = gen_h.findOrThrow("rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const rosidl_service_type_support_t *rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates()
         * }
         */
        public static rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class rclc_lifecycle_init_get_state_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_init_get_state_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_get_state_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_init_get_state_server$descriptor() {
        return rclc_lifecycle_init_get_state_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_get_state_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static MethodHandle rclc_lifecycle_init_get_state_server$handle() {
        return rclc_lifecycle_init_get_state_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_get_state_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static int rclc_lifecycle_init_get_state_server(MemorySegment context, MemorySegment executor) {
        var mh$ = rclc_lifecycle_init_get_state_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_init_get_state_server", context, executor);
            }
            return (int)mh$.invokeExact(context, executor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_init_get_available_states_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_init_get_available_states_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_get_available_states_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_init_get_available_states_server$descriptor() {
        return rclc_lifecycle_init_get_available_states_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_get_available_states_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static MethodHandle rclc_lifecycle_init_get_available_states_server$handle() {
        return rclc_lifecycle_init_get_available_states_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_get_available_states_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static int rclc_lifecycle_init_get_available_states_server(MemorySegment context, MemorySegment executor) {
        var mh$ = rclc_lifecycle_init_get_available_states_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_init_get_available_states_server", context, executor);
            }
            return (int)mh$.invokeExact(context, executor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_init_change_state_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_init_change_state_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_change_state_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_init_change_state_server$descriptor() {
        return rclc_lifecycle_init_change_state_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_change_state_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static MethodHandle rclc_lifecycle_init_change_state_server$handle() {
        return rclc_lifecycle_init_change_state_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_init_change_state_server(rclc_lifecycle_service_context_t *context, rclc_executor_t *executor)
     * }
     */
    public static int rclc_lifecycle_init_change_state_server(MemorySegment context, MemorySegment executor) {
        var mh$ = rclc_lifecycle_init_change_state_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_init_change_state_server", context, executor);
            }
            return (int)mh$.invokeExact(context, executor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_get_state_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_get_state_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rclc_lifecycle_get_state_callback(const void *req, void *res, void *context)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_get_state_callback$descriptor() {
        return rclc_lifecycle_get_state_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rclc_lifecycle_get_state_callback(const void *req, void *res, void *context)
     * }
     */
    public static MethodHandle rclc_lifecycle_get_state_callback$handle() {
        return rclc_lifecycle_get_state_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rclc_lifecycle_get_state_callback(const void *req, void *res, void *context)
     * }
     */
    public static void rclc_lifecycle_get_state_callback(MemorySegment req, MemorySegment res, MemorySegment context) {
        var mh$ = rclc_lifecycle_get_state_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_get_state_callback", req, res, context);
            }
            mh$.invokeExact(req, res, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_get_available_states_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_get_available_states_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rclc_lifecycle_get_available_states_callback(const void *req, void *res, void *context)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_get_available_states_callback$descriptor() {
        return rclc_lifecycle_get_available_states_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rclc_lifecycle_get_available_states_callback(const void *req, void *res, void *context)
     * }
     */
    public static MethodHandle rclc_lifecycle_get_available_states_callback$handle() {
        return rclc_lifecycle_get_available_states_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rclc_lifecycle_get_available_states_callback(const void *req, void *res, void *context)
     * }
     */
    public static void rclc_lifecycle_get_available_states_callback(MemorySegment req, MemorySegment res, MemorySegment context) {
        var mh$ = rclc_lifecycle_get_available_states_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_get_available_states_callback", req, res, context);
            }
            mh$.invokeExact(req, res, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_change_state_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_change_state_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rclc_lifecycle_change_state_callback(const void *req, void *res, void *context)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_change_state_callback$descriptor() {
        return rclc_lifecycle_change_state_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rclc_lifecycle_change_state_callback(const void *req, void *res, void *context)
     * }
     */
    public static MethodHandle rclc_lifecycle_change_state_callback$handle() {
        return rclc_lifecycle_change_state_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void rclc_lifecycle_change_state_callback(const void *req, void *res, void *context)
     * }
     */
    public static void rclc_lifecycle_change_state_callback(MemorySegment req, MemorySegment res, MemorySegment context) {
        var mh$ = rclc_lifecycle_change_state_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_change_state_callback", req, res, context);
            }
            mh$.invokeExact(req, res, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_make_node_a_lifecycle_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_POINTER,
            gen_h.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_make_node_a_lifecycle_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_make_node_a_lifecycle_node(rclc_lifecycle_node_t *lifecycle_node, rcl_node_t *node, rcl_lifecycle_state_machine_t *state_machine, rcl_allocator_t *allocator, bool enable_communication_interface)
     * }
     */
    public static FunctionDescriptor rclc_make_node_a_lifecycle_node$descriptor() {
        return rclc_make_node_a_lifecycle_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_make_node_a_lifecycle_node(rclc_lifecycle_node_t *lifecycle_node, rcl_node_t *node, rcl_lifecycle_state_machine_t *state_machine, rcl_allocator_t *allocator, bool enable_communication_interface)
     * }
     */
    public static MethodHandle rclc_make_node_a_lifecycle_node$handle() {
        return rclc_make_node_a_lifecycle_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_make_node_a_lifecycle_node(rclc_lifecycle_node_t *lifecycle_node, rcl_node_t *node, rcl_lifecycle_state_machine_t *state_machine, rcl_allocator_t *allocator, bool enable_communication_interface)
     * }
     */
    public static int rclc_make_node_a_lifecycle_node(MemorySegment lifecycle_node, MemorySegment node, MemorySegment state_machine, MemorySegment allocator, boolean enable_communication_interface) {
        var mh$ = rclc_make_node_a_lifecycle_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_make_node_a_lifecycle_node", lifecycle_node, node, state_machine, allocator, enable_communication_interface);
            }
            return (int)mh$.invokeExact(lifecycle_node, node, state_machine, allocator, enable_communication_interface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_change_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_change_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_change_state(rclc_lifecycle_node_t *lifecycle_node, unsigned int transition_id, bool publish_update)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_change_state$descriptor() {
        return rclc_lifecycle_change_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_change_state(rclc_lifecycle_node_t *lifecycle_node, unsigned int transition_id, bool publish_update)
     * }
     */
    public static MethodHandle rclc_lifecycle_change_state$handle() {
        return rclc_lifecycle_change_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_change_state(rclc_lifecycle_node_t *lifecycle_node, unsigned int transition_id, bool publish_update)
     * }
     */
    public static int rclc_lifecycle_change_state(MemorySegment lifecycle_node, int transition_id, boolean publish_update) {
        var mh$ = rclc_lifecycle_change_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_change_state", lifecycle_node, transition_id, publish_update);
            }
            return (int)mh$.invokeExact(lifecycle_node, transition_id, publish_update);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_register_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_register_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_callback(rclc_lifecycle_node_t *lifecycle_node, unsigned int goal_state, int (*cb)(void))
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_register_callback$descriptor() {
        return rclc_lifecycle_register_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_callback(rclc_lifecycle_node_t *lifecycle_node, unsigned int goal_state, int (*cb)(void))
     * }
     */
    public static MethodHandle rclc_lifecycle_register_callback$handle() {
        return rclc_lifecycle_register_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_callback(rclc_lifecycle_node_t *lifecycle_node, unsigned int goal_state, int (*cb)(void))
     * }
     */
    public static int rclc_lifecycle_register_callback(MemorySegment lifecycle_node, int goal_state, MemorySegment cb) {
        var mh$ = rclc_lifecycle_register_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_register_callback", lifecycle_node, goal_state, cb);
            }
            return (int)mh$.invokeExact(lifecycle_node, goal_state, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_register_on_configure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_register_on_configure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_configure(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_register_on_configure$descriptor() {
        return rclc_lifecycle_register_on_configure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_configure(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static MethodHandle rclc_lifecycle_register_on_configure$handle() {
        return rclc_lifecycle_register_on_configure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_configure(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static int rclc_lifecycle_register_on_configure(MemorySegment node, MemorySegment cb) {
        var mh$ = rclc_lifecycle_register_on_configure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_register_on_configure", node, cb);
            }
            return (int)mh$.invokeExact(node, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_register_on_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_register_on_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_activate(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_register_on_activate$descriptor() {
        return rclc_lifecycle_register_on_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_activate(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static MethodHandle rclc_lifecycle_register_on_activate$handle() {
        return rclc_lifecycle_register_on_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_activate(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static int rclc_lifecycle_register_on_activate(MemorySegment node, MemorySegment cb) {
        var mh$ = rclc_lifecycle_register_on_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_register_on_activate", node, cb);
            }
            return (int)mh$.invokeExact(node, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_register_on_deactivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_register_on_deactivate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_deactivate(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_register_on_deactivate$descriptor() {
        return rclc_lifecycle_register_on_deactivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_deactivate(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static MethodHandle rclc_lifecycle_register_on_deactivate$handle() {
        return rclc_lifecycle_register_on_deactivate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_deactivate(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static int rclc_lifecycle_register_on_deactivate(MemorySegment node, MemorySegment cb) {
        var mh$ = rclc_lifecycle_register_on_deactivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_register_on_deactivate", node, cb);
            }
            return (int)mh$.invokeExact(node, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_register_on_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_register_on_cleanup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_cleanup(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_register_on_cleanup$descriptor() {
        return rclc_lifecycle_register_on_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_cleanup(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static MethodHandle rclc_lifecycle_register_on_cleanup$handle() {
        return rclc_lifecycle_register_on_cleanup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_register_on_cleanup(rclc_lifecycle_node_t *node, int (*cb)(void))
     * }
     */
    public static int rclc_lifecycle_register_on_cleanup(MemorySegment node, MemorySegment cb) {
        var mh$ = rclc_lifecycle_register_on_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_register_on_cleanup", node, cb);
            }
            return (int)mh$.invokeExact(node, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_execute_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_execute_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_execute_callback(rclc_lifecycle_node_t *lifecycle_node, unsigned int transition_id)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_execute_callback$descriptor() {
        return rclc_lifecycle_execute_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_execute_callback(rclc_lifecycle_node_t *lifecycle_node, unsigned int transition_id)
     * }
     */
    public static MethodHandle rclc_lifecycle_execute_callback$handle() {
        return rclc_lifecycle_execute_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_execute_callback(rclc_lifecycle_node_t *lifecycle_node, unsigned int transition_id)
     * }
     */
    public static int rclc_lifecycle_execute_callback(MemorySegment lifecycle_node, int transition_id) {
        var mh$ = rclc_lifecycle_execute_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_execute_callback", lifecycle_node, transition_id);
            }
            return (int)mh$.invokeExact(lifecycle_node, transition_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rclc_lifecycle_node_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            gen_h.C_INT,
            gen_h.C_POINTER,
            gen_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    gen_h.findOrThrow("rclc_lifecycle_node_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_node_fini(rclc_lifecycle_node_t *node, rcl_allocator_t *allocator)
     * }
     */
    public static FunctionDescriptor rclc_lifecycle_node_fini$descriptor() {
        return rclc_lifecycle_node_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_node_fini(rclc_lifecycle_node_t *node, rcl_allocator_t *allocator)
     * }
     */
    public static MethodHandle rclc_lifecycle_node_fini$handle() {
        return rclc_lifecycle_node_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rcl_ret_t rclc_lifecycle_node_fini(rclc_lifecycle_node_t *node, rcl_allocator_t *allocator)
     * }
     */
    public static int rclc_lifecycle_node_fini(MemorySegment node, MemorySegment allocator) {
        var mh$ = rclc_lifecycle_node_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rclc_lifecycle_node_fini", node, allocator);
            }
            return (int)mh$.invokeExact(node, allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __WCHAR_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 4294967295
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN 0
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN 0
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 4294967295
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final long RMW_DEFAULT_DOMAIN_ID = -1L;
    /**
     * {@snippet lang=c :
     * #define RMW_DEFAULT_DOMAIN_ID -1
     * }
     */
    public static long RMW_DEFAULT_DOMAIN_ID() {
        return RMW_DEFAULT_DOMAIN_ID;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = gen_h.LIBRARY_ARENA.allocateFrom("/tmp");
        }
        return Holder.P_tmpdir;
    }
    private static final int __HAVE_FLOAT64X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return __HAVE_FLOAT64X;
    }
    private static final int __HAVE_FLOAT64X_LONG_DOUBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return __HAVE_FLOAT64X_LONG_DOUBLE;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final int __WCLONE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return __WCLONE;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int RCUTILS_FAULT_INJECTION_NEVER_FAIL = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define RCUTILS_FAULT_INJECTION_NEVER_FAIL -1
     * }
     */
    public static int RCUTILS_FAULT_INJECTION_NEVER_FAIL() {
        return RCUTILS_FAULT_INJECTION_NEVER_FAIL;
    }
    private static final int RCUTILS_ERROR_STATE_FILE_MAX_LENGTH = (int)229L;
    /**
     * {@snippet lang=c :
     * #define RCUTILS_ERROR_STATE_FILE_MAX_LENGTH 229
     * }
     */
    public static int RCUTILS_ERROR_STATE_FILE_MAX_LENGTH() {
        return RCUTILS_ERROR_STATE_FILE_MAX_LENGTH;
    }
    /**
     * {@snippet lang=c :
     * #define RCUTILS_LOGGING_SEPARATOR_STRING "."
     * }
     */
    public static MemorySegment RCUTILS_LOGGING_SEPARATOR_STRING() {
        class Holder {
            static final MemorySegment RCUTILS_LOGGING_SEPARATOR_STRING
                = gen_h.LIBRARY_ARENA.allocateFrom(".");
        }
        return Holder.RCUTILS_LOGGING_SEPARATOR_STRING;
    }
    private static final int RCUTILS_DEFAULT_LOGGER_DEFAULT_LEVEL = (int)20L;
    /**
     * {@snippet lang=c :
     * #define RCUTILS_DEFAULT_LOGGER_DEFAULT_LEVEL 20
     * }
     */
    public static int RCUTILS_DEFAULT_LOGGER_DEFAULT_LEVEL() {
        return RCUTILS_DEFAULT_LOGGER_DEFAULT_LEVEL;
    }
    private static final int RMW_GID_STORAGE_SIZE = (int)24L;
    /**
     * {@snippet lang=c :
     * #define RMW_GID_STORAGE_SIZE 24
     * }
     */
    public static int RMW_GID_STORAGE_SIZE() {
        return RMW_GID_STORAGE_SIZE;
    }
    /**
     * {@snippet lang=c :
     * #define RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE_DEPRECATED_MSG "RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE is deprecated. Use RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC if manually asserted liveliness is needed."
     * }
     */
    public static MemorySegment RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE_DEPRECATED_MSG() {
        class Holder {
            static final MemorySegment RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE_DEPRECATED_MSG
                = gen_h.LIBRARY_ARENA.allocateFrom("RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE is deprecated. Use RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC if manually asserted liveliness is needed.");
        }
        return Holder.RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE_DEPRECATED_MSG;
    }
    private static final long RMW_MESSAGE_INFO_SEQUENCE_NUMBER_UNSUPPORTED = -1L;
    /**
     * {@snippet lang=c :
     * #define RMW_MESSAGE_INFO_SEQUENCE_NUMBER_UNSUPPORTED -1
     * }
     */
    public static long RMW_MESSAGE_INFO_SEQUENCE_NUMBER_UNSUPPORTED() {
        return RMW_MESSAGE_INFO_SEQUENCE_NUMBER_UNSUPPORTED;
    }
    private static final int RCL_RET_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RCL_RET_OK 0
     * }
     */
    public static int RCL_RET_OK() {
        return RCL_RET_OK;
    }
    private static final int RCL_RET_ERROR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RCL_RET_ERROR 1
     * }
     */
    public static int RCL_RET_ERROR() {
        return RCL_RET_ERROR;
    }
    private static final int RCL_RET_TIMEOUT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RCL_RET_TIMEOUT 2
     * }
     */
    public static int RCL_RET_TIMEOUT() {
        return RCL_RET_TIMEOUT;
    }
    private static final int RCL_RET_BAD_ALLOC = (int)10L;
    /**
     * {@snippet lang=c :
     * #define RCL_RET_BAD_ALLOC 10
     * }
     */
    public static int RCL_RET_BAD_ALLOC() {
        return RCL_RET_BAD_ALLOC;
    }
    private static final int RCL_RET_INVALID_ARGUMENT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define RCL_RET_INVALID_ARGUMENT 11
     * }
     */
    public static int RCL_RET_INVALID_ARGUMENT() {
        return RCL_RET_INVALID_ARGUMENT;
    }
    private static final int RCL_RET_UNSUPPORTED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RCL_RET_UNSUPPORTED 3
     * }
     */
    public static int RCL_RET_UNSUPPORTED() {
        return RCL_RET_UNSUPPORTED;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_ROS_ARGS_FLAG "--ros-args"
     * }
     */
    public static MemorySegment RCL_ROS_ARGS_FLAG() {
        class Holder {
            static final MemorySegment RCL_ROS_ARGS_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("--ros-args");
        }
        return Holder.RCL_ROS_ARGS_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_ROS_ARGS_EXPLICIT_END_TOKEN "--"
     * }
     */
    public static MemorySegment RCL_ROS_ARGS_EXPLICIT_END_TOKEN() {
        class Holder {
            static final MemorySegment RCL_ROS_ARGS_EXPLICIT_END_TOKEN
                = gen_h.LIBRARY_ARENA.allocateFrom("--");
        }
        return Holder.RCL_ROS_ARGS_EXPLICIT_END_TOKEN;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_PARAM_FLAG "--param"
     * }
     */
    public static MemorySegment RCL_PARAM_FLAG() {
        class Holder {
            static final MemorySegment RCL_PARAM_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("--param");
        }
        return Holder.RCL_PARAM_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_SHORT_PARAM_FLAG "-p"
     * }
     */
    public static MemorySegment RCL_SHORT_PARAM_FLAG() {
        class Holder {
            static final MemorySegment RCL_SHORT_PARAM_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("-p");
        }
        return Holder.RCL_SHORT_PARAM_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_PARAM_FILE_FLAG "--params-file"
     * }
     */
    public static MemorySegment RCL_PARAM_FILE_FLAG() {
        class Holder {
            static final MemorySegment RCL_PARAM_FILE_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("--params-file");
        }
        return Holder.RCL_PARAM_FILE_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_REMAP_FLAG "--remap"
     * }
     */
    public static MemorySegment RCL_REMAP_FLAG() {
        class Holder {
            static final MemorySegment RCL_REMAP_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("--remap");
        }
        return Holder.RCL_REMAP_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_SHORT_REMAP_FLAG "-r"
     * }
     */
    public static MemorySegment RCL_SHORT_REMAP_FLAG() {
        class Holder {
            static final MemorySegment RCL_SHORT_REMAP_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("-r");
        }
        return Holder.RCL_SHORT_REMAP_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_ENCLAVE_FLAG "--enclave"
     * }
     */
    public static MemorySegment RCL_ENCLAVE_FLAG() {
        class Holder {
            static final MemorySegment RCL_ENCLAVE_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("--enclave");
        }
        return Holder.RCL_ENCLAVE_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_SHORT_ENCLAVE_FLAG "-e"
     * }
     */
    public static MemorySegment RCL_SHORT_ENCLAVE_FLAG() {
        class Holder {
            static final MemorySegment RCL_SHORT_ENCLAVE_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("-e");
        }
        return Holder.RCL_SHORT_ENCLAVE_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_LOG_LEVEL_FLAG "--log-level"
     * }
     */
    public static MemorySegment RCL_LOG_LEVEL_FLAG() {
        class Holder {
            static final MemorySegment RCL_LOG_LEVEL_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("--log-level");
        }
        return Holder.RCL_LOG_LEVEL_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_EXTERNAL_LOG_CONFIG_FLAG "--log-config-file"
     * }
     */
    public static MemorySegment RCL_EXTERNAL_LOG_CONFIG_FLAG() {
        class Holder {
            static final MemorySegment RCL_EXTERNAL_LOG_CONFIG_FLAG
                = gen_h.LIBRARY_ARENA.allocateFrom("--log-config-file");
        }
        return Holder.RCL_EXTERNAL_LOG_CONFIG_FLAG;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_LOG_STDOUT_FLAG_SUFFIX "stdout-logs"
     * }
     */
    public static MemorySegment RCL_LOG_STDOUT_FLAG_SUFFIX() {
        class Holder {
            static final MemorySegment RCL_LOG_STDOUT_FLAG_SUFFIX
                = gen_h.LIBRARY_ARENA.allocateFrom("stdout-logs");
        }
        return Holder.RCL_LOG_STDOUT_FLAG_SUFFIX;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_LOG_ROSOUT_FLAG_SUFFIX "rosout-logs"
     * }
     */
    public static MemorySegment RCL_LOG_ROSOUT_FLAG_SUFFIX() {
        class Holder {
            static final MemorySegment RCL_LOG_ROSOUT_FLAG_SUFFIX
                = gen_h.LIBRARY_ARENA.allocateFrom("rosout-logs");
        }
        return Holder.RCL_LOG_ROSOUT_FLAG_SUFFIX;
    }
    /**
     * {@snippet lang=c :
     * #define RCL_LOG_EXT_LIB_FLAG_SUFFIX "external-lib-logs"
     * }
     */
    public static MemorySegment RCL_LOG_EXT_LIB_FLAG_SUFFIX() {
        class Holder {
            static final MemorySegment RCL_LOG_EXT_LIB_FLAG_SUFFIX
                = gen_h.LIBRARY_ARENA.allocateFrom("external-lib-logs");
        }
        return Holder.RCL_LOG_EXT_LIB_FLAG_SUFFIX;
    }
    private static final long RCL_CONTEXT_ATOMIC_INSTANCE_ID_STORAGE_SIZE = 8L;
    /**
     * {@snippet lang=c :
     * #define RCL_CONTEXT_ATOMIC_INSTANCE_ID_STORAGE_SIZE 8
     * }
     */
    public static long RCL_CONTEXT_ATOMIC_INSTANCE_ID_STORAGE_SIZE() {
        return RCL_CONTEXT_ATOMIC_INSTANCE_ID_STORAGE_SIZE;
    }
    private static final long RCL_DEFAULT_DOMAIN_ID = -1L;
    /**
     * {@snippet lang=c :
     * #define RCL_DEFAULT_DOMAIN_ID -1
     * }
     */
    public static long RCL_DEFAULT_DOMAIN_ID() {
        return RCL_DEFAULT_DOMAIN_ID;
    }
    private static final long RCL_NODE_OPTIONS_DEFAULT_DOMAIN_ID = -1L;
    /**
     * {@snippet lang=c :
     * #define RCL_NODE_OPTIONS_DEFAULT_DOMAIN_ID -1
     * }
     */
    public static long RCL_NODE_OPTIONS_DEFAULT_DOMAIN_ID() {
        return RCL_NODE_OPTIONS_DEFAULT_DOMAIN_ID;
    }
    private static final int GOAL_STATE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GOAL_STATE_UNKNOWN 0
     * }
     */
    public static int GOAL_STATE_UNKNOWN() {
        return GOAL_STATE_UNKNOWN;
    }
    private static final int GOAL_STATE_ACCEPTED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GOAL_STATE_ACCEPTED 1
     * }
     */
    public static int GOAL_STATE_ACCEPTED() {
        return GOAL_STATE_ACCEPTED;
    }
    private static final int GOAL_STATE_EXECUTING = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GOAL_STATE_EXECUTING 2
     * }
     */
    public static int GOAL_STATE_EXECUTING() {
        return GOAL_STATE_EXECUTING;
    }
    private static final int GOAL_STATE_CANCELING = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GOAL_STATE_CANCELING 3
     * }
     */
    public static int GOAL_STATE_CANCELING() {
        return GOAL_STATE_CANCELING;
    }
    private static final int GOAL_STATE_SUCCEEDED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GOAL_STATE_SUCCEEDED 4
     * }
     */
    public static int GOAL_STATE_SUCCEEDED() {
        return GOAL_STATE_SUCCEEDED;
    }
    private static final int GOAL_STATE_CANCELED = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GOAL_STATE_CANCELED 5
     * }
     */
    public static int GOAL_STATE_CANCELED() {
        return GOAL_STATE_CANCELED;
    }
    private static final int GOAL_STATE_ABORTED = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GOAL_STATE_ABORTED 6
     * }
     */
    public static int GOAL_STATE_ABORTED() {
        return GOAL_STATE_ABORTED;
    }
    private static final int RCUTILS_LOG_MIN_SEVERITY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RCUTILS_LOG_MIN_SEVERITY 0
     * }
     */
    public static int RCUTILS_LOG_MIN_SEVERITY() {
        return RCUTILS_LOG_MIN_SEVERITY;
    }
}

