// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_lifecycle_com_interface_s {
 *     rcl_node_t *node_handle;
 *     rcl_publisher_t pub_transition_event;
 *     rcl_service_t srv_change_state;
 *     rcl_service_t srv_get_state;
 *     rcl_service_t srv_get_available_states;
 *     rcl_service_t srv_get_available_transitions;
 *     rcl_service_t srv_get_transition_graph;
 *     lifecycle_msgs__msg__TransitionEvent msg;
 * }
 * }
 */
public class rcl_lifecycle_com_interface_s {

    rcl_lifecycle_com_interface_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("node_handle"),
        rcl_publisher_s.layout().withName("pub_transition_event"),
        rcl_service_s.layout().withName("srv_change_state"),
        rcl_service_s.layout().withName("srv_get_state"),
        rcl_service_s.layout().withName("srv_get_available_states"),
        rcl_service_s.layout().withName("srv_get_available_transitions"),
        rcl_service_s.layout().withName("srv_get_transition_graph"),
        lifecycle_msgs__msg__TransitionEvent.layout().withName("msg")
    ).withName("rcl_lifecycle_com_interface_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout node_handle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("node_handle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_node_t *node_handle
     * }
     */
    public static final AddressLayout node_handle$layout() {
        return node_handle$LAYOUT;
    }

    private static final long node_handle$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_node_t *node_handle
     * }
     */
    public static final long node_handle$offset() {
        return node_handle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_node_t *node_handle
     * }
     */
    public static MemorySegment node_handle(MemorySegment struct) {
        return struct.get(node_handle$LAYOUT, node_handle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_node_t *node_handle
     * }
     */
    public static void node_handle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(node_handle$LAYOUT, node_handle$OFFSET, fieldValue);
    }

    private static final GroupLayout pub_transition_event$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pub_transition_event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_publisher_t pub_transition_event
     * }
     */
    public static final GroupLayout pub_transition_event$layout() {
        return pub_transition_event$LAYOUT;
    }

    private static final long pub_transition_event$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_publisher_t pub_transition_event
     * }
     */
    public static final long pub_transition_event$offset() {
        return pub_transition_event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_publisher_t pub_transition_event
     * }
     */
    public static MemorySegment pub_transition_event(MemorySegment struct) {
        return struct.asSlice(pub_transition_event$OFFSET, pub_transition_event$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_publisher_t pub_transition_event
     * }
     */
    public static void pub_transition_event(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pub_transition_event$OFFSET, pub_transition_event$LAYOUT.byteSize());
    }

    private static final GroupLayout srv_change_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srv_change_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t srv_change_state
     * }
     */
    public static final GroupLayout srv_change_state$layout() {
        return srv_change_state$LAYOUT;
    }

    private static final long srv_change_state$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t srv_change_state
     * }
     */
    public static final long srv_change_state$offset() {
        return srv_change_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_change_state
     * }
     */
    public static MemorySegment srv_change_state(MemorySegment struct) {
        return struct.asSlice(srv_change_state$OFFSET, srv_change_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_change_state
     * }
     */
    public static void srv_change_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srv_change_state$OFFSET, srv_change_state$LAYOUT.byteSize());
    }

    private static final GroupLayout srv_get_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srv_get_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_state
     * }
     */
    public static final GroupLayout srv_get_state$layout() {
        return srv_get_state$LAYOUT;
    }

    private static final long srv_get_state$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_state
     * }
     */
    public static final long srv_get_state$offset() {
        return srv_get_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_state
     * }
     */
    public static MemorySegment srv_get_state(MemorySegment struct) {
        return struct.asSlice(srv_get_state$OFFSET, srv_get_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_state
     * }
     */
    public static void srv_get_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srv_get_state$OFFSET, srv_get_state$LAYOUT.byteSize());
    }

    private static final GroupLayout srv_get_available_states$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srv_get_available_states"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_states
     * }
     */
    public static final GroupLayout srv_get_available_states$layout() {
        return srv_get_available_states$LAYOUT;
    }

    private static final long srv_get_available_states$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_states
     * }
     */
    public static final long srv_get_available_states$offset() {
        return srv_get_available_states$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_states
     * }
     */
    public static MemorySegment srv_get_available_states(MemorySegment struct) {
        return struct.asSlice(srv_get_available_states$OFFSET, srv_get_available_states$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_states
     * }
     */
    public static void srv_get_available_states(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srv_get_available_states$OFFSET, srv_get_available_states$LAYOUT.byteSize());
    }

    private static final GroupLayout srv_get_available_transitions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srv_get_available_transitions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_transitions
     * }
     */
    public static final GroupLayout srv_get_available_transitions$layout() {
        return srv_get_available_transitions$LAYOUT;
    }

    private static final long srv_get_available_transitions$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_transitions
     * }
     */
    public static final long srv_get_available_transitions$offset() {
        return srv_get_available_transitions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_transitions
     * }
     */
    public static MemorySegment srv_get_available_transitions(MemorySegment struct) {
        return struct.asSlice(srv_get_available_transitions$OFFSET, srv_get_available_transitions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_available_transitions
     * }
     */
    public static void srv_get_available_transitions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srv_get_available_transitions$OFFSET, srv_get_available_transitions$LAYOUT.byteSize());
    }

    private static final GroupLayout srv_get_transition_graph$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srv_get_transition_graph"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_transition_graph
     * }
     */
    public static final GroupLayout srv_get_transition_graph$layout() {
        return srv_get_transition_graph$LAYOUT;
    }

    private static final long srv_get_transition_graph$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_transition_graph
     * }
     */
    public static final long srv_get_transition_graph$offset() {
        return srv_get_transition_graph$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_transition_graph
     * }
     */
    public static MemorySegment srv_get_transition_graph(MemorySegment struct) {
        return struct.asSlice(srv_get_transition_graph$OFFSET, srv_get_transition_graph$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t srv_get_transition_graph
     * }
     */
    public static void srv_get_transition_graph(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srv_get_transition_graph$OFFSET, srv_get_transition_graph$LAYOUT.byteSize());
    }

    private static final GroupLayout msg$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("msg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent msg
     * }
     */
    public static final GroupLayout msg$layout() {
        return msg$LAYOUT;
    }

    private static final long msg$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent msg
     * }
     */
    public static final long msg$offset() {
        return msg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent msg
     * }
     */
    public static MemorySegment msg(MemorySegment struct) {
        return struct.asSlice(msg$OFFSET, msg$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lifecycle_msgs__msg__TransitionEvent msg
     * }
     */
    public static void msg(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, msg$OFFSET, msg$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

