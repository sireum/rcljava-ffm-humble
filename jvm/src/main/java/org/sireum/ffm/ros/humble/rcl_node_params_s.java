// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_node_params_s {
 *     char **parameter_names;
 *     rcl_variant_t *parameter_values;
 *     size_t num_params;
 *     size_t capacity_params;
 * }
 * }
 */
public class rcl_node_params_s {

    rcl_node_params_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_POINTER.withName("parameter_names"),
        gen_h.C_POINTER.withName("parameter_values"),
        gen_h.C_LONG.withName("num_params"),
        gen_h.C_LONG.withName("capacity_params")
    ).withName("rcl_node_params_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout parameter_names$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("parameter_names"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char **parameter_names
     * }
     */
    public static final AddressLayout parameter_names$layout() {
        return parameter_names$LAYOUT;
    }

    private static final long parameter_names$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char **parameter_names
     * }
     */
    public static final long parameter_names$offset() {
        return parameter_names$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char **parameter_names
     * }
     */
    public static MemorySegment parameter_names(MemorySegment struct) {
        return struct.get(parameter_names$LAYOUT, parameter_names$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char **parameter_names
     * }
     */
    public static void parameter_names(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(parameter_names$LAYOUT, parameter_names$OFFSET, fieldValue);
    }

    private static final AddressLayout parameter_values$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("parameter_values"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_variant_t *parameter_values
     * }
     */
    public static final AddressLayout parameter_values$layout() {
        return parameter_values$LAYOUT;
    }

    private static final long parameter_values$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_variant_t *parameter_values
     * }
     */
    public static final long parameter_values$offset() {
        return parameter_values$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_variant_t *parameter_values
     * }
     */
    public static MemorySegment parameter_values(MemorySegment struct) {
        return struct.get(parameter_values$LAYOUT, parameter_values$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_variant_t *parameter_values
     * }
     */
    public static void parameter_values(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(parameter_values$LAYOUT, parameter_values$OFFSET, fieldValue);
    }

    private static final OfLong num_params$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t num_params
     * }
     */
    public static final OfLong num_params$layout() {
        return num_params$LAYOUT;
    }

    private static final long num_params$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t num_params
     * }
     */
    public static final long num_params$offset() {
        return num_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t num_params
     * }
     */
    public static long num_params(MemorySegment struct) {
        return struct.get(num_params$LAYOUT, num_params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t num_params
     * }
     */
    public static void num_params(MemorySegment struct, long fieldValue) {
        struct.set(num_params$LAYOUT, num_params$OFFSET, fieldValue);
    }

    private static final OfLong capacity_params$LAYOUT = (OfLong)$LAYOUT.select(groupElement("capacity_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t capacity_params
     * }
     */
    public static final OfLong capacity_params$layout() {
        return capacity_params$LAYOUT;
    }

    private static final long capacity_params$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t capacity_params
     * }
     */
    public static final long capacity_params$offset() {
        return capacity_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t capacity_params
     * }
     */
    public static long capacity_params(MemorySegment struct) {
        return struct.get(capacity_params$LAYOUT, capacity_params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t capacity_params
     * }
     */
    public static void capacity_params(MemorySegment struct, long fieldValue) {
        struct.set(capacity_params$LAYOUT, capacity_params$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

