// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rclc_parameter_server_t {
 *     rcl_service_t get_service;
 *     rcl_service_t get_types_service;
 *     rcl_service_t set_service;
 *     rcl_service_t list_service;
 *     rcl_service_t describe_service;
 *     rcl_publisher_t event_publisher;
 *     GetParameters_Request get_request;
 *     GetParameters_Response get_response;
 *     GetParameterTypes_Request get_types_request;
 *     GetParameterTypes_Response get_types_response;
 *     SetParameters_Request set_request;
 *     SetParameters_Response set_response;
 *     ListParameters_Request list_request;
 *     ListParameters_Response list_response;
 *     DescribeParameters_Request describe_request;
 *     DescribeParameters_Response describe_response;
 *     Parameter__Sequence parameter_list;
 *     ParameterDescriptor__Sequence parameter_descriptors;
 *     ParameterEvent event_list;
 *     rclc_parameter_callback_t on_modification;
 *     void *context;
 *     bool on_callback;
 *     bool notify_changed_over_dds;
 *     bool allow_undeclared_parameters;
 *     bool low_mem_mode;
 * }
 * }
 */
public class rclc_parameter_server_t {

    rclc_parameter_server_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rcl_service_s.layout().withName("get_service"),
        rcl_service_s.layout().withName("get_types_service"),
        rcl_service_s.layout().withName("set_service"),
        rcl_service_s.layout().withName("list_service"),
        rcl_service_s.layout().withName("describe_service"),
        rcl_publisher_s.layout().withName("event_publisher"),
        rcl_interfaces__srv__GetParameters_Request.layout().withName("get_request"),
        rcl_interfaces__srv__GetParameters_Response.layout().withName("get_response"),
        rcl_interfaces__srv__GetParameterTypes_Request.layout().withName("get_types_request"),
        rcl_interfaces__srv__GetParameterTypes_Response.layout().withName("get_types_response"),
        rcl_interfaces__srv__SetParameters_Request.layout().withName("set_request"),
        rcl_interfaces__srv__SetParameters_Response.layout().withName("set_response"),
        rcl_interfaces__srv__ListParameters_Request.layout().withName("list_request"),
        rcl_interfaces__srv__ListParameters_Response.layout().withName("list_response"),
        rcl_interfaces__srv__DescribeParameters_Request.layout().withName("describe_request"),
        rcl_interfaces__srv__DescribeParameters_Response.layout().withName("describe_response"),
        rcl_interfaces__msg__Parameter__Sequence.layout().withName("parameter_list"),
        rcl_interfaces__msg__ParameterDescriptor__Sequence.layout().withName("parameter_descriptors"),
        rcl_interfaces__msg__ParameterEvent.layout().withName("event_list"),
        gen_h.C_POINTER.withName("on_modification"),
        gen_h.C_POINTER.withName("context"),
        gen_h.C_BOOL.withName("on_callback"),
        gen_h.C_BOOL.withName("notify_changed_over_dds"),
        gen_h.C_BOOL.withName("allow_undeclared_parameters"),
        gen_h.C_BOOL.withName("low_mem_mode"),
        MemoryLayout.paddingLayout(4)
    ).withName("rclc_parameter_server_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout get_service$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_service"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t get_service
     * }
     */
    public static final GroupLayout get_service$layout() {
        return get_service$LAYOUT;
    }

    private static final long get_service$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t get_service
     * }
     */
    public static final long get_service$offset() {
        return get_service$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t get_service
     * }
     */
    public static MemorySegment get_service(MemorySegment struct) {
        return struct.asSlice(get_service$OFFSET, get_service$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t get_service
     * }
     */
    public static void get_service(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, get_service$OFFSET, get_service$LAYOUT.byteSize());
    }

    private static final GroupLayout get_types_service$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_types_service"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t get_types_service
     * }
     */
    public static final GroupLayout get_types_service$layout() {
        return get_types_service$LAYOUT;
    }

    private static final long get_types_service$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t get_types_service
     * }
     */
    public static final long get_types_service$offset() {
        return get_types_service$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t get_types_service
     * }
     */
    public static MemorySegment get_types_service(MemorySegment struct) {
        return struct.asSlice(get_types_service$OFFSET, get_types_service$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t get_types_service
     * }
     */
    public static void get_types_service(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, get_types_service$OFFSET, get_types_service$LAYOUT.byteSize());
    }

    private static final GroupLayout set_service$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("set_service"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t set_service
     * }
     */
    public static final GroupLayout set_service$layout() {
        return set_service$LAYOUT;
    }

    private static final long set_service$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t set_service
     * }
     */
    public static final long set_service$offset() {
        return set_service$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t set_service
     * }
     */
    public static MemorySegment set_service(MemorySegment struct) {
        return struct.asSlice(set_service$OFFSET, set_service$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t set_service
     * }
     */
    public static void set_service(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, set_service$OFFSET, set_service$LAYOUT.byteSize());
    }

    private static final GroupLayout list_service$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list_service"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t list_service
     * }
     */
    public static final GroupLayout list_service$layout() {
        return list_service$LAYOUT;
    }

    private static final long list_service$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t list_service
     * }
     */
    public static final long list_service$offset() {
        return list_service$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t list_service
     * }
     */
    public static MemorySegment list_service(MemorySegment struct) {
        return struct.asSlice(list_service$OFFSET, list_service$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t list_service
     * }
     */
    public static void list_service(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, list_service$OFFSET, list_service$LAYOUT.byteSize());
    }

    private static final GroupLayout describe_service$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("describe_service"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_service_t describe_service
     * }
     */
    public static final GroupLayout describe_service$layout() {
        return describe_service$LAYOUT;
    }

    private static final long describe_service$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_service_t describe_service
     * }
     */
    public static final long describe_service$offset() {
        return describe_service$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_service_t describe_service
     * }
     */
    public static MemorySegment describe_service(MemorySegment struct) {
        return struct.asSlice(describe_service$OFFSET, describe_service$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_service_t describe_service
     * }
     */
    public static void describe_service(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, describe_service$OFFSET, describe_service$LAYOUT.byteSize());
    }

    private static final GroupLayout event_publisher$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("event_publisher"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rcl_publisher_t event_publisher
     * }
     */
    public static final GroupLayout event_publisher$layout() {
        return event_publisher$LAYOUT;
    }

    private static final long event_publisher$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rcl_publisher_t event_publisher
     * }
     */
    public static final long event_publisher$offset() {
        return event_publisher$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rcl_publisher_t event_publisher
     * }
     */
    public static MemorySegment event_publisher(MemorySegment struct) {
        return struct.asSlice(event_publisher$OFFSET, event_publisher$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rcl_publisher_t event_publisher
     * }
     */
    public static void event_publisher(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, event_publisher$OFFSET, event_publisher$LAYOUT.byteSize());
    }

    private static final GroupLayout get_request$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GetParameters_Request get_request
     * }
     */
    public static final GroupLayout get_request$layout() {
        return get_request$LAYOUT;
    }

    private static final long get_request$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GetParameters_Request get_request
     * }
     */
    public static final long get_request$offset() {
        return get_request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GetParameters_Request get_request
     * }
     */
    public static MemorySegment get_request(MemorySegment struct) {
        return struct.asSlice(get_request$OFFSET, get_request$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GetParameters_Request get_request
     * }
     */
    public static void get_request(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, get_request$OFFSET, get_request$LAYOUT.byteSize());
    }

    private static final GroupLayout get_response$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_response"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GetParameters_Response get_response
     * }
     */
    public static final GroupLayout get_response$layout() {
        return get_response$LAYOUT;
    }

    private static final long get_response$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GetParameters_Response get_response
     * }
     */
    public static final long get_response$offset() {
        return get_response$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GetParameters_Response get_response
     * }
     */
    public static MemorySegment get_response(MemorySegment struct) {
        return struct.asSlice(get_response$OFFSET, get_response$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GetParameters_Response get_response
     * }
     */
    public static void get_response(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, get_response$OFFSET, get_response$LAYOUT.byteSize());
    }

    private static final GroupLayout get_types_request$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_types_request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GetParameterTypes_Request get_types_request
     * }
     */
    public static final GroupLayout get_types_request$layout() {
        return get_types_request$LAYOUT;
    }

    private static final long get_types_request$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GetParameterTypes_Request get_types_request
     * }
     */
    public static final long get_types_request$offset() {
        return get_types_request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GetParameterTypes_Request get_types_request
     * }
     */
    public static MemorySegment get_types_request(MemorySegment struct) {
        return struct.asSlice(get_types_request$OFFSET, get_types_request$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GetParameterTypes_Request get_types_request
     * }
     */
    public static void get_types_request(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, get_types_request$OFFSET, get_types_request$LAYOUT.byteSize());
    }

    private static final GroupLayout get_types_response$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_types_response"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GetParameterTypes_Response get_types_response
     * }
     */
    public static final GroupLayout get_types_response$layout() {
        return get_types_response$LAYOUT;
    }

    private static final long get_types_response$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GetParameterTypes_Response get_types_response
     * }
     */
    public static final long get_types_response$offset() {
        return get_types_response$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GetParameterTypes_Response get_types_response
     * }
     */
    public static MemorySegment get_types_response(MemorySegment struct) {
        return struct.asSlice(get_types_response$OFFSET, get_types_response$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GetParameterTypes_Response get_types_response
     * }
     */
    public static void get_types_response(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, get_types_response$OFFSET, get_types_response$LAYOUT.byteSize());
    }

    private static final GroupLayout set_request$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("set_request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SetParameters_Request set_request
     * }
     */
    public static final GroupLayout set_request$layout() {
        return set_request$LAYOUT;
    }

    private static final long set_request$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SetParameters_Request set_request
     * }
     */
    public static final long set_request$offset() {
        return set_request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SetParameters_Request set_request
     * }
     */
    public static MemorySegment set_request(MemorySegment struct) {
        return struct.asSlice(set_request$OFFSET, set_request$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SetParameters_Request set_request
     * }
     */
    public static void set_request(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, set_request$OFFSET, set_request$LAYOUT.byteSize());
    }

    private static final GroupLayout set_response$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("set_response"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SetParameters_Response set_response
     * }
     */
    public static final GroupLayout set_response$layout() {
        return set_response$LAYOUT;
    }

    private static final long set_response$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SetParameters_Response set_response
     * }
     */
    public static final long set_response$offset() {
        return set_response$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SetParameters_Response set_response
     * }
     */
    public static MemorySegment set_response(MemorySegment struct) {
        return struct.asSlice(set_response$OFFSET, set_response$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SetParameters_Response set_response
     * }
     */
    public static void set_response(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, set_response$OFFSET, set_response$LAYOUT.byteSize());
    }

    private static final GroupLayout list_request$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list_request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ListParameters_Request list_request
     * }
     */
    public static final GroupLayout list_request$layout() {
        return list_request$LAYOUT;
    }

    private static final long list_request$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ListParameters_Request list_request
     * }
     */
    public static final long list_request$offset() {
        return list_request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ListParameters_Request list_request
     * }
     */
    public static MemorySegment list_request(MemorySegment struct) {
        return struct.asSlice(list_request$OFFSET, list_request$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ListParameters_Request list_request
     * }
     */
    public static void list_request(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, list_request$OFFSET, list_request$LAYOUT.byteSize());
    }

    private static final GroupLayout list_response$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list_response"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ListParameters_Response list_response
     * }
     */
    public static final GroupLayout list_response$layout() {
        return list_response$LAYOUT;
    }

    private static final long list_response$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ListParameters_Response list_response
     * }
     */
    public static final long list_response$offset() {
        return list_response$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ListParameters_Response list_response
     * }
     */
    public static MemorySegment list_response(MemorySegment struct) {
        return struct.asSlice(list_response$OFFSET, list_response$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ListParameters_Response list_response
     * }
     */
    public static void list_response(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, list_response$OFFSET, list_response$LAYOUT.byteSize());
    }

    private static final GroupLayout describe_request$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("describe_request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DescribeParameters_Request describe_request
     * }
     */
    public static final GroupLayout describe_request$layout() {
        return describe_request$LAYOUT;
    }

    private static final long describe_request$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DescribeParameters_Request describe_request
     * }
     */
    public static final long describe_request$offset() {
        return describe_request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DescribeParameters_Request describe_request
     * }
     */
    public static MemorySegment describe_request(MemorySegment struct) {
        return struct.asSlice(describe_request$OFFSET, describe_request$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DescribeParameters_Request describe_request
     * }
     */
    public static void describe_request(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, describe_request$OFFSET, describe_request$LAYOUT.byteSize());
    }

    private static final GroupLayout describe_response$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("describe_response"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DescribeParameters_Response describe_response
     * }
     */
    public static final GroupLayout describe_response$layout() {
        return describe_response$LAYOUT;
    }

    private static final long describe_response$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DescribeParameters_Response describe_response
     * }
     */
    public static final long describe_response$offset() {
        return describe_response$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DescribeParameters_Response describe_response
     * }
     */
    public static MemorySegment describe_response(MemorySegment struct) {
        return struct.asSlice(describe_response$OFFSET, describe_response$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DescribeParameters_Response describe_response
     * }
     */
    public static void describe_response(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, describe_response$OFFSET, describe_response$LAYOUT.byteSize());
    }

    private static final GroupLayout parameter_list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parameter_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Parameter__Sequence parameter_list
     * }
     */
    public static final GroupLayout parameter_list$layout() {
        return parameter_list$LAYOUT;
    }

    private static final long parameter_list$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Parameter__Sequence parameter_list
     * }
     */
    public static final long parameter_list$offset() {
        return parameter_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Parameter__Sequence parameter_list
     * }
     */
    public static MemorySegment parameter_list(MemorySegment struct) {
        return struct.asSlice(parameter_list$OFFSET, parameter_list$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Parameter__Sequence parameter_list
     * }
     */
    public static void parameter_list(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parameter_list$OFFSET, parameter_list$LAYOUT.byteSize());
    }

    private static final GroupLayout parameter_descriptors$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parameter_descriptors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ParameterDescriptor__Sequence parameter_descriptors
     * }
     */
    public static final GroupLayout parameter_descriptors$layout() {
        return parameter_descriptors$LAYOUT;
    }

    private static final long parameter_descriptors$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ParameterDescriptor__Sequence parameter_descriptors
     * }
     */
    public static final long parameter_descriptors$offset() {
        return parameter_descriptors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ParameterDescriptor__Sequence parameter_descriptors
     * }
     */
    public static MemorySegment parameter_descriptors(MemorySegment struct) {
        return struct.asSlice(parameter_descriptors$OFFSET, parameter_descriptors$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ParameterDescriptor__Sequence parameter_descriptors
     * }
     */
    public static void parameter_descriptors(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parameter_descriptors$OFFSET, parameter_descriptors$LAYOUT.byteSize());
    }

    private static final GroupLayout event_list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("event_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ParameterEvent event_list
     * }
     */
    public static final GroupLayout event_list$layout() {
        return event_list$LAYOUT;
    }

    private static final long event_list$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ParameterEvent event_list
     * }
     */
    public static final long event_list$offset() {
        return event_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ParameterEvent event_list
     * }
     */
    public static MemorySegment event_list(MemorySegment struct) {
        return struct.asSlice(event_list$OFFSET, event_list$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ParameterEvent event_list
     * }
     */
    public static void event_list(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, event_list$OFFSET, event_list$LAYOUT.byteSize());
    }

    private static final AddressLayout on_modification$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("on_modification"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rclc_parameter_callback_t on_modification
     * }
     */
    public static final AddressLayout on_modification$layout() {
        return on_modification$LAYOUT;
    }

    private static final long on_modification$OFFSET = 472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rclc_parameter_callback_t on_modification
     * }
     */
    public static final long on_modification$offset() {
        return on_modification$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rclc_parameter_callback_t on_modification
     * }
     */
    public static MemorySegment on_modification(MemorySegment struct) {
        return struct.get(on_modification$LAYOUT, on_modification$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rclc_parameter_callback_t on_modification
     * }
     */
    public static void on_modification(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(on_modification$LAYOUT, on_modification$OFFSET, fieldValue);
    }

    private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static final AddressLayout context$layout() {
        return context$LAYOUT;
    }

    private static final long context$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static final long context$offset() {
        return context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static MemorySegment context(MemorySegment struct) {
        return struct.get(context$LAYOUT, context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static void context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(context$LAYOUT, context$OFFSET, fieldValue);
    }

    private static final OfBoolean on_callback$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("on_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool on_callback
     * }
     */
    public static final OfBoolean on_callback$layout() {
        return on_callback$LAYOUT;
    }

    private static final long on_callback$OFFSET = 488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool on_callback
     * }
     */
    public static final long on_callback$offset() {
        return on_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool on_callback
     * }
     */
    public static boolean on_callback(MemorySegment struct) {
        return struct.get(on_callback$LAYOUT, on_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool on_callback
     * }
     */
    public static void on_callback(MemorySegment struct, boolean fieldValue) {
        struct.set(on_callback$LAYOUT, on_callback$OFFSET, fieldValue);
    }

    private static final OfBoolean notify_changed_over_dds$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("notify_changed_over_dds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool notify_changed_over_dds
     * }
     */
    public static final OfBoolean notify_changed_over_dds$layout() {
        return notify_changed_over_dds$LAYOUT;
    }

    private static final long notify_changed_over_dds$OFFSET = 489;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool notify_changed_over_dds
     * }
     */
    public static final long notify_changed_over_dds$offset() {
        return notify_changed_over_dds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool notify_changed_over_dds
     * }
     */
    public static boolean notify_changed_over_dds(MemorySegment struct) {
        return struct.get(notify_changed_over_dds$LAYOUT, notify_changed_over_dds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool notify_changed_over_dds
     * }
     */
    public static void notify_changed_over_dds(MemorySegment struct, boolean fieldValue) {
        struct.set(notify_changed_over_dds$LAYOUT, notify_changed_over_dds$OFFSET, fieldValue);
    }

    private static final OfBoolean allow_undeclared_parameters$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("allow_undeclared_parameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool allow_undeclared_parameters
     * }
     */
    public static final OfBoolean allow_undeclared_parameters$layout() {
        return allow_undeclared_parameters$LAYOUT;
    }

    private static final long allow_undeclared_parameters$OFFSET = 490;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool allow_undeclared_parameters
     * }
     */
    public static final long allow_undeclared_parameters$offset() {
        return allow_undeclared_parameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool allow_undeclared_parameters
     * }
     */
    public static boolean allow_undeclared_parameters(MemorySegment struct) {
        return struct.get(allow_undeclared_parameters$LAYOUT, allow_undeclared_parameters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool allow_undeclared_parameters
     * }
     */
    public static void allow_undeclared_parameters(MemorySegment struct, boolean fieldValue) {
        struct.set(allow_undeclared_parameters$LAYOUT, allow_undeclared_parameters$OFFSET, fieldValue);
    }

    private static final OfBoolean low_mem_mode$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("low_mem_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool low_mem_mode
     * }
     */
    public static final OfBoolean low_mem_mode$layout() {
        return low_mem_mode$LAYOUT;
    }

    private static final long low_mem_mode$OFFSET = 491;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool low_mem_mode
     * }
     */
    public static final long low_mem_mode$offset() {
        return low_mem_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool low_mem_mode
     * }
     */
    public static boolean low_mem_mode(MemorySegment struct) {
        return struct.get(low_mem_mode$LAYOUT, low_mem_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool low_mem_mode
     * }
     */
    public static void low_mem_mode(MemorySegment struct, boolean fieldValue) {
        struct.set(low_mem_mode$LAYOUT, low_mem_mode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

