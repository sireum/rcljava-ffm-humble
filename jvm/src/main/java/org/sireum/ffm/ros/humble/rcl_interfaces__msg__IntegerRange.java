// Generated by jextract

package org.sireum.ffm.ros.humble;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rcl_interfaces__msg__IntegerRange {
 *     int64_t from_value;
 *     int64_t to_value;
 *     uint64_t step;
 * }
 * }
 */
public class rcl_interfaces__msg__IntegerRange {

    rcl_interfaces__msg__IntegerRange() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gen_h.C_LONG.withName("from_value"),
        gen_h.C_LONG.withName("to_value"),
        gen_h.C_LONG.withName("step")
    ).withName("rcl_interfaces__msg__IntegerRange");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong from_value$LAYOUT = (OfLong)$LAYOUT.select(groupElement("from_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t from_value
     * }
     */
    public static final OfLong from_value$layout() {
        return from_value$LAYOUT;
    }

    private static final long from_value$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t from_value
     * }
     */
    public static final long from_value$offset() {
        return from_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t from_value
     * }
     */
    public static long from_value(MemorySegment struct) {
        return struct.get(from_value$LAYOUT, from_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t from_value
     * }
     */
    public static void from_value(MemorySegment struct, long fieldValue) {
        struct.set(from_value$LAYOUT, from_value$OFFSET, fieldValue);
    }

    private static final OfLong to_value$LAYOUT = (OfLong)$LAYOUT.select(groupElement("to_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t to_value
     * }
     */
    public static final OfLong to_value$layout() {
        return to_value$LAYOUT;
    }

    private static final long to_value$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t to_value
     * }
     */
    public static final long to_value$offset() {
        return to_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t to_value
     * }
     */
    public static long to_value(MemorySegment struct) {
        return struct.get(to_value$LAYOUT, to_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t to_value
     * }
     */
    public static void to_value(MemorySegment struct, long fieldValue) {
        struct.set(to_value$LAYOUT, to_value$OFFSET, fieldValue);
    }

    private static final OfLong step$LAYOUT = (OfLong)$LAYOUT.select(groupElement("step"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t step
     * }
     */
    public static final OfLong step$layout() {
        return step$LAYOUT;
    }

    private static final long step$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t step
     * }
     */
    public static final long step$offset() {
        return step$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t step
     * }
     */
    public static long step(MemorySegment struct) {
        return struct.get(step$LAYOUT, step$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t step
     * }
     */
    public static void step(MemorySegment struct, long fieldValue) {
        struct.set(step$LAYOUT, step$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

